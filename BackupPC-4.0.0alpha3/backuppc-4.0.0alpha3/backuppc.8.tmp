.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BACKUPPC 8"
.TH BACKUPPC 8 "2015-08-25" "perl v5.20.2" "BackupPC manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
This documentation describes BackupPC version 4.0.0alpha3,
released on 1 Dec 2013.
.SS "Overview"
.IX Subsection "Overview"
BackupPC is a high-performance, enterprise-grade system for backing up
Unix, Linux, WinXX, and MacOSX PCs, desktops and laptops to a server's
disk.  BackupPC is highly configurable and easy to install and maintain.
.PP
Given the ever decreasing cost of disks and raid systems, it is now
practical and cost effective to backup a large number of machines onto
a server's local disk or network storage.  For some sites this might be
the complete backup solution.  For other sites additional permanent
archives could be created by periodically backing up the server to tape.
.PP
Features include:
.IP "\(bu" 4
A clever pooling scheme minimizes disk storage and disk I/O.
Identical files across multiple backups of the same or different \s-1PC\s0
are stored only once (using hard links), resulting in substantial
savings in disk storage and disk writes.
.IP "\(bu" 4
Compression provides additional reductions in storage, depending
on the type of data being backed up. The \s-1CPU\s0 impact of compression
is low since only new files (those not already in the pool) need
to be compressed.
.IP "\(bu" 4
A powerful http/cgi user interface allows administrators to view
the current status, edit configuration, add/delete hosts, view log
files, and allows users to initiate and cancel backups and browse
and restore files from backups.
.IP "\(bu" 4
The http/cgi user interface has internationalization (i18n) support,
currently providing English, French, German, Spanish, Italian,
Dutch, Polish, Portuguese-Brazilian, Chinese, Polish, Czech,
Japanese, Ukrainian, and Russian.
.IP "\(bu" 4
No client-side software is needed. On WinXX the standard smb
protocol is used to extract backup data. On linux, unix or MacOSX
clients, rsync, tar (over ssh/rsh/nfs) or ftp is used to extract
backup data.  Alternatively, rsync can also be used on WinXX (using
cygwin), since rsync provides for efficient transfers and allows
incremental backups to detect almost all changes.
.IP "\(bu" 4
Flexible restore options.  Single files can be downloaded from
any backup directly from the \s-1CGI\s0 interface.  Zip or Tar archives
for selected files or directories from any backup can also be
downloaded from the \s-1CGI\s0 interface.  Finally, direct restore to
the client machine (using smb or tar) for selected files or
directories is also supported from the \s-1CGI\s0 interface.
.IP "\(bu" 4
BackupPC supports mobile environments where laptops are only
intermittently connected to the network and have dynamic \s-1IP\s0 addresses
(\s-1DHCP\s0).  Configuration settings allow machines connected via slower \s-1WAN\s0
connections (eg: dial up, \s-1DSL,\s0 cable) to not be backed up, even if they
use the same fixed or dynamic \s-1IP\s0 address as when they are connected
directly to the \s-1LAN.\s0
.IP "\(bu" 4
Flexible configuration parameters allow multiple backups to be performed
in parallel, specification of which shares to backup, which directories
to backup or not backup, various schedules for full and incremental
backups, schedules for email reminders to users and so on.  Configuration
parameters can be set system-wide or also on a per-PC basis.
.IP "\(bu" 4
Users are sent periodic email reminders if their \s-1PC\s0 has not
recently been backed up.  Email content, timing and policies
are configurable.
.IP "\(bu" 4
BackupPC is Open Source software hosted by SourceForge.
.SS "BackupPC 4.0"
.IX Subsection "BackupPC 4.0"
This is the first release of 4.0, which is a significant rewrite of
BackupPC.  Significant portions of this documentation have not been
updated.  This section provides a short overview of the changes and
features in 4.0.
.PP
Here's a short summary of what has changed in V4:
.IP "\(bu" 4
No use of hardlinks (except temporarily to do atomic renames).  Reference counting
is handled at the application level in a batch manner.
.IP "\(bu" 4
Backups are stored as \*(L"reverse deltas\*(R" \- the most recent backup is always filled
and older backups are reconstitued by merging all the deltas starting with the
nearest future filled backup and working backwards.
.Sp
This is the opposite of V3 where incrementals are stored as \*(L"forward deltas\*(R"
to a prior backup (typically the last full backup or prior lower-level
incremental backup, or the last full in the case of rsync).
.IP "\(bu" 4
Since the most recent backup is filled, viewing/restoring that backup (which is
the most common backup used) doesn't require mergning any deltas from other backups.
.IP "\(bu" 4
The concepts of incr/full backups and unfilled/filled storage are decoupled.
.IP "\(bu" 4
Uses full-file \s-1MD5\s0 digests, which are stored in the directory attrib files.
Each backup directory only contains an attrib file.
.IP "\(bu" 4
The Pool layout still support chains to handle md5 collisions.  While collisions
can be constructed and are now well-known, they are highly unlikely in the wild.
Pool files are never renamed or moved, unlike V3.
.IP "\(bu" 4
Any backup can be deleted (deltas are merged into next older backup if it is
not filled).
.IP "\(bu" 4
The reverse deltas allow \*(L"infinte incrementals\*(R" \- no need for a full backup
if you are willing to trade speed for the risk that a file change will
not be detected if the mtime or size don't change.
.IP "\(bu" 4
An rsync \*(L"full\*(R" backup now uses \-\-checksum (instead of \-\-ignore\-times),
which is much more efficient on the server side \- the server just needs to
check the full-file checksum computed by the client, together with the mtime,
nlinks, size attributes, to see if the file has changed.  If you want a more
conservative approach, you can change it back to \-\-ignore\-times, which
requires the server to send block checksums to the client.
.IP "\(bu" 4
The use of rsync \-\-checksum allows BackupPC to guess a potential match
anywhere in the pool, even on a first-time backup.  In that case, the usual
rsync block checksums are still exchanged to make sure the complete file
is identical.
.IP "\(bu" 4
Uses rsync\-3.0.9 on the server side (in place of File::RsyncP), with
C code layer to interface to the BackupPC storage.  So the whole data
path for rsync is now in compiled C code, which is much faster than perl.
.IP "\(bu" 4
Due to the use of rsync\-3.X, acls and xattrs are supported, and many other
useful options (but not all) are supported.  Rsync protocol 30 supports
the efficient incremental file list, which significantly improves memory
usage and startup time.  It also supports \s-1MD5\s0 full-file checksums, which
match BackupPC's new digest.  That allows a full-file digest to be checked
as easily as an mtime on the server side.
.IP "\(bu" 4
Significant portions of the BackupPC code are now compiled C code in a
new module called BackupPC::XS that is dynamically linked to perl.
.IP "\(bu" 4
\&\s-1FTP\s0 Xfer method isn't supported yet.
.PP
Here is a more detailed discussion:
.IP "\(bu" 4
Completely new backup storage.  No hardlinks!  Backups are stored as
reverse deltas, with the most recent backup always filled.  Prior
backup \*(L"n\*(R" contains the changes relative to prior backup \*(L"n+1\*(R".
.IP "\(bu" 4
Since every backup is based on the last filled backup, the concept of
incremental levels is removed.
.IP "\(bu" 4
Example: let's assume backup #4 is the most recent, and therefore filled,
and backups #0..3 are not filled.
.Sp
Backups #0..3 store just the necessary reverse changes needed to
reconstruct those backups, relative to the next backup.
.Sp
.Vb 4
\&   \- To view/restore backup #4, all the information is stored in backup #4.
\&   \- To view/restore backup #3, backup #4 (the filled one), is merged with the deltas in #3.
\&   \- To view/restore backup #2, backup #4 (the filled one), is merged with the deltas in #3 and #2
\&   \- etc.
.Ve
.Sp
When a new backup is started (#5), we begin by renaming backup
#4 to #5.  At that instant, backup #4 storage is now empty (which
means backups #4 and #5 are currently identical).  As the backup
runs, changes are made to #5 with the changed/new files in place,
and the opposite changes are added to backup #4, to keep the \*(L"view\*(R"
of backup #4 unchanged.
.Sp
After the backup is done, #5 is now the filled version of the
latest backup, and #4 are the changes necessary to turn #5 
back into the state when backup #4 was done.  If there are no
changes detected in the new backup, the storage tree for #4 will
be empty.  If just one file changed, the new file will be below
#5, and the prior file will be below #4 (well, technically not
quite true, since files aren't stored below the backup trees;
more correctly, the attrib file in #5 will point to the new pool
file, and the attrib file in #4 will point to the old pool file).
.IP "\(bu" 4
The concepts of incr/full backups and unfilled/filled storage are now
decoupled.  The most recent backups is always filled (whether or not
the last backup was a full or incr).  Certain older backups
can be filled for convenience to make restoring old backups
faster (because fewer backups need to be merged), and are used
to specify expiry schedules.
.IP "\(bu" 4
The treatment of a \*(L"Partial\*(R" backup has changed.  To understand this,
let's assume that when the backup starts, the last backup #n is renumbered
to #n+1, and an empty tree #n is created to hold the reverse deltas.
.Sp
If the backup fails, if no files have been backed up, the emtpy backup
#n is removed.
.Sp
If some files were backed up, the last backup is marked \*(L"partial\*(R".
When the next backup starts, as usual the new backup is numbered #n+2
and an empty delta is created at #n+1.  Once the backup finishes
(whether successfully or not), backup #n+1 is deleted, which means
the two sets of deltas in #n and #n+1 are merged into #n.
.IP "\(bu" 4
Backups are stored as mangled directory trees, but each directory only
contains an \*(L"attrib\*(R" file.  The attrib file comprises a header and
the \s-1MD5\s0 digest of the real attribute file contents in the pool.
.Sp
The real attrib file in the pool contains the directory contents: for each,
file, that means the meta data, xattrs and the \s-1MD5\s0 digest of the file
contents.
.IP "\(bu" 4
A modified rsync 3.0.9, called rsync_bpc, is used on the server side, with a
C code layer that emulates all the file-system \s-1OS\s0 calls to be compatible with
the BackupPC store.  That means for rsync, the data path is now fully in
complied C, which should mean a significant speedup.  It also means many
(but not all) of the rsync options are supported natively.
.IP "\(bu" 4
Significant parts of the BackupPC storage and pooling code have been written in C
(the same code is used in the server rsync_bpc).  BackupPC::FileZIO, BackupPC::PoolWrite,
BackupPC::Attrib, BackupPC::AttribCache and BackupPC::PoolRefCnt (reference counting and
storage) are all replaced with BackupPC::XS, a C\-code perl extension.
.IP "\(bu" 4
Extended attributes (xattr) are supported.  Rsync is configured to \*(L"store acls using xattr\*(R",
meaning both acls and xattrs are supported.
.IP "\(bu" 4
infinite incrementals with rsync are supported.  The most recent backup is always
filled, so an incremental will still leave the most recent backup filled.
.IP "\(bu" 4
any V4 backup can be deleted \- dependencies are merged into the next older backup
if it isn't already filled.
.IP "\(bu" 4
file digests are full-file \s-1MD5. \s0 Collisions are much more unlikely than V3,
but still possibles.  Duplicates are implemented with an extension to the
16 byte \s-1MD5\s0 digest (ie: 16 bytes for plain file, 17 bytes for next
256 duplicates etc).
.IP "\(bu" 4
V4 pool files are stored in a new hierarchy, two levels deep, with
7 bits at each level (ie: 128 directories at top-level, and each
with 128 directories at next level).
.IP "\(bu" 4
V4 pool files are never moved or renamed.
.IP "\(bu" 4
Inodes for hardlinked files are stored in each backup tree.  This makes
backing up hardlinks accurate, compared to V3, and provides for consistent
inode numbering across backups.
.IP "\(bu" 4
zero-sized files or empty attribute files don't get written or pooled.
.IP "\(bu" 4
the elimination of hardlinks means that reference counting has to be maintained by
all the BackupPC code.  This is one of the riskiest area in terms of development
and testing.  Reference counts are maintained per-host, and for the whole pool.
.Sp
Each operation that changes reference counts (eg: doing a new backup, deleting
a backup, or duplicating (filling) a backup) creates one or more poolRefDelta
files in the client's backup directory (ie: TopDir/pc/HOST).  These files are
lists of \s-1MD5\s0 digests, and corresponding counts deltas.
.Sp
Each night, BackupPC_nightly runs BackupPC_refCountUpdate, which, for each
host, updates the per-host reference count database with the new deltas.
It then combines all the per-host reference count files to create the
global pool reference count database.
.Sp
BackupPC_refCountUpdate can run concurrently with backups.  If you still
have V3 backups and pool, BackupPC_nightly still needs to run and check
for old V3 pool files that can be deleted.  But since there are no
new V3 backups happening, BackupPC_nightly can run concurrently with
backups.
.IP "\(bu" 4
There is a new utility BackupPC_fsck that can check/fix the per-host
and global reference counts.  The per-host reference count database
is verified by parsing all the attrib files in each backup tree.
The global reference count database is verified by combing all the
per-host reference count databases and comparing them.
.Sp
BackupPC_fsck cannot run when BackupPC is.
.IP "\(bu" 4
BackupPC_refCountUpdate removes pool files that have a reference count
of zero.  To avoid race conditions, it uses a two-phase process.  It
first flags files that have zero reference counts.  The next time
it runs (typically 24 hours later), any flagged files that still
have zero reference count are then removed.  The rest of the code
knows not to use flagged pool files to avoid race conditions.
.IP "\(bu" 4
Progress indication: a simple status that shows the number of files
processed so far.  It's hard to convert that to a percentage, since
the total isn't known until the end of the backup.  But knowing the
number of files is quite helpful, since you can get an idea of the
expected total based on the prior backups, or knowing what configuration
you have changed (ie: adding a large new tree).
.IP "\(bu" 4
BackupPC_link is removed since it is no longer used.
.IP "\(bu" 4
Since files are no longer stored in backup trees, browsing the backup
trees is even harder than V3 (where you just had to deal with mangling).
A new utility BackupPC_ls acts like \*(L"ls \-l\*(R", showing accurate
directory listings of files, together with the \s-1MD5\s0 digests.
.Sp
BackupPC_ls can be given either an explicit host name, number,
and unmangled path, or can be given the full (mangled) path,
which makes it easier to use directory completion.  It should
be possible to configure tcsh and bash, together with some new
hooks in BackupPC_ls, to give a more natural file/directory
completion.
.Sp
BackupPC_zcat also can take just the \s-1MD5\s0 digest (which you can paste
from BackupPC_ls).  Currently BackupPC_zcat doesn't support the tree
parsing that BackupPC_ls does (it can only zcat actual files),  but
that should be easy to rectify.
.IP "\(bu" 4
Configuration for expiry: since full/incr are decoupled from
filled/unfilled, expiry is a bit trickier.
.Sp
The convention for expiry parameters is \*(L"FullKeepPeriod/FullKeepCnt\*(R"
etc refer to *Filled* backups, and \*(L"IncrKeepPeriod/IncrKeepCnt\*(R" refer
to \*(L"Unfilled\*(R" backups.
.IP "\(bu" 4
V3 migration: nothing specific is needed.  V4 can browse/view/restore
V3 backups.  When you install V4, no changes are made to any V3 backups.
If you are upgrading from V3, be sure to set \f(CW$Conf\fR{PoolV3Enabled} to 1 so
the old V3 pool is searched for matching files.
.RS 4
.IP "\(bu" 4
When you install V4, it will notice that the V3 pool exists.  Running
configure.pl should set \f(CW$Conf\fR{PoolV3Enabled} to 1 in that case, but
you should be sure to check that.
.IP "\(bu" 4
When a V4 backups is first done, BackupPC_backupDuplicate is
run to duplicate that most recent V3 backup into a new V4 backup.
A \*(L"filled\*(R" view of the most recent V3 backup is used to create
a \*(L"filled\*(R" V4 backup tree.
.Sp
This step could be time consuming, since every file needs to be read
(as a V3 file) and written as a V4 file.  However, the V4 pooling
code knows about the V3 pool, so it will move the V3 pool file
into the V4 pool.  So this duplication process doesn't burn a lot of
pool storage space, but every file still needs to be read
(to compute the \s-1MD5\s0 digest) and \*(L"written\*(R" (really just
matching/linking).
.IP "\(bu" 4
Expiry: all the V3 + V4 backups are considered on a combined basis
for expiry checking.
.IP "\(bu" 4
On a clean new V4 install, the steps of computing and checking V3
digests is eliminated.
.IP "\(bu" 4
Downgrading V4\->V3: Not tested and not recommended.
In theory you can remove any new V4 backups, remove the V4 pool
itself, and you should be able to re-install V3 and still have
access to your original full working V3 store (except for any
V3 backups that V4 might have routinely removed based on normal
backup expiry configuration).
.Sp
However, any V3 pool files moved to V4 will no longer be in the V3
pool.  So subsequent V3 backups will burn more storage as files
get re-added to the old V3 pool.
.Sp
Hopefully downgrading isn't necessary...
.RE
.RS 4
.RE
.IP "\(bu" 4
Optimizations: the C code implementation should give a significant performance
advantage, as well as the more flexible.
.Sp
Potential V4 optimizations that are planned, but not yet implemented, include:
.RS 4
.IP "\(bu" 4
rsync-bpc doesn't support checksum caching.
.IP "\(bu" 4
rsync-bpc with \-\-ignore\-times actually reads each unchanged file three times,
and writes it once (normal rsync reads twice and writes once; the extra one
is due to compression).  Some careful optimization can eliminate two reads
and the write.  The final read can be eliminated with checksum caching.
.IP "\(bu" 4
BackupPC_refCountUpdate, BackupPC_fsck, BackupPC_backupDuplicate,
BackupPC_backupDelete are all single-threaded.
.RE
.RS 4
.RE
.IP "\(bu" 4
Some clever future work: the concepts of full/incr rsync can be completely
blurred.  For example, you can now do 100% incrementals.  Also, the
rsync whole-file \s-1MD5\s0 digest matches the V4 digest, so a full backup
could actually just check the whole-file \s-1MD5\s0 digest.  Alternatively,
a \*(L"hybrid\*(R" could be to make \-\-ignore\-times random per file, based
on a certain percentage.  Eg: \-\-ignore\-times is on for 10% of the
files.  So every backup we fully check 10% of the files randomly,
and the other 90% are just based on comparing the meta data.
.SS "Backup basics"
.IX Subsection "Backup basics"
.IP "Full Backup" 4
.IX Item "Full Backup"
A full backup is a complete backup of a share. BackupPC can be
configured to do a full backup at a regular interval (typically
weekly).  BackupPC can be configured to keep a certain number
of full backups.  Exponential expiry is also supported, allowing
full backups with various vintages to be kept (for example, a
settable number of most recent weekly fulls, plus a settable
number of older fulls that are 2, 4, 8, or 16 weeks apart).
.IP "Incremental Backup" 4
.IX Item "Incremental Backup"
An incremental backup is a backup of files that have changed
since the last successful backup.
.Sp
For \s-1SMB\s0 and tar, BackupPC uses the modification time (mtime) to
determine which files have changed since the last backup.  That
means \s-1SMB\s0 and tar incrementals are not able to detect deleted files,
renamed files or new files whose modification time is prior to the
last lower-level backup.
.Sp
Rsync is more clever: any files whose attributes have changed (ie: uid,
gid, mtime, modes, size) since the last full are backed up.  Deleted,
new files and renamed files are detected by Rsync incrementals.
.Sp
BackupPC can also be configured to keep a certain number of incremental
backups, and to keep a smaller number of very old incremental backups.
.Sp
BackupPC \*(L"fills-in\*(R" incremental backups when browsing or restoring,
based on the levels of each backup, giving every backup a \*(L"full\*(R"
appearance.  This makes browsing and restoring backups much easier:
you can restore from any one backup independent of whether it was
an incremental or full.
.IP "Partial Backup" 4
.IX Item "Partial Backup"
When a full or incremental backup fails or is canceled, the most
recent backup is labeled \*(L"partial\*(R".  Prior to V4, that backup was
incomplete, and would be deleted when the next backup completed.
.Sp
In V4 a partial backup still denotes that the last backup is incomplete.
However, since V4 does backup updating inplace, it represents the best
and latest backup.  A partial backup can be browsed or used to restore
files just like a successful full or incremental backup.
.IP "Identical Files" 4
.IX Item "Identical Files"
BackupPC pools identical files.  By \*(L"identical files\*(R" we mean files
with identical contents, not necessary the same permissions, ownership
or modification time.  Two files might have different permissions,
ownership, or modification time but will still be pooled whenever
the contents are identical.  This is possible since BackupPC stores
the file meta-data (permissions, ownership, and modification time)
separately from the file contents.
.Sp
Prior to V4, identical files were stored using hardlinks.  In V4+,
hardlinks are eliminated (except for temporary atomic renames), and
reference counting is done at the application level.
.IP "Backup Policy" 4
.IX Item "Backup Policy"
Based on your site's requirements you need to decide what your backup
policy is.  BackupPC is not designed to provide exact re-imaging of
failed disks.  See Limitations for more information.
However, with rsync and tar transports for linux/unix clients, plus
full support for special file types, extended attributes etc,
likely means an exact image of a linux/unix file system can be made.
.Sp
BackupPC saves backups onto disk. Because of pooling you can relatively
economically keep several weeks of old backups.
.Sp
At some sites the disk-based backup will be adequate, without a
secondary offsite cloud, disk or tape backup. This system is robust
to any single failure: if a client disk fails or loses files, the
BackupPC server can be used to restore files. If the server disk
fails, BackupPC can be restarted on a fresh file system, and create
new backups from the clients. The chance of the server disk failing
can be made very small by spending more money on increasingly better
\&\s-1RAID\s0 systems.  However, there is still the risk of catastrophic
events like fires or earthquakes that can destroy both the BackupPC
server and the clients it is backing up if they are physically
nearby.
.Sp
Some sites might choose to do periodic backups to tape or cd/dvd.
This backup can be done perhaps weekly using the archive function of
BackupPC.
.Sp
Other users have reported success with removable disks to rotate the
BackupPC data drives, or using rsync to mirror the BackupPC data pool
offsite.
.Sp
In V4, since hardlinks are not used permanently, duplicating a V4 pool
is much easier, allowing remote copying of the pool.
.SS "Resources"
.IX Subsection "Resources"
.IP "BackupPC home page" 4
.IX Item "BackupPC home page"
The BackupPC Open Source project is hosted on SourceForge.  The
home page can be found at:
.Sp
.Vb 1
\&    http://backuppc.sourceforge.net
.Ve
.Sp
This page has links to the current documentation, the SourceForge
project page and general information.
.IP "SourceForge project" 4
.IX Item "SourceForge project"
The SourceForge project page is at:
.Sp
.Vb 1
\&    http://sourceforge.net/projects/backuppc
.Ve
.Sp
This page has links to the current releases of BackupPC.
.IP "BackupPC Wiki" 4
.IX Item "BackupPC Wiki"
BackupPC has a Wiki at <http://backuppc.wiki.sourceforge.net>.
Everyone is encouraged to contribute to the Wiki.  Anyone with
a SourceForge account can edit the Wiki.
.Sp
The old \s-1FAQ\s0 is at <http://backuppc.sourceforge.net/faq>, but
is deprecated in favor of the Wiki.
.Sp
As of 2013, the Wiki is quite disorganized, and SourceForge has moved
away from MediaWiki.  Volunteers to clean it up would be much appreciated!
.IP "Mailing lists" 4
.IX Item "Mailing lists"
Three BackupPC mailing lists exist for announcements (backuppc-announce),
developers (backuppc-devel), and a general user list for support, asking
questions or any other topic relevant to BackupPC (backuppc-users).
.Sp
The lists are archived on SourceForge and Gmane.  The SourceForge lists
are not always up to date and the searching is limited, so Gmane is
a good alternative.  See:
.Sp
.Vb 2
\&    http://news.gmane.org/index.php?prefix=gmane.comp.sysutils.backup.backuppc
\&    http://sourceforge.net/mailarchive/forum.php?forum=backuppc\-users
.Ve
.Sp
You can subscribe to these lists by visiting:
.Sp
.Vb 3
\&    http://lists.sourceforge.net/lists/listinfo/backuppc\-announce
\&    http://lists.sourceforge.net/lists/listinfo/backuppc\-users
\&    http://lists.sourceforge.net/lists/listinfo/backuppc\-devel
.Ve
.Sp
The backuppc-announce list is moderated and is used only for
important announcements (eg: new versions).  It is low traffic.
You only need to subscribe to one of backuppc-announce and
backuppc-users: backuppc-users also receives any messages on
backuppc-announce.
.Sp
The backuppc-devel list is only for developers who are working on BackupPC.
Do not post questions or support requests there.  But detailed technical
discussions should happen on this list.
.Sp
To post a message to the backuppc-users list, send an email to
.Sp
.Vb 1
\&    backuppc\-users@lists.sourceforge.net
.Ve
.Sp
Do not send subscription requests to this address!
.IP "Other Programs of Interest" 4
.IX Item "Other Programs of Interest"
If you want to mirror linux or unix files or directories to a remote server
you should use rsync, <http://rsync.samba.org>.  BackupPC uses
rsync as a transport mechanism; if you are already an rsync user you
can think of BackupPC as adding efficient storage (compression and
pooling) and a convenient user interface to rsync.
.Sp
Two popular open source packages that do tape backup are
Amanda (<http://www.amanda.org>)
and Bacula (<http://www.bacula.org>).
These packages can be used as complete solutions, or also as back
ends to BackupPC to backup the BackupPC server data to tape.
.Sp
Various programs and scripts use rsync to provide hardlinked backups.
See, for example, Mike Rubel's site (<http://www.mikerubel.org/computers/rsync_snapshots>),
\&\s-1JW\s0 Schultz's dirvish (<http://www.dirvish.org/>),
Ben Escoto's rdiff-backup (<http://www.nongnu.org/rdiff\-backup>),
and John Bowman's rlbackup (<http://www.math.ualberta.ca/imaging/rlbackup>).
.Sp
Unison is a utility that can do two-way, interactive, synchronization.
See <http://freshmeat.net/projects/unison>.  An external wrapper around
rsync that maintains transfer data to enable two-way synchronization is
drsync; see <http://freshmeat.net/projects/drsync>.
.Sp
BackupPC provides many additional features, such as compressed storage,
deduplicating any matching files (rather than just files with the same name),
and storing special files without root privileges.  But these other programs
provide simple, effective and fast solutions and are definitely worthy of
consideration.
.SS "Road map"
.IX Subsection "Road map"
The new features planned for future releases of BackupPC
are on the Wiki at <http://backuppc.wiki.sourceforge.net>.
.PP
Comments and suggestions are welcome.
.SS "You can help"
.IX Subsection "You can help"
BackupPC is free. I work on BackupPC because I enjoy doing it and I like
to contribute to the open source community.
.PP
BackupPC already has more than enough features for my own needs.  The
main compensation for continuing to work on BackupPC is knowing that
more and more people find it useful.  So feedback is certainly
appreciated, both positive and negative.
.PP
Beyond being a satisfied user and telling other people about it, everyone
is encouraged to add links to <http://backuppc.sourceforge.net>
(I'll see them via Google) or otherwise publicize BackupPC.  Unlike
the commercial products in this space, I have a zero budget (in both
time and money) for marketing, \s-1PR\s0 and advertising, so it's up to
all of you!  Feel free to vote for BackupPC at
<http://freshmeat.net/projects/backuppc>.
.PP
Also, everyone is encouraged to contribute patches, bug reports,
feature and design suggestions, new code, Wiki additions (you can
do those directly) and documentation corrections or improvements.
Answering questions on the mailing list is a big help too.
.SH "Installing BackupPC"
.IX Header "Installing BackupPC"
.SS "Requirements"
.IX Subsection "Requirements"
BackupPC requires:
.IP "\(bu" 4
A linux, solaris, or unix based server with a substantial amount of free
disk space (see the next section for what that means). The \s-1CPU\s0 and disk
performance on this server will determine how many simultaneous backups
you can run. You should be able to run 4\-8 simultaneous backups on a
moderately configured server.
.Sp
Several users have reported significantly better performance using
reiserfs compared to ext3 for the BackupPC data file system.  It is
also recommended you consider either an \s-1LVM\s0 or \s-1RAID\s0 setup (either
in \s-1HW\s0 or \s-1SW\s0; eg: 3Ware \s-1RAID10\s0 or \s-1RAID5\s0) so that you can expand the
file system as necessary.
.Sp
When BackupPC starts with an empty pool, all the backup data will be
written to the pool on disk. After more backups are done, a higher
percentage of incoming files will already be in the pool. BackupPC is
able to avoid writing to disk new files that are already in the pool.
So over time disk writes will reduce significantly (by perhaps a factor
of 20 or more), since eventually 95% or more of incoming backup files
are typically in the pool. Disk reads from the pool are still needed to
do file compares to verify files are an exact match. So, with a mature
pool, if a relatively fast client generates data at say 1MB/sec, and you
run 4 simultaneous backups, there will be an average server disk load of
about 4MB/sec reads and 0.2MB/sec writes (assuming 95% of the incoming
files are in the pool). These rates will be perhaps 40% lower if
compression is on.  (Note: these numbers are circa 2002.  With V4 and
modern hardware you should get much faster transfer rates.)
.IP "\(bu" 4
Perl version 5.8.0 or later.  If you don't have perl, please
see <http://www.cpan.org>.
.IP "\(bu" 4
The perl modules BackupPC::XS and File::Listing are required, and several others, 
Archive::Zip, \s-1XML::RSS,\s0 Net::FTP, Net::FTP::RetrHandle,
Net::FTP::AutoReconnect are recommended.
.Sp
Try \*(L"perldoc BackupPC::XS\*(R" and \*(L"perldoc Archive::Zip\*(R" to see if you have these
modules.  If not, fetch them from <http://www.cpan.org> and see the
instructions below for how to build and install them.
.IP "\(bu" 4
If you are using smb to backup WinXX machines you need smbclient and
nmblookup from the samba package.  You will also need nmblookup if
you are backing up linux/unix \s-1DHCP\s0 machines.  See <http://www.samba.org>.
Samba versions 3.x are stable and now recommended instead of 2.x.
.Sp
See <http://www.samba.org> for source and binaries.  It's pretty easy to
fetch and compile samba, and just grab smbclient and nmblookup, without
doing the installation. Alternatively, <http://www.samba.org> has binary
distributions for most platforms.
.IP "\(bu" 4
If you are using tar to backup linux/unix machines, those machines should have
version 1.13.7 at a minimum, with version 1.13.20 or higher recommended.  Use
\&\*(L"tar \-\-version\*(R" to check your version.  Various \s-1GNU\s0 mirrors have the newest
versions of tar; see <http://www.gnu.org/software/tar/>.
.IP "\(bu" 4
If you are using rsync to backup linux/unix machines you should have
rsync on each client machine.  Version 3+ is strongly recommended, but
earlier versions will work too. See <http://rsync.samba.org>.
Use \*(L"rsync \-\-version\*(R" to check your version.
.Sp
For BackupPC to use Rsync you will also need to install rsync_bpc on 
the server.
.IP "\(bu" 4
The Apache web server, see <http://www.apache.org>, preferably built
with mod_perl support.
.IP "\(bu" 4
If rrdtool is installed on the BackupPC server, graphs of the pool usage
will be mainted and displayed.  To enable the graphs, point \f(CW$Conf\fR{RrdToolPath}
to the rrdtool executable.
.SS "What type of storage space do I need?"
.IX Subsection "What type of storage space do I need?"
BackupPC uses hardlinks to pool files common to different backups.
Therefore BackupPC's data store (_\|_TOPDIR_\|_) must point to a single
file system that supports hardlinks.  You cannot split this file
system with multiple mount points or using symbolic links to point a
sub-directory to a different file system (it is ok to use a single
symbolic link at the top-level directory (_\|_TOPDIR_\|_) to point the
entire data store somewhere else).  You can of course use any kind of
\&\s-1RAID\s0 system or logical volume manager that combines the capacity of
multiple disks into a single, larger, file system. Such approaches
have the advantage that the file system can be expanded without having
to copy it.
.PP
Any standard linux or unix file system supports hardlinks.  \s-1NFS\s0 mounted
file systems work too (provided the underlying file system supports
hardlinks).  But windows based \s-1FAT\s0 and \s-1NTFS\s0 file systems will not work.
.PP
Starting with BackupPC 3.1.0, run-time checks are done at startup and
at the start of each backup to ensure that the file system can support
hardlinks, since this is a common area of configuration problems.
.SS "How much disk space do I need?"
.IX Subsection "How much disk space do I need?"
Here's one real example (circa 2002) for an environment that is
backing up 65 laptops with compression off. Each full backup averages
3.2GB. Each incremental backup averages about 0.2GB. Storing one
full backup and two incremental backups per laptop is around 240GB
of raw data. But because of the pooling of identical files, only
87GB is used.  This is without compression.
.PP
Another example, with compression on: backing up 95 laptops, where
each backup averages 3.6GB and each incremental averages about 0.3GB.
Keeping three weekly full backups, and six incrementals is around
1200GB of raw data.  Because of pooling and compression, only 150GB
is needed.
.PP
Here's a rule of thumb. Add up the disk usage of all the machines you
want to backup (210GB in the first example above). This is a rough
minimum space estimate that should allow a couple of full backups and at
least half a dozen incremental backups per machine. If compression is on
you can reduce the storage requirements by maybe 30\-40%.  Add some margin
in case you add more machines or decide to keep more old backups.
.PP
Your actual mileage will depend upon the types of clients, operating
systems and applications you have. The more uniform the clients and
applications the bigger the benefit from pooling common files.
.PP
For example, the Eudora email tool stores each mail folder in a separate
file, and attachments are extracted as separate files. So in the sadly
common case of a large attachment emailed to many recipients, Eudora
will extract the attachment into a new file. When these machines are
backed up, only one copy of the file will be stored on the server, even
though the file appears in many different full or incremental backups. In
this sense Eudora is a \*(L"friendly\*(R" application from the point of view of
backup storage requirements.
.PP
An example at the other end of the spectrum is Outlook. Everything
(email bodies, attachments, calendar, contact lists) is stored in a
single file, which often becomes huge. Any change to this file requires
a separate copy of the file to be saved during backup. Outlook is even
more troublesome, since it keeps this file locked all the time, so it
cannot be read by smbclient whenever Outlook is running.  See the
Limitations section for more discussion of this problem.
.PP
In addition to total disk space, you should make sure you have
plenty of inodes on your BackupPC data partition. Some users have
reported running out of inodes on their BackupPC data partition.
So even if you have plenty of disk space, BackupPC will report
failures when the inodes are exhausted.  This is a particular
problem with ext2/ext3 file systems that have a fixed number of
inodes when the file system is built.  Use \*(L"df \-i\*(R" to see your
inode usage.
.SS "Step 1: Getting BackupPC"
.IX Subsection "Step 1: Getting BackupPC"
Some linux distributions now include BackupPC.  The Debian
distribution, supported by Ludovic Drolez, can be found at
<http://packages.debian.org/backuppc> and is included
in the current stable Debian release.  On Debian, BackupPC can
be installed with the command:
.PP
.Vb 1
\&    apt\-get install backuppc
.Ve
.PP
In the future there might be packages for Gentoo and other
linux flavors.  If the packaged version is older than the
released version then you may want to install the
latest version as described below.
.PP
Otherwise, manually fetching and installing BackupPC is easy.
Start by downloading the latest version from
<http://backuppc.sourceforge.net>.  Hit the \*(L"Code\*(R" button,
then select the \*(L"backuppc\*(R" or \*(L"backuppc-beta\*(R" package and
download the latest version.
.SS "Step 2: Installing the distribution"
.IX Subsection "Step 2: Installing the distribution"
Note: most information in this step is only relevant if you build
and install BackupPC yourself.  If you use a package provided by a
distribution, the package management system should take of installing
any needed dependencies.
.PP
First off, there are several perl modules you should install.  The
first one, BackupPC::XS, is required.  The others are optional
but highly recommended:
.IP "BackupPC::XS" 4
.IX Item "BackupPC::XS"
Significant portions of BackupPC are implemented in C code contained
in this module.  You can run \*(L"perldoc BackupPC::XS\*(R" to see if this module
is installed.
BackupPC::XS is available from <http://backuppc.sourceforge.net> and \s-1CPAN.\s0
.IP "Archive::Zip" 4
.IX Item "Archive::Zip"
To support restore via Zip archives you will need to install
Archive::Zip, also from <http://www.cpan.org>.
You can run \*(L"perldoc Archive::Zip\*(R" to see if this module is installed.
.IP "\s-1XML::RSS\s0" 4
.IX Item "XML::RSS"
To support the \s-1RSS\s0 feature you will need to install \s-1XML::RSS,\s0 also from
<http://www.cpan.org>.  There is not need to install this module if you
don't plan on using \s-1RSS.\s0 You can run \*(L"perldoc \s-1XML::RSS\*(R"\s0 to see if this
module is installed.
.IP "File::Listing, Net::FTP, Net::FTP::RetrHandle, Net::FTP::AutoReconnect" 4
.IX Item "File::Listing, Net::FTP, Net::FTP::RetrHandle, Net::FTP::AutoReconnect"
To use ftp with BackupPC you will need four libraries, but actually
need to install only File::Listing from <http://www.cpan.org>.
You can run \*(L"perldoc File::Listing\*(R" to see if this module is installed.
Net::FTP is a standard module. Net::FTP::RetrHandle and
Net::FTP::AutoReconnect included in BackupPC distribution.
.PP
To build and install these packages you should use the cpan program.
Alternatively, you can fetch the tar.gz file from <http://www.cpan.org>
and then run these commands:
.PP
.Vb 6
\&    tar zxvf Archive\-Zip\-1.26.tar.gz
\&    cd Archive\-Zip\-1.26
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.PP
The same sequence of commands can be used for each module.
.PP
Now let's move onto BackupPC itself.  After fetching
BackupPC\-4.0.0alpha3.tar.gz, run these commands as root:
.PP
.Vb 3
\&    tar zxf BackupPC\-4.0.0alpha3.tar.gz
\&    cd BackupPC\-4.0.0alpha3
\&    perl configure.pl
.Ve
.PP
In the future this release might also have patches available on the
SourceForge site.  These patch files are text files, with a name of
the form
.PP
.Vb 1
\&    BackupPC\-4.0.0alpha3plN.diff
.Ve
.PP
where N is the patch level, eg: pl2 is patch-level 2.  These
patch files are cumulative: you only need apply the last patch
file, not all the earlier patch files.  If a patch file is
available, eg: BackupPC\-4.0.0alpha3pl2.diff, you should apply
the patch after extracting the tar file:
.PP
.Vb 6
\&     # fetch BackupPC\-4.0.0alpha3.tar.gz
\&     # fetch BackupPC\-4.0.0alpha3pl2.diff
\&     tar zxf BackupPC\-4.0.0alpha3.tar.gz
\&     cd BackupPC\-4.0.0alpha3
\&     patch \-p0 < ../BackupPC\-4.0.0alpha3pl2.diff
\&     perl configure.pl
.Ve
.PP
A patch file includes comments that describe that bug fixes
and changes.  Feel free to review it before you apply the patch.
.PP
The configure.pl script also accepts command-line options if you
wish to run it in a non-interactive manner.  It has self-contained
documentation for all the command-line options, which you can
read with perldoc:
.PP
.Vb 1
\&    perldoc configure.pl
.Ve
.PP
Starting with BackupPC 3.0.0, the configure.pl script by default
complies with the file system hierarchy (\s-1FHS\s0) conventions.  The
major difference compared to earlier versions is that by default
configuration files will be stored in /etc/BackupPC
rather than below the data directory, _\|_TOPDIR_\|_/conf,
and the log files will be stored in /var/log/BackupPC
rather than below the data directory, _\|_TOPDIR_\|_/log.
.PP
Note that distributions may choose to use different locations for
BackupPC files than these defaults.
.PP
If you are upgrading from an earlier version the configure.pl script
will keep the configuration files and log files in their original
location.
.PP
When you run configure.pl you will be prompted for the full paths
of various executables, and you will be prompted for the following
information.
.IP "BackupPC User" 4
.IX Item "BackupPC User"
It is best if BackupPC runs as a special user, eg backuppc, that has
limited privileges. It is preferred that backuppc belongs to a system
administrator group so that sys admin members can browse BackupPC files,
edit the configuration files and so on. Although configurable, the
default settings leave group read permission on pool files, so make
sure the BackupPC user's group is chosen restrictively.
.Sp
On this installation, this is _\|_BACKUPPCUSER_\|_.
.Sp
For security purposes you might choose to configure the BackupPC
user with the shell set to /bin/false.  Since you might need to
run some BackupPC programs as the BackupPC user for testing
purposes, you can use the \-s option to su to explicitly run
a shell, eg:
.Sp
.Vb 1
\&    su \-s /bin/bash _\|_BACKUPPCUSER_\|_
.Ve
.Sp
Depending upon your configuration you might also need the \-l option.
.IP "Data Directory" 4
.IX Item "Data Directory"
You need to decide where to put the data directory, below which
all the BackupPC data is stored.  This needs to be a big file system.
.Sp
On this installation, this is _\|_TOPDIR_\|_.
.IP "Install Directory" 4
.IX Item "Install Directory"
You should decide where the BackupPC scripts, libraries and documentation
should be installed, eg: /usr/local/BackupPC.
.Sp
On this installation, this is _\|_INSTALLDIR_\|_.
.IP "\s-1CGI\s0 bin Directory" 4
.IX Item "CGI bin Directory"
You should decide where the BackupPC \s-1CGI\s0 script resides.  This will
usually be below Apache's cgi-bin directory.
.Sp
It is also possible to use a different directory and use Apache's
``<Directory>'' directive to specifiy that location.  See the Apache
\&\s-1HTTP\s0 Server documentation for additional information.
.Sp
On this installation, this is _\|_CGIDIR_\|_.
.IP "Apache image Directory" 4
.IX Item "Apache image Directory"
A directory where BackupPC's images are stored so that Apache can
serve them.  You should ensure this directory is readable by Apache and
create a symlink to this directory from the BackupPC \s-1CGI\s0 bin Directory.
.IP "Config and Log Directories" 4
.IX Item "Config and Log Directories"
In this installation the configuration and log directories are
located in the following locations:
.Sp
.Vb 4
\&    _\|_CONFDIR_\|_/config.pl    main config file
\&    _\|_CONFDIR_\|_/hosts        hosts file
\&    _\|_CONFDIR_\|_/pc/HOST.pl   per\-pc config file
\&    _\|_LOGDIR_\|_/BackupPC      log files, pid, status
.Ve
.Sp
The configure.pl script doesn't prompt for these locations but
they can be set for new installations using command-line options.
.SS "Step 3: Setting up config.pl"
.IX Subsection "Step 3: Setting up config.pl"
After running configure.pl, browse through the config file,
_\|_CONFDIR_\|_/config.pl, and make sure all the default settings are
correct. In particular, you will need to decide whether to use
smb, tar,or rsync or ftp transport (or whether to set it on a
per-PC basis) and set the relevant parameters for that transport
method. See the section \*(L"Step 5: Client Setup\*(R" for
more details.
.SS "Step 4: Setting up the hosts file"
.IX Subsection "Step 4: Setting up the hosts file"
The file _\|_CONFDIR_\|_/hosts contains the list of clients to backup.
BackupPC reads this file in three cases:
.IP "\(bu" 4
Upon startup.
.IP "\(bu" 4
When BackupPC is sent a \s-1HUP \s0(\-1) signal.  Assuming you installed the
init.d script, you can also do this with \*(L"/etc/init.d/backuppc reload\*(R".
.IP "\(bu" 4
When the modification time of the hosts file changes.  BackupPC
checks the modification time once during each regular wakeup.
.PP
Whenever you change the hosts file (to add or remove a host) you can
either do a kill \-HUP BackupPC_pid or simply wait until the next regular
wakeup period.
.PP
Each line in the hosts file contains three fields, separated
by white space:
.IP "Host name" 4
.IX Item "Host name"
This is typically the host name or NetBios name of the client machine
and should be in lower case.  The host name can contain spaces (escape
with a backslash), but it is not recommended.
.Sp
Please read the section \*(L"How BackupPC Finds Hosts\*(R".
.Sp
In certain cases you might want several distinct clients to refer
to the same physical machine.  For example, you might have a database
you want to backup, and you want to bracket the backup of the database
with shutdown/restart using \f(CW$Conf\fR{DumpPreUserCmd} and \f(CW$Conf\fR{DumpPostUserCmd}.
But you also want to backup the rest of the machine while the database
is still running.  In the case you can specify two different clients in
the host file, using any mnemonic name (eg: myhost_mysql and myhost), and
use \f(CW$Conf\fR{ClientNameAlias} in myhost_mysql's config.pl to specify the
real host name of the machine.
.IP "\s-1DHCP\s0 flag" 4
.IX Item "DHCP flag"
Starting with v2.0.0 the way hosts are discovered has changed and now
in most cases you should specify 0 for the \s-1DHCP\s0 flag, even if the host
has a dynamically assigned \s-1IP\s0 address.
Please read the section \*(L"How BackupPC Finds Hosts\*(R"
to understand whether you need to set the \s-1DHCP\s0 flag.
.Sp
You only need to set \s-1DHCP\s0 to 1 if your client machine doesn't
respond to the NetBios multicast request:
.Sp
.Vb 1
\&    nmblookup myHost
.Ve
.Sp
but does respond to a request directed to its \s-1IP\s0 address:
.Sp
.Vb 1
\&    nmblookup \-A W.X.Y.Z
.Ve
.Sp
If you do set \s-1DHCP\s0 to 1 on any client you will need to specify the range of
\&\s-1DHCP\s0 addresses to search is specified in \f(CW$Conf\fR{DHCPAddressRanges}.
.Sp
Note also that the \f(CW$Conf\fR{ClientNameAlias} feature does not work for
clients with \s-1DHCP\s0 set to 1.
.IP "User name" 4
.IX Item "User name"
This should be the unix login/email name of the user who \*(L"owns\*(R" or uses
this machine. This is the user who will be sent email about this
machine, and this user will have permission to stop/start/browse/restore
backups for this host.  Leave this blank if no specific person should
receive email or be allowed to stop/start/browse/restore backups
for this host.  Administrators will still have full permissions.
.IP "More users" 4
.IX Item "More users"
Additional user names, separate by commas and with no white space,
can be specified.  These users will also have full permission in
the \s-1CGI\s0 interface to stop/start/browse/restore backups for this host.
These users will not be sent email about this host.
.PP
The first non-comment line of the hosts file is special: it contains
the names of the columns and should not be edited.
.PP
Here's a simple example of a hosts file:
.PP
.Vb 3
\&    host        dhcp    user      moreUsers
\&    farside     0       craig     jim,dave
\&    larson      1       gary      andy
.Ve
.SS "Step 5: Client Setup"
.IX Subsection "Step 5: Client Setup"
Four methods for getting backup data from a client are supported:
smb, tar, rsync and ftp.  Smb or rsync are the preferred methods
for WinXX clients and rsync or tar are the preferred methods for
linux/unix/MacOSX clients.
.PP
The transfer method is set using the \f(CW$Conf\fR{XferMethod} configuration
setting. If you have a mixed environment (ie: you will use smb for some
clients and tar for others), you will need to pick the most common
choice for \f(CW$Conf\fR{XferMethod} for the main config.pl file, and then
override it in the per-PC config file for those hosts that will use
the other method.  (Or you could run two completely separate instances
of BackupPC, with different data directories, one for WinXX and the
other for linux/unix, but then common files between the different
machine types will duplicated.)
.PP
Here are some brief client setup notes:
.IP "WinXX" 4
.IX Item "WinXX"
One setup for WinXX clients is to set \f(CW$Conf\fR{XferMethod} to \*(L"smb\*(R".
Actually, rsyncd is the better method for WinXX if you are prepared to
run rsync/cygwin on your WinXX client.
.Sp
If you want to use rsyncd for WinXX clients you can find a pre-packaged
zip file on <http://backuppc.sourceforge.net>. The package is called
cygwin-rsync. It contains rsync.exe, template setup files and the
minimal set of cygwin libraries for everything to run.  The \s-1README\s0 file
contains instructions for running rsync as a service, so it starts
automatically everytime you boot your machine.  If you use rsync
to backup WinXX machines, be sure to set \f(CW$Conf\fR{ClientCharset}
correctly (eg: 'cp1252') so that the WinXX file name encoding is
correctly converted to utf8.
.Sp
Otherwise, to use \s-1SMB,\s0 you can either create shares for the data you want
to backup or your can use the existing C$ share.  To create a new 
share, open \*(L"My Computer\*(R", right click on the drive (eg: C), and
select \*(L"Sharing...\*(R" (or select \*(L"Properties\*(R" and select the \*(L"Sharing\*(R"
tab). In this dialog box you can enable sharing, select the share name
and permissions.
.Sp
All Windows \s-1NT\s0 based \s-1OS \s0(\s-1NT, 2000, XP\s0 Pro), are configured by default 
to share the entire C drive as C$.  This is a special share used for 
various administration functions, one of which is to grant access to backup 
operators. All you need to do is create a new domain user, specifically 
for backup. Then add the new backup user to the built in \*(L"Backup 
Operators\*(R" group. You now have backup capability for any directory on 
any computer in the domain in one easy step. This avoids using 
administrator accounts and only grants permission to do exactly what you 
want for the given user, i.e.: backup.
Also, for additional security, you may wish to deny the ability for this 
user to logon to computers in the default domain policy.
.Sp
If this machine uses \s-1DHCP\s0 you will also need to make sure the
NetBios name is set.  Go to Control Panel|System|Network Identification
(on Win2K) or Control Panel|System|Computer Name (on WinXP).
Also, you should go to Control Panel|Network Connections|Local Area
Connection|Properties|Internet Protocol (\s-1TCP/IP\s0)|Properties|Advanced|WINS
and verify that NetBios is not disabled.
.Sp
The relevant configuration settings are \f(CW$Conf\fR{SmbShareName},
\&\f(CW$Conf\fR{SmbShareUserName}, \f(CW$Conf\fR{SmbSharePasswd}, \f(CW$Conf\fR{SmbClientPath},
\&\f(CW$Conf\fR{SmbClientFullCmd}, \f(CW$Conf\fR{SmbClientIncrCmd} and
\&\f(CW$Conf\fR{SmbClientRestoreCmd}.
.Sp
BackupPC needs to know the smb share user name and password for a
client machine that uses smb.  The user name is specified in
\&\f(CW$Conf\fR{SmbShareUserName}. There are four ways to tell BackupPC the
smb share password:
.RS 4
.IP "\(bu" 4
As an environment variable \s-1BPC_SMB_PASSWD\s0 set before BackupPC starts.
If you start BackupPC manually the \s-1BPC_SMB_PASSWD\s0 variable must be set
manually first.  For backward compatibility for v1.5.0 and prior, the
environment variable \s-1PASSWD\s0 can be used if \s-1BPC_SMB_PASSWD\s0 is not set.
Warning: on some systems it is possible to see environment variables of
running processes.
.IP "\(bu" 4
Alternatively the \s-1BPC_SMB_PASSWD\s0 setting can be included in
/etc/init.d/backuppc, in which case you must make sure this file
is not world (other) readable.
.IP "\(bu" 4
As a configuration variable \f(CW$Conf\fR{SmbSharePasswd} in
_\|_CONFDIR_\|_/config.pl.  If you put the password
here you must make sure this file is not world (other) readable.
.IP "\(bu" 4
As a configuration variable \f(CW$Conf\fR{SmbSharePasswd} in the per-PC
configuration file (_\|_CONFDIR_\|_/pc/$host.pl or
_\|_TOPDIR_\|_/pc/$host/config.pl in non-FHS versions of BackupPC).
You will have to use this option if the smb share password is different
for each host. If you put the password here you must make sure this file
is not world (other) readable.
.RE
.RS 4
.Sp
Placement and protection of the smb share password is a possible
security risk, so please double-check the file and directory
permissions.  In a future version there might be support for
encryption of this password, but a private key will still have to
be stored in a protected place.  Suggestions are welcome.
.Sp
As an alternative to setting \f(CW$Conf\fR{XferMethod} to \*(L"smb\*(R" (using
smbclient) for WinXX clients, you can use an smb network filesystem (eg:
ksmbfs or similar) on your linux/unix server to mount the share,
and then set \f(CW$Conf\fR{XferMethod} to \*(L"tar\*(R" (use tar on the network
mounted file system).
.Sp
Also, to make sure that file names with special characters are correctly
transferred by smbclient you should make sure that the smb.conf file
has (for samba 3.x):
.Sp
.Vb 2
\&    [global]
\&        unix charset = UTF8
.Ve
.Sp
\&\s-1UTF8\s0 is the default setting, so if the parameter is missing then it
is ok.  With this setting \f(CW$Conf\fR{ClientCharset} should be emtpy,
since smbclient has already converted the file names to utf8.
.RE
.IP "Linux/Unix" 4
.IX Item "Linux/Unix"
The preferred setup for linux/unix clients is to set \f(CW$Conf\fR{XferMethod}
to \*(L"rsync\*(R", \*(L"rsyncd\*(R" or \*(L"tar\*(R".
.Sp
You can use either rsync, smb, or tar for linux/unix machines. Smb requires
that the Samba server (smbd) be run to provide the shares. Since the smb
protocol can't represent special files like symbolic links and fifos,
tar and rsync are the better transport methods for linux/unix machines.
(In fact, by default samba makes symbolic links look like the file or
directory that they point to, so you could get an infinite loop if a
symbolic link points to the current or parent directory. If you really
need to use Samba shares for linux/unix backups you should turn off the
\&\*(L"follow symlinks\*(R" samba config setting. See the smb.conf manual page.)
.Sp
The requirements for each Xfer Method are:
.RS 4
.IP "tar" 4
.IX Item "tar"
You must have \s-1GNU\s0 tar on the client machine.  Use \*(L"tar \-\-version\*(R"
or \*(L"gtar \-\-version\*(R" to verify.  The version should be at least
1.13.7, and 1.13.20 or greater is recommended.  Tar is run on
the client machine via rsh or ssh.
.Sp
The relevant configuration settings are \f(CW$Conf\fR{TarClientPath},
\&\f(CW$Conf\fR{TarShareName}, \f(CW$Conf\fR{TarClientCmd}, \f(CW$Conf\fR{TarFullArgs},
\&\f(CW$Conf\fR{TarIncrArgs}, and \f(CW$Conf\fR{TarClientRestoreCmd}.
.IP "rsync" 4
.IX Item "rsync"
To use rsync, you need rsync_bpc installed on the BackupPC server.
.Sp
On the client, you should have at least rsync 2.6.3, and the latest
version 3+ is strongly recommended.  Rsync is run on the remote client
via ssh.
.Sp
The relevant configuration settings are \f(CW$Conf\fR{RsyncClientPath},
\&\f(CW$Conf\fR{RsyncSshArgs}, \f(CW$Conf\fR{RsyncShareName}, \f(CW$Conf\fR{RsyncArgs},
\&\f(CW$Conf\fR{RsyncArgsExtra}, \f(CW$Conf\fR{RsyncFullArgsExtra}, and \f(CW$Conf\fR{RsyncRestoreArgs}.
.IP "rsyncd" 4
.IX Item "rsyncd"
To use rsync, you need rsync_bpc installed on the BackupPC server.
.Sp
On the client, you should have at least rsync 2.6.3, and the latest version
is recommended.  In this case the rsync daemon should be running on
the client machine and BackupPC connects directly to it.
.Sp
The relevant configuration settings are \f(CW$Conf\fR{RsyncBackupPCPath},
\&\f(CW$Conf\fR{RsyncdClientPort}, \f(CW$Conf\fR{RsyncdUserName}, \f(CW$Conf\fR{RsyncdPasswd},
\&\f(CW$Conf\fR{RsyncShareName}, \f(CW$Conf\fR{RsyncArgs}, \f(CW$Conf\fR{RsyncArgsExtra}, and
\&\f(CW$Conf\fR{RsyncRestoreArgs}. \f(CW$Conf\fR{RsyncShareName} is the name of an rsync
module (ie: the thing in square brackets in rsyncd's conf file \*(-- see
rsyncd.conf), not a file system path.
.Sp
Be aware that rsyncd will remove the leading '/' from path names in
symbolic links if you specify \*(L"use chroot = no\*(R" in the rsynd.conf file.
See the rsyncd.conf manual page for more information.
.IP "ftp" 4
.IX Item "ftp"
\&\s-1FTP\s0 Xfer Method is not yet supported in V4.
.Sp
You need to be running an ftp server on the client machine.
The relevant configuration settings are \f(CW$Conf\fR{FtpShareName},
\&\f(CW$Conf\fR{FtpUserName}, \f(CW$Conf\fR{FtpPasswd}, \f(CW$Conf\fR{FtpBlockSize},
\&\f(CW$Conf\fR{FtpPort}, \f(CW$Conf\fR{FtpTimeout}, and \f(CW$Conf\fR{FtpFollowSymlinks}.
.RE
.RS 4
.Sp
You need to set \f(CW$Conf\fR{ClientCharset} to the client's charset so that
file names are correctly converted to utf8.  Use \*(L"locale charmap\*(R"
on the client to see its charset.  Note, however, that modern versions
of smbclient and rsync handle this conversion automatically, so in
most cases you won't need to set \f(CW$Conf\fR{ClientCharset}.
.Sp
For linux/unix machines you should not backup \*(L"/proc\*(R".  This directory
contains a variety of files that look like regular files but they are
special files that don't need to be backed up (eg: /proc/kcore is a
regular file that contains physical memory).  See \f(CW$Conf\fR{BackupFilesExclude}.
It is safe to back up /dev since it contains mostly character-special
and block-special files, which are correctly handed by BackupPC
(eg: backing up /dev/hda5 just saves the block-special file information,
not the contents of the disk).
.Sp
Alternatively, rather than backup all the file systems as a single
share (\*(L"/\*(R"), it is easier to restore a single file system if you backup
each file system separately.  To do this you should list each file system
mount point in \f(CW$Conf\fR{TarShareName} or \f(CW$Conf\fR{RsyncShareName}, and add the
\&\-\-one\-file\-system option to \f(CW$Conf\fR{TarClientCmd} or \f(CW$Conf\fR{RsyncArgs}.
In this case there is no need to exclude /proc explicitly since it looks
like a different file system.
.Sp
Next you should decide whether to run tar over ssh or nfs. Ssh is
the preferred method. Rsh is not secure and not recommended.
Nfs will work, but you need to make sure that the BackupPC user (running
on the server) has sufficient permissions to read all the files below
the nfs mount.
.Sp
Ssh allows BackupPC to run as a privileged user on the client (eg:
root), since it needs sufficient permissions to read all the backup
files.  Ssh is setup so that BackupPC on the server (an otherwise low
privileged user) can ssh as root on the client, without being prompted
for a password.  However, directly enabled ssh root logins is not
good practice.  A better approach is the ssh as a regular user, and
then configure sudo to allow just rsync to be exectued.
.Sp
There are two common versions of ssh: v1 and v2. Here are some
instructions for one way to setup ssh.  (Check which version of \s-1SSH\s0
you have by typing \*(L"ssh\*(R" or \*(L"man ssh\*(R".)
.RE
.IP "MacOSX" 4
.IX Item "MacOSX"
In general this should be similar to Linux/Unix machines.
In versions 10.4 and later, the native MacOSX tar works,
and also supports resource forks.  xtar is another option,
and rsync works too (although the MacOSX-supplied rsync
has an extension for extended attributes that is not
compatible with standard rsync).
.IP "\s-1SSH\s0 Setup" 4
.IX Item "SSH Setup"
\&\s-1SSH\s0 is a secure way to run tar or rsync on a backup client to extract
the data.  \s-1SSH\s0 provides strong authentication and encryption of
the network data.
.Sp
Note that if you run rsyncd (rsync daemon), ssh is not used.
In this case, rsyncd provides its own authentication, but there
is no encryption of network data.  If you want encryption of
network data you can use ssh to create a tunnel, or use a
program like stunnel.
.Sp
Setup instructions for ssh can be found at
<http://backuppc.sourceforge.net/faq/ssh.html> or on the Wiki.
.IP "Clients that use \s-1DHCP\s0" 4
.IX Item "Clients that use DHCP"
If a client machine uses \s-1DHCP\s0 BackupPC needs some way to find the
\&\s-1IP\s0 address given the host name.  One alternative is to set dhcp
to 1 in the hosts file, and BackupPC will search a pool of \s-1IP\s0
addresses looking for hosts.  More efficiently, it is better to
set dhcp = 0 and provide a mechanism for BackupPC to find the
\&\s-1IP\s0 address given the host name.
.Sp
For WinXX machines BackupPC uses the NetBios name server to determine
the \s-1IP\s0 address given the host name.
For unix machines you can run nmbd (the NetBios name server) from
the Samba distribution so that the machine responds to a NetBios
name request. See the manual page and Samba documentation for more
information.
.Sp
Alternatively, you can set \f(CW$Conf\fR{NmbLookupFindHostCmd} to any command
that returns the \s-1IP\s0 address given the host name.
.Sp
Please read the section \*(L"How BackupPC Finds Hosts\*(R"
for more details.
.SS "Step 6: Running BackupPC"
.IX Subsection "Step 6: Running BackupPC"
The installation contains an init.d backuppc script that can be copied
to /etc/init.d so that BackupPC can auto-start on boot.
See init.d/README for further instructions.
.PP
BackupPC should be ready to start.  If you installed the init.d script,
then you should be able to run BackupPC with:
.PP
.Vb 1
\&    /etc/init.d/backuppc start
.Ve
.PP
(This script can also be invoked with \*(L"stop\*(R" to stop BackupPC and \*(L"reload\*(R"
to tell BackupPC to reload config.pl and the hosts file.)
.PP
Otherwise, just run
.PP
.Vb 1
\&     _\|_INSTALLDIR_\|_/bin/BackupPC \-d
.Ve
.PP
as user _\|_BACKUPPCUSER_\|_.  The \-d option tells BackupPC to run as a daemon
(ie: it does an additional fork).
.PP
Any immediate errors will be printed to stderr and BackupPC will quit.
Otherwise, look in _\|_LOGDIR_\|_/LOG and verify that BackupPC reports
it has started and all is ok.
.SS "Step 7: Talking to BackupPC"
.IX Subsection "Step 7: Talking to BackupPC"
You should verify that BackupPC is running by using BackupPC_serverMesg.
This sends a message to BackupPC via the unix (or \s-1TCP\s0) socket and prints
the response.  Like all BackupPC programs, BackupPC_serverMesg
should be run as the BackupPC user (_\|_BACKUPPCUSER_\|_), so you
should
.PP
.Vb 1
\&    su _\|_BACKUPPCUSER_\|_
.Ve
.PP
before running BackupPC_serverMesg.  If the BackupPC user is
configured with /bin/false as the shell, you can use the \-s
option to su to explicitly run a shell, eg:
.PP
.Vb 1
\&    su \-s /bin/bash _\|_BACKUPPCUSER_\|_
.Ve
.PP
Depending upon your configuration you might also need
the \-l option.
.PP
You can request status information and start and stop backups using this
interface. This socket interface is mainly provided for the \s-1CGI\s0 interface
(and some of the BackupPC sub-programs use it too).  But right now we just
want to make sure BackupPC is happy.  Each of these commands should
produce some status output:
.PP
.Vb 3
\&    _\|_INSTALLDIR_\|_/bin/BackupPC_serverMesg status info
\&    _\|_INSTALLDIR_\|_/bin/BackupPC_serverMesg status jobs
\&    _\|_INSTALLDIR_\|_/bin/BackupPC_serverMesg status hosts
.Ve
.PP
The output should be some hashes printed with Data::Dumper.  If it
looks cryptic and confusing, and doesn't look like an error message,
then all is ok.
.PP
The hosts status should produce a list of every host you have listed
in _\|_CONFDIR_\|_/hosts as part of a big cryptic output line.
.PP
You can also request that all hosts be queued:
.PP
.Vb 1
\&    _\|_INSTALLDIR_\|_/bin/BackupPC_serverMesg backup all
.Ve
.PP
At this point you should make sure the \s-1CGI\s0 interface works since
it will be much easier to see what is going on.  We'll get to that
shortly.
.SS "Step 8: Checking email delivery"
.IX Subsection "Step 8: Checking email delivery"
The script BackupPC_sendEmail sends status and error emails to
the administrator and users.  It is usually run each night
by BackupPC_nightly.
.PP
To verify that it can run sendmail and deliver email correctly
you should ask it to send a test email to you:
.PP
.Vb 2
\&    su _\|_BACKUPPCUSER_\|_
\&    _\|_INSTALLDIR_\|_/bin/BackupPC_sendEmail \-u MYNAME@MYDOMAIN.COM
.Ve
.PP
BackupPC_sendEmail also takes a \-c option that checks if BackupPC
is running, and it sends an email to \f(CW$Conf\fR{EMailAdminUserName}
if it is not.  That can be used as a keep-alive check by adding
.PP
.Vb 1
\&    _\|_INSTALLDIR_\|_/bin/BackupPC_sendEmail \-c
.Ve
.PP
to _\|_BACKUPPCUSER_\|_'s cron.
.PP
The \-t option to BackupPC_sendEmail causes it to print the email
message instead of invoking sendmail to deliver the message.
.SS "Step 9: \s-1CGI\s0 interface"
.IX Subsection "Step 9: CGI interface"
The \s-1CGI\s0 interface script, BackupPC_Admin, is a powerful and flexible
way to see and control what BackupPC is doing.  It is written for an
Apache server.  If you don't have Apache, see <http://www.apache.org>.
.PP
There are three options for setting up the \s-1CGI\s0 interface:
.IP "\s-1SCGI\s0" 4
.IX Item "SCGI"
New to 4.x, \s-1SCGI\s0 uses the \s-1SCGI\s0 interface to Apache, which requires
the mod_scgi.so module to be installed and loaded by Apache.  This
allows Apache to run as any unprivileged user.  The actual \s-1SCGI\s0
server runs as the as the BackupPC user (_\|_BACKUPPCUSER_\|_), and
handles the requests from Apache via a \s-1TCP\s0 socket.
.IP "mod_perl" 4
.IX Item "mod_perl"
Mod_perl required the mod_perl module to be loaded by Apache.  This
allows BackupPC_Admin to be run from inside Apache.  Unlike \s-1SCGI,\s0
using mod_perl with BackupPC_Admin requires a dedicated Apache to
be run as the BackupPC user (_\|_BACKUPPCUSER_\|_).  This is because
BackupPC_Admin needs permission to access various files in BackupPC's
data directories.
.IP "standard" 4
.IX Item "standard"
The standard mode, which is significantly slower than \s-1SCGI\s0 or
mod_perl, is where Apache runs BackupPC_Admin as a seperate process
for every request.  This adds significant startup overhead for every
request, and also requires that BackupPC_Admin be run as setuid to
the BackupPC user (_\|_BACKUPPCUSER_\|_), if Apache isn't being run as
that user.  Setuid scripts are discouraged, so the preference is to
use \s-1SCGI\s0 or mod_perl.
.PP
Here are some specifics for each setup:
.IP "\s-1SCGI\s0 Setup" 4
.IX Item "SCGI Setup"
First you need to install mod_scgi.  If you can't find a pre-built
package, the source is available at <http://python.ca/scgi>.  The
release has subdirectories for apache1 and apache2.  Pick your
matching version (nowadays most likely apache2).  You'll need apxs,
the Apache Extension Tool, installed to build from source.  Once
compiled, the module mod_scgi.so should be installed via the Makefile.
.Sp
To enable the \s-1SCGI\s0 server, set \f(CW$Conf\fR{SCGIServerPort} to an available
non-privileged \s-1TCP\s0 port number, eg: 10268.  The matching port number
has to appear in the Apache configuration file.  Typical Apache
configuration entries will look like this:
.Sp
.Vb 8
\&    LoadModule scgi_module modules/mod_scgi.so
\&    SCGIMount /BackupPC_Admin 127.0.0.1:10268
\&    <Location /BackupPC_Admin>
\&        AuthUserFile /etc/httpd/conf/passwd
\&        AuthType basic
\&        AuthName "access"
\&        require valid\-user
\&    </Location>
.Ve
.Sp
This allows the \s-1SCGI\s0 interface to be accessed with a \s-1URL:\s0
.Sp
.Vb 1
\&    http://yourBackupPCServerHost/BackupPC_Admin
.Ve
.Sp
You can use a different path or name if you prefer a different \s-1URL.\s0
Unlike traditional \s-1CGI,\s0 there is no need to specify a valid path to
a \s-1CGI\s0 script.
.Sp
Important security warning!!  The SCGIServerPort must not be
accessible by anyone untrusted.  That means you can't allow
untrusted users access to the BackupPC server, and you should
block the SCGIServerPort \s-1TCP\s0 port on the BackupPC server.  If you
don't understaand what that means, or can't confirm you have
configured \s-1SCGI\s0 securely, then don't enable \s-1SCGI \-\s0 use one of
the following two methods!!
.IP "Mod_perl Setup" 4
.IX Item "Mod_perl Setup"
The advantage of the mod_perl setup is that no setuid script is
needed (like in the standard method below), and there is a significant
performance advantage.  Not only does all the perl code need to be
parsed just once, the config.pl and hosts files, plus the connection
to the BackupPC server are cached between requests.  The typical
speedup is around 10\-15x.
.Sp
To use mod_perl you need to run Apache as user _\|_BACKUPPCUSER_\|_.
If you need to run multiple Apaches for different services then
you need to create multiple top-level Apache directories, each
with their own config file.  You can make copies of /etc/init.d/httpd
and use the \-d option to httpd to point each http to a different
top-level directory.  Or you can use the \-f option to explicitly
point to the config file.  Multiple Apache's will run on different
Ports (eg: 80 is standard, 8080 is a typical alternative port accessed
via http://yourhost.com:8080).
.Sp
Inside BackupPC's Apache http.conf file you should check the
settings for ServerRoot, DocumentRoot, User, Group, and Port.  See 
<http://httpd.apache.org/docs/server\-wide.html> for more details.
.Sp
For mod_perl, BackupPC_Admin should not have setuid permission, so
you should turn it off:
.Sp
.Vb 1
\&    chmod u\-s _\|_CGIDIR_\|_/BackupPC_Admin
.Ve
.Sp
To tell Apache to use mod_perl to execute BackupPC_Admin, add this
to Apache's 1.x httpd.conf file:
.Sp
.Vb 10
\&    <IfModule mod_perl.c>
\&        PerlModule Apache::Registry
\&        PerlTaintCheck On
\&        <Location /cgi\-bin/BackupPC/BackupPC_Admin>   # <\-\-\- change path as needed
\&           SetHandler perl\-script
\&           PerlHandler Apache::Registry
\&           Options ExecCGI
\&           PerlSendHeader On
\&        </Location>
\&    </IfModule>
.Ve
.Sp
Apache 2.0.44 with Perl 5.8.0 on RedHat 7.1, Don Silvia reports that
this works (with tweaks from Michael Tuzi):
.Sp
.Vb 2
\&    LoadModule perl_module modules/mod_perl.so
\&    PerlModule Apache2
\&
\&    <Directory /path/to/cgi/>
\&        SetHandler perl\-script
\&        PerlResponseHandler ModPerl::Registry
\&        PerlOptions +ParseHeaders
\&        Options +ExecCGI
\&        Order deny,allow
\&        Deny from all
\&        Allow from 192.168.0  
\&        AuthName "Backup Admin"
\&        AuthType Basic
\&        AuthUserFile /path/to/user_file
\&        Require valid\-user
\&    </Directory>
.Ve
.Sp
There are other optimizations and options with mod_perl.  For
example, you can tell mod_perl to preload various perl modules,
which saves memory compared to loading separate copies in every
Apache process after they are forked.  See Stas's definitive
mod_perl guide at <http://perl.apache.org/guide>.
.IP "Standard Setup" 4
.IX Item "Standard Setup"
The \s-1CGI\s0 interface should have been installed by the configure.pl script
in _\|_CGIDIR_\|_/BackupPC_Admin.  BackupPC_Admin should have been installed
as setuid to the BackupPC user (_\|_BACKUPPCUSER_\|_), in addition to user
and group execute permission.
.Sp
You should be very careful about permissions on BackupPC_Admin and
the directory _\|_CGIDIR_\|_: it is important that normal users cannot
directly execute or change BackupPC_Admin, otherwise they can access
backup files for any \s-1PC.\s0 You might need to change the group ownership
of BackupPC_Admin to a group that Apache belongs to so that Apache
can execute it (don't add \*(L"other\*(R" execute permission!).
The permissions should look like this:
.Sp
.Vb 2
\&    ls \-l _\|_CGIDIR_\|_/BackupPC_Admin
\&    \-swxr\-x\-\-\-    1 _\|_BACKUPPCUSER_\|_   web      82406 Jun 17 22:58 _\|_CGIDIR_\|_/BackupPC_Admin
.Ve
.Sp
The setuid script won't work unless perl on your machine was installed
with setuid emulation.  This is likely the problem if you get an error
saying such as \*(L"Wrong user: my userid is 25, instead of 150\*(R", meaning
the script is running as the httpd user, not the BackupPC user.
This is because setuid scripts are disabled by the kernel in most
flavors of unix and linux.
.Sp
To see if your perl has setuid emulation, see if there is a program
called sperl5.8.0 (or sperl5.8.2 etc, based on your perl version)
in the place where perl is installed. If you can't find this program,
then you have two options: rebuild and reinstall perl with the setuid
emulation turned on (answer \*(L"y\*(R" to the question \*(L"Do you want to do
setuid/setgid emulation?\*(R" when you run perl's configure script), or
switch to the mod_perl alternative for the \s-1CGI\s0 script (which doesn't
need setuid to work).
.PP
BackupPC_Admin requires that users are authenticated by Apache.
Specifically, it expects that Apache sets the \s-1REMOTE_USER\s0 environment
variable when it runs.  There are several ways to do this.  One way
is to create a .htaccess file in the cgi-bin directory that looks like:
.PP
.Vb 5
\&    AuthGroupFile /etc/httpd/conf/group    # <\-\-\- change path as needed
\&    AuthUserFile /etc/http/conf/passwd     # <\-\-\- change path as needed
\&    AuthType basic
\&    AuthName "access"
\&    require valid\-user
.Ve
.PP
You will also need \*(L"AllowOverride Indexes AuthConfig\*(R" in the Apache
httpd.conf file to enable the .htaccess file. Alternatively, everything
can go in the Apache httpd.conf file inside a Location directive. The
list of users and password file above can be extracted from the \s-1NIS\s0
passwd file.
.PP
One alternative is to use \s-1LDAP. \s0 In Apache's http.conf add these lines:
.PP
.Vb 2
\&    LoadModule auth_ldap_module   modules/auth_ldap.so
\&    AddModule auth_ldap.c
\&
\&    # cgi\-bin \- auth via LDAP (for BackupPC)
\&    <Location /cgi\-binBackupPC/BackupPC_Admin>    # <\-\-\- change path as needed
\&      AuthType Basic
\&      AuthName "BackupPC login"
\&      # replace MYDOMAIN, PORT, ORG and CO as needed
\&      AuthLDAPURL ldap://ldap.MYDOMAIN.com:PORT/o=ORG,c=CO?uid?sub?(objectClass=*)
\&      require valid\-user
\&    </Location>
.Ve
.PP
If you want to disable the user authentication you can set
\&\f(CW$Conf\fR{CgiAdminUsers} to '*', which allows any user to have
full access to all hosts and backups.  In this case the \s-1REMOTE_USER\s0
environment variable does not have to be set by Apache.
.PP
Alternatively, you can force a particular user name by getting Apache
to set \s-1REMOTE_USER,\s0 eg, to hardcode the user to www you could add
this to Apache's httpd.conf:
.PP
.Vb 3
\&    <Location /cgi\-bin/BackupPC/BackupPC_Admin>   # <\-\-\- change path as needed
\&        Setenv REMOTE_USER www
\&    </Location>
.Ve
.PP
Finally, you should also edit the config.pl file and adjust, as necessary,
the CGI-specific settings.  They're near the end of the config file. In
particular, you should specify which users or groups have administrator
(privileged) access: see the config settings \f(CW$Conf\fR{CgiAdminUserGroup}
and \f(CW$Conf\fR{CgiAdminUsers}.  Also, the configure.pl script placed various
images into \f(CW$Conf\fR{CgiImageDir} that BackupPC_Admin needs to serve
up.  You should make sure that \f(CW$Conf\fR{CgiImageDirURL} is the correct
\&\s-1URL\s0 for the image directory.
.PP
See the section \*(L"Fixing installation problems\*(R" for suggestions on debugging the Apache authentication setup.
.SS "How BackupPC Finds Hosts"
.IX Subsection "How BackupPC Finds Hosts"
Starting with v2.0.0 the way hosts are discovered has changed.  In most
cases you should specify 0 for the \s-1DHCP\s0 flag in the conf/hosts file,
even if the host has a dynamically assigned \s-1IP\s0 address.
.PP
BackupPC (starting with v2.0.0) looks up hosts with \s-1DHCP\s0 = 0 in this manner:
.IP "\(bu" 4
First \s-1DNS\s0 is used to lookup the \s-1IP\s0 address given the client's name
using perl's \fIgethostbyname()\fR function.  This should succeed for machines
that have fixed \s-1IP\s0 addresses that are known via \s-1DNS. \s0 You can manually
see whether a given host have a \s-1DNS\s0 entry according to perl's
gethostbyname function with this command:
.Sp
.Vb 1
\&    perl \-e \*(Aqprint(gethostbyname("myhost") ? "ok\en" : "not found\en");\*(Aq
.Ve
.IP "\(bu" 4
If \fIgethostbyname()\fR fails, BackupPC then attempts a NetBios multicast to
find the host.  Provided your client machine is configured properly,
it should respond to this NetBios multicast request.  Specifically,
BackupPC runs a command of this form:
.Sp
.Vb 1
\&    nmblookup myhost
.Ve
.Sp
If this fails you will see output like:
.Sp
.Vb 2
\&    querying myhost on 10.10.255.255
\&    name_query failed to find name myhost
.Ve
.Sp
If it is successful you will see output like:
.Sp
.Vb 2
\&    querying myhost on 10.10.255.255
\&    10.10.1.73 myhost<00>
.Ve
.Sp
Depending on your netmask you might need to specify the \-B option to
nmblookup.  For example:
.Sp
.Vb 1
\&    nmblookup \-B 10.10.1.255 myhost
.Ve
.Sp
If necessary, experiment with the nmblookup command which will return the
\&\s-1IP\s0 address of the client given its name.  Then update
\&\f(CW$Conf\fR{NmbLookupFindHostCmd} with any necessary options to nmblookup.
.PP
For hosts that have the \s-1DHCP\s0 flag set to 1, these machines are
discovered as follows:
.IP "\(bu" 4
A \s-1DHCP\s0 address pool ($Conf{DHCPAddressRanges}) needs to be specified.
BackupPC will check the NetBIOS name of each machine in the range using
a command of the form:
.Sp
.Vb 1
\&    nmblookup \-A W.X.Y.Z
.Ve
.Sp
where W.X.Y.Z is each candidate address from \f(CW$Conf\fR{DHCPAddressRanges}.
Any host that has a valid NetBIOS name returned by this command (ie:
matching an entry in the hosts file) will be backed up.  You can
modify the specific nmblookup command if necessary via \f(CW$Conf\fR{NmbLookupCmd}.
.IP "\(bu" 4
You only need to use this \s-1DHCP\s0 feature if your client machine doesn't
respond to the NetBios multicast request:
.Sp
.Vb 1
\&    nmblookup myHost
.Ve
.Sp
but does respond to a request directed to its \s-1IP\s0 address:
.Sp
.Vb 1
\&    nmblookup \-A W.X.Y.Z
.Ve
.SS "Other installation topics"
.IX Subsection "Other installation topics"
.IP "Removing a client" 4
.IX Item "Removing a client"
If there is a machine that no longer needs to be backed up (eg: a retired
machine) you have two choices.  First, you can keep the backups accessible
and browsable, but disable all new backups.  Alternatively, you can
completely remove the client and all its backups.
.Sp
To disable backups for a client \f(CW$Conf\fR{BackupsDisable} can be
set to two different values in that client's per-PC config.pl file:
.RS 4
.IP "1." 4
Don't do any regular backups on this machine.  Manually
requested backups (via the \s-1CGI\s0 interface) will still occur.
.IP "2." 4
Don't do any backups on this machine.  Manually requested
backups (via the \s-1CGI\s0 interface) will be ignored.
.RE
.RS 4
.Sp
This will still allow the client's old backups to be browsable
and restorable.
.Sp
To completely remove a client and all its backups, you should remove its
entry in the conf/hosts file, and then delete the _\|_TOPDIR_\|_/pc/$host
directory.  Whenever you change the hosts file, you should send
BackupPC a \s-1HUP \s0(\-1) signal so that it re-reads the hosts file.
If you don't do this, BackupPC will automatically re-read the
hosts file at the next regular wakeup.
.Sp
Note that when you remove a client's backups you won't initially
recover much disk space.  That's because the client's files are
still in the pool.  Overnight, when BackupPC_nightly next runs,
all the unused pool files will be deleted and this will recover
the disk space used by the client's backups.
.RE
.IP "Copying the pool" 4
.IX Item "Copying the pool"
If the pool disk requirements grow you might need to copy the entire
data directory to a new (bigger) file system.  Hopefully you are lucky
enough to avoid this by having the data directory on a \s-1RAID\s0 file system
or \s-1LVM\s0 that allows the capacity to be grown in place by adding disks.
.Sp
Backups prior to V4 make use of hardlinks.  So unless you have a virgin
V4 installation, your file system will contain large numbers of hardlinks.
This makes it hard to copy.
.Sp
Prior to V4 (or a V4 upgrade to a V3 installation, the backup data
directories contain large numbers of hardlinks.  If you try to copy
the pool the target directory will occupy a lot more space if the
hardlinks aren't re-established.
.Sp
Unless you have a pure V4 installation, the best way to copy a pool
file system, if possible, is by copying the raw device at the block
level (eg: using dd).  Application level programs that understand
hardlinks include the \s-1GNU\s0 cp program with the \-a option and rsync
\&\-H.  However, the large number of hardlinks in the pool will make
the memory usage large and the copy very slow.  Don't forget to
stop BackupPC while the copy runs.
.Sp
If you have a pure V4 installation, copying the pool and \s-1PC\s0 backup
directories should be quite easy.  Rsync 3.X should work well.
.SS "Fixing installation problems"
.IX Subsection "Fixing installation problems"
Please see the Wiki at <http://backuppc.wiki.sourceforge.net> for
debugging suggestions.  If you find a solution to your problem that
could help other users please add it to the Wiki!
.SH "Restore functions"
.IX Header "Restore functions"
BackupPC supports several different methods for restoring files. The
most convenient restore options are provided via the \s-1CGI\s0 interface.
Alternatively, backup files can be restored using manual commands.
.SS "\s-1CGI\s0 restore options"
.IX Subsection "CGI restore options"
By selecting a host in the \s-1CGI\s0 interface, a list of all the backups
for that machine will be displayed.  By selecting the backup number
you can navigate the shares and directory tree for that backup.
.PP
BackupPC's \s-1CGI\s0 interface automatically fills incremental backups
with the corresponding full backup, which means each backup has
a filled appearance.  Therefore, there is no need to do multiple
restores from the incremental and full backups: BackupPC does all
the hard work for you.  You simply select the files and directories
you want from the correct backup vintage in one step.
.PP
You can download a single backup file at any time simply by selecting
it.  Your browser should prompt you with the file name and ask you
whether to open the file or save it to disk.
.PP
Alternatively, you can select one or more files or directories in
the currently selected directory and select \*(L"Restore selected files\*(R".
(If you need to restore selected files and directories from several
different parent directories you will need to do that in multiple
steps.)
.PP
If you select all the files in a directory, BackupPC will replace
the list of files with the parent directory.  You will be presented
with a screen that has three options:
.IP "Option 1: Direct Restore" 4
.IX Item "Option 1: Direct Restore"
With this option the selected files and directories are restored
directly back onto the host, by default in their original location.
Any old files with the same name will be overwritten, so use caution.
You can optionally change the target host name, target share name,
and target path prefix for the restore, allowing you to restore the
files to a different location.
.Sp
Once you select \*(L"Start Restore\*(R" you will be prompted one last time
with a summary of the exact source and target files and directories
before you commit.  When you give the final go ahead the restore
operation will be queued like a normal backup job, meaning that it
will be deferred if there is a backup currently running for that host.
When the restore job is run, smbclient, tar, rsync or rsyncd is used
(depending upon \f(CW$Conf\fR{XferMethod}) to actually restore the files.
Sorry, there is currently no option to cancel a restore that has been
started.  Currently ftp restores are not fully implemented.
.Sp
A record of the restore request, including the result and list of
files and directories, is kept.  It can be browsed from the host's
home page.  \f(CW$Conf\fR{RestoreInfoKeepCnt} specifies how many old restore
status files to keep.
.Sp
Note that for direct restore to work, the \f(CW$Conf\fR{XferMethod} must
be able to write to the client.  For example, that means an \s-1SMB\s0
share for smbclient needs to be writable, and the rsyncd module
needs \*(L"read only\*(R" set to \*(L"false\*(R".  This creates additional security
risks.  If you only create read-only \s-1SMB\s0 shares (which is a good
idea), then the direct restore will fail.  You can disable the
direct restore option by setting \f(CW$Conf\fR{SmbClientRestoreCmd},
\&\f(CW$Conf\fR{TarClientRestoreCmd} and \f(CW$Conf\fR{RsyncRestoreArgs} to undef.
.IP "Option 2: Download Zip archive" 4
.IX Item "Option 2: Download Zip archive"
With this option a zip file containing the selected files and directories
is downloaded.  The zip file can then be unpacked or individual files
extracted as necessary on the host machine. The compression level can be
specified.  A value of 0 turns off compression.
.Sp
When you select \*(L"Download Zip File\*(R" you should be prompted where to
save the restore.zip file.
.Sp
BackupPC does not consider downloading a zip file as an actual
restore operation, so the details are not saved for later browsing
as in the first case.  However, a mention that a zip file was
downloaded by a particular user, and a list of the files, does
appear in BackupPC's log file.
.IP "Option 3: Download Tar archive" 4
.IX Item "Option 3: Download Tar archive"
This is identical to the previous option, except a tar file is downloaded
rather than a zip file (and there is currently no compression option).
.SS "Command-line restore options"
.IX Subsection "Command-line restore options"
Apart from the \s-1CGI\s0 interface, BackupPC allows you to restore files
and directories from the command line.  The following programs can
be used:
.IP "BackupPC_zcat" 4
.IX Item "BackupPC_zcat"
For each file name argument it inflates (uncompresses) the file and
writes it to stdout.  To use BackupPC_zcat you could give it the
full file name, eg:
.Sp
.Vb 1
\&    _\|_INSTALLDIR_\|_/bin/BackupPC_zcat _\|_TOPDIR_\|_/pc/host/5/fc/fcraig/fexample.txt > example.txt
.Ve
.Sp
It's your responsibility to make sure the file is really compressed:
BackupPC_zcat doesn't check which backup the requested file is from.
BackupPC_zcat returns a non-zero status if it fails to uncompress
a file.
.Sp
In V4, BackupPC_zcat can be invoked in several other ways:
.Sp
.Vb 4
\&    BackupPC_zcat file...
\&    BackupPC_zcat MD5_digest...
\&    BackupPC_zcat $TopDir/pc/host/num/share/mangledPath...
\&    BackupPC_zcat [\-h host] [\-n num] [\-s share] clientPath...
.Ve
.Sp
For example, you can do this:
.Sp
.Vb 1
\&    BackupPC_zcat d73955e08410dfc5ea8069b05d2f43b2
.Ve
.Sp
That digest can be pasted from the output of BackupPC_ls.
.Sp
The last form uses unmangled paths, so you can do this:
.Sp
.Vb 1
\&    BackupPC_zcat \-h HOST \-n 10 \-s / /home/craig/file
.Ve
.Sp
You can also mix real paths with unmangled paths.  Both of these versions work:
.Sp
.Vb 2
\&    BackupPC_zcat /data/BackupPC/pc/HOST/10/fhome/fcraig/ffile
\&    BackupPC_zcat /data/BackupPC/pc/HOST/10/home/craig/file
.Ve
.IP "BackupPC_tarCreate" 4
.IX Item "BackupPC_tarCreate"
BackupPC_tarCreate creates a tar file for any files or directories in
a particular backup.  Merging of incrementals is done automatically,
so you don't need to worry about whether certain files appear in the
incremental or full backup.
.Sp
The usage is:
.Sp
.Vb 7
\&    BackupPC_tarCreate [options] files/directories...
\&    Required options:
\&       \-h host         host from which the tar archive is created
\&       \-n dumpNum      dump number from which the tar archive is created
\&                       A negative number means relative to the end (eg \-1
\&                       means the most recent dump, \-2 2nd most recent etc).
\&       \-s shareName    share name from which the tar archive is created
\&  
\&    Other options:
\&       \-t              print summary totals
\&       \-r pathRemove   path prefix that will be replaced with pathAdd
\&       \-p pathAdd      new path prefix
\&       \-b BLOCKS       BLOCKS x 512 bytes per record (default 20; same as tar)
\&       \-w writeBufSz   write buffer size (default 1048576 = 1MB)
\&       \-e charset      charset for encoding file names (default: value of
\&                       $Conf{ClientCharset} when backup was done)
\&       \-l              just print a file listing; don\*(Aqt generate an archive
\&       \-L              just print a detailed file listing; don\*(Aqt generate an archive
.Ve
.Sp
The command-line files and directories are relative to the specified
shareName.  The tar file is written to stdout.
.Sp
The \-h, \-n and \-s options specify which dump is used to generate
the tar archive.  The \-r and \-p options can be used to relocate
the paths in the tar archive so extracted files can be placed
in a location different from their original location.
.IP "BackupPC_zipCreate" 4
.IX Item "BackupPC_zipCreate"
BackupPC_zipCreate creates a zip file for any files or directories in
a particular backup.  Merging of incrementals is done automatically,
so you don't need to worry about whether certain files appear in the
incremental or full backup.
.Sp
The usage is:
.Sp
.Vb 7
\&    BackupPC_zipCreate [options] files/directories...
\&    Required options:
\&       \-h host         host from which the zip archive is created
\&       \-n dumpNum      dump number from which the tar archive is created
\&                       A negative number means relative to the end (eg \-1
\&                       means the most recent dump, \-2 2nd most recent etc).
\&       \-s shareName    share name from which the zip archive is created
\&  
\&    Other options:
\&       \-t              print summary totals
\&       \-r pathRemove   path prefix that will be replaced with pathAdd
\&       \-p pathAdd      new path prefix
\&       \-c level        compression level (default is 0, no compression)
\&       \-e charset      charset for encoding file names (default: utf8)
.Ve
.Sp
The command-line files and directories are relative to the specified
shareName.  The zip file is written to stdout. The \-h, \-n and \-s
options specify which dump is used to generate the zip archive.  The
\&\-r and \-p options can be used to relocate the paths in the zip archive
so extracted files can be placed in a location different from their
original location.
.IP "BackupPC_ls" 4
.IX Item "BackupPC_ls"
In V3, a full (or filled) backup tree contains all the files, albeit with \*(L"mangled\*(R"
names, and the file contents are compressed.  Some users found it convenient to
directly navigate a \s-1PC\s0's backup tree to check for files.
.Sp
In V4 that is not possible, since only a single attrib file is stored per directory
in the \s-1PC\s0 backup tree, so the directory contents aren't visible without looking in
the attrib file.
.Sp
A new utility BackupPC_ls (like \*(L"ls\*(R") can be used to view \s-1PC\s0 backup trees.  It shows file digests,
which can be pasted to BackupPC_zipCreate if you want to view the file contents.  The arguments
are similar to BackupPC_zcat.  The usage is:
.Sp
.Vb 1
\&    BackupPC_ls [\-iR] [\-h host] [\-n bkupNum] [\-s shareName] dirs/files...\en")
.Ve
.Sp
The \-i option will show inodes (inode number and number of links).  The \-R option recurses into
directories.
.Sp
If you don't specify \-h, \-n and \-s, then can use the real file system path instead.
For example, the following three commands are equivalent:
.Sp
.Vb 3
\&    BackupPC_ls \-h HOST \-n 10 \-s cDrive /home/craig/file
\&    BackupPC_ls /data/BackupPC/pc/HOST/10/fcDrive/fhome/fcraig/ffile
\&    BackupPC_ls /data/BackupPC/pc/HOST/10/cDrive/home/craig/file
.Ve
.Sp
As you can see, the portion of the full path after the backup number can
be either mangled or not.  Note that using the mangled form allows directory-name
completion via the shell, since those directories actually exist.
.Sp
It would be great if someone would like to volunteer to add features to BackupPC_ls
to make file and directory completion work with unmanged names via the shell.  In
tcsh you can specify a completion program to run \- BackupPC_ls could be given special
arguments to spit out the potential (unmangled) completions.  I'm not sure about bash
does this.
.PP
Each of these programs reside in _\|_INSTALLDIR_\|_/bin.
.SH "Archive functions"
.IX Header "Archive functions"
BackupPC supports archiving to removable media. For users that require
offsite backups, BackupPC can create archives that stream to tape
devices, or create files of specified sizes to fit onto cd or dvd media.
.PP
Each archive type is specified by a BackupPC host with its XferMethod
set to 'archive'. This allows for multiple configurations at sites where
there might be a combination of tape and cd/dvd backups being made.
.PP
BackupPC provides a menu that allows one or more hosts to be archived.
The most recent backup of each host is archived using BackupPC_tarCreate,
and the output is optionally compressed and split into fixed-sized
files (eg: 650MB).
.PP
The archive for each host is done by default using
_\|_INSTALLDIR_\|_/bin/BackupPC_archiveHost.  This script can be copied
and customized as needed.
.SS "Configuring an Archive Host"
.IX Subsection "Configuring an Archive Host"
To create an Archive Host, add it to the hosts file just as any other host
and call it a name that best describes the type of archive, e.g. ArchiveDLT
.PP
To tell BackupPC that the Host is for Archives, create a config.pl file in 
the Archive Hosts's pc directory, adding the following line:
.PP
\&\f(CW$Conf\fR{XferMethod} = 'archive';
.PP
To further customise the archive's parameters you can adding the changed
parameters in the host's config.pl file. The parameters are explained in
the config.pl file.  Parameters may be fixed or the user can be allowed 
to change them (eg: output device).
.PP
The per-host archive command is \f(CW$Conf\fR{ArchiveClientCmd}.  By default
this invokes
.PP
.Vb 1
\&     _\|_INSTALLDIR_\|_/bin/BackupPC_archiveHost
.Ve
.PP
which you can copy and customize as necessary.
.SS "Starting an Archive"
.IX Subsection "Starting an Archive"
In the web interface, click on the Archive Host you wish to use. You will see a
list of previous archives and a summary on each. By clicking the \*(L"Start Archive\*(R"
button you are presented with the list of hosts and the approximate backup size
(note this is raw size, not projected compressed size) Select the hosts you wish
to archive and press the \*(L"Archive Selected Hosts\*(R" button.
.PP
The next screen allows you to adjust the parameters for this archive run.
Press the \*(L"Start the Archive\*(R" to start archiving the selected hosts with the
parameters displayed.
.SS "Starting an Archive from the command line"
.IX Subsection "Starting an Archive from the command line"
The script BackupPC_archiveStart can be used to start an archive from
the command line (or cron etc).  The usage is:
.PP
.Vb 1
\&    BackupPC_archiveStart archiveHost userName hosts...
.Ve
.PP
This creates an archive of the most recent backup of each of
the specified hosts.  The first two arguments are the archive
host and the user name making the request.
.SH "Other CGI Functions"
.IX Header "Other CGI Functions"
.SS "Configuration and Host Editor"
.IX Subsection "Configuration and Host Editor"
The \s-1CGI\s0 interface has a complete configuration and host editor.
Only the administrator can edit the main configuration settings
and hosts.  The edit links are in the left navigation bar.
.PP
When changes are made to any parameter a \*(L"Save\*(R" button appears
at the top of the page.  If you are editing a text box you will
need to click outside of the text box to make the Save button
appear.  If you don't select Save then the changes won't be saved.
.PP
The host-specific configuration can be edited from the host
summary page using the link in the left navigation bar.
The administrator can edit any of the host-specific
configuration settings.
.PP
When editing the host-specific configuration, each parameter has
an \*(L"override\*(R" setting that denotes the value is host-specific,
meaning that it overrides the setting in the main configuration.
If you unselect \*(L"override\*(R" then the setting is removed from
the host-specific configuration, and the main configuration
file is displayed.
.PP
User's can edit their host-specific configuration if enabled
via \f(CW$Conf\fR{CgiUserConfigEditEnable}.  The specific subset
of configuration settings that a user can edit is specified
with \f(CW$Conf\fR{CgiUserConfigEdit}.  It is recommended to make this
list short as possible (you probably don't want your users saving
dozens of backups) and it is essential that they can't edit any
of the Cmd configuration settings, otherwise they can specify
an arbitrary command that will be executed as the BackupPC
user.
.SS "\s-1RSS\s0"
.IX Subsection "RSS"
BackupPC supports a very basic \s-1RSS\s0 feed.  Provided you have the
\&\s-1XML::RSS\s0 perl module installed, a \s-1URL\s0 similar to this will
provide \s-1RSS\s0 information:
.PP
.Vb 1
\&    http://localhost/cgi\-bin/BackupPC/BackupPC_Admin?action=rss
.Ve
.PP
This feature is experimental.  The information included will
probably change.
.SH "BackupPC Design"
.IX Header "BackupPC Design"
.SS "Some design issues"
.IX Subsection "Some design issues"
.IP "Pooling common files" 4
.IX Item "Pooling common files"
To see if a file is already in the pool, an \s-1MD5\s0 digest of the file
contents is used.  This can't guarantee a file is identical: it
just reduces the search to often a single file or handful of files.
.Sp
Depending on the Xfer method and settings, a complete file comparison
is done to verify if two files are really the same.
.Sp
Prior to V4, identical files on multiples backups are represented
by hard links.  Hardlinks are used so that identical files all refer
to the same physical file on the server's disk. Also, hard links
maintain reference counts so that BackupPC knows when to delete
unused files from the pool.
.Sp
In V4+, hardlinks are not used and reference counting is done at the
application level.  It is done in a batch manner, which simplifies
the implemtnation.
.Sp
For the computer-science majors among you, you can think of the pooling
system used by BackupPC as just a chained hash table stored on a (big)
file system.
.IP "The hashing function" 4
.IX Item "The hashing function"
In V4+, the file digest is the \s-1MD5\s0 digest of the complete file.
While \s-1MD5\s0 collisions are now well known, and can be easily constructed,
in real use collisions will be extremely unlikely.
.Sp
Prior to V4, just a portion of all but the smallest files was used
for the digest.  That decision was made long ago when CPUs were a
lot slower.  For files less than 256K, the digest is the \s-1MD5\s0 digest
of the file size and the full file.  For files up to 1MB, the first
and last 128K of the file, and for over 1MB, the first and eighth
128K chunks are used, together with the file size.
.IP "Compression" 4
.IX Item "Compression"
BackupPC supports compression. It uses the deflate and inflate methods
in the Compress::Zlib module, which is based on the zlib compression
library (see <http://www.gzip.org/zlib/>).
.Sp
The \f(CW$Conf\fR{CompressLevel} setting specifies the compression level to use.
Zero (0) means no compression. Compression levels can be from 1 (least
cpu time, slightly worse compression) to 9 (most cpu time, slightly
better compression). The recommended value is 3. Changing it to 5, for
example, will take maybe 20% more cpu time and will get another 2\-3%
additional compression.  Diminishing returns set in above 5.  See the zlib
documentation for more information about compression levels.
.Sp
BackupPC implements compression with minimal \s-1CPU\s0 load. Rather than
compressing every incoming backup file and then trying to match it
against the pool, BackupPC computes the \s-1MD5\s0 digest based on the
uncompressed file, and matches against the candidate pool files by
comparing each uncompressed pool file against the incoming backup file.
Since inflating a file takes roughly a factor of 10 less \s-1CPU\s0 time than
deflating there is a big saving in \s-1CPU\s0 time.
.Sp
The combination of pooling common files and compression can yield
a factor of 8 or more overall saving in backup storage.
.Sp
Note that you should not turn compression on and off are you have
started running BackupPC.  It will result in double the storage needs,
since all the files will be stored in both the compressed and uncompressed
pools.
.SS "BackupPC operation"
.IX Subsection "BackupPC operation"
BackupPC reads the configuration information from
_\|_CONFDIR_\|_/config.pl. It then runs and manages all the backup
activity. It maintains queues of pending backup requests, user backup
requests and administrative commands. Based on the configuration various
requests will be executed simultaneously.
.PP
As specified by \f(CW$Conf\fR{WakeupSchedule}, BackupPC wakes up periodically
to queue backups on all the PCs.  This is a four step process:
.IP "1." 4
For each host and \s-1DHCP\s0 address backup requests are queued on the
background command queue.
.IP "2." 4
For each \s-1PC,\s0 BackupPC_dump is forked. Several of these may be run in
parallel, based on the configuration. First a ping is done to see if
the machine is alive. If this is a \s-1DHCP\s0 address, nmblookup is run to
get the netbios name, which is used as the host name. If \s-1DNS\s0 lookup
fails, \f(CW$Conf\fR{NmbLookupFindHostCmd} is run to find the \s-1IP\s0 address from
the host name.  The file _\|_TOPDIR_\|_/pc/$host/backups is read to decide
whether a full or incremental backup needs to be run. If no backup is
scheduled, or the ping to \f(CW$host\fR fails, then BackupPC_dump exits.
.Sp
The backup is done using the specified XferMethod.  Either samba's smbclient
or tar over ssh/rsh/nfs piped into BackupPC_tarExtract, or rsync over ssh/rsh
is run, or rsyncd is connected to, with the incoming data
extracted to _\|_TOPDIR_\|_/pc/$host/new.  The XferMethod output is put
into _\|_TOPDIR_\|_/pc/$host/XferLOG.
.Sp
The letter in the XferLOG file shows the type of object, similar to the
first letter of the modes displayed by ls \-l:
.Sp
.Vb 6
\&    d \-> directory
\&    l \-> symbolic link
\&    b \-> block special file
\&    c \-> character special file
\&    p \-> pipe file (fifo)
\&    nothing \-> regular file
.Ve
.Sp
The words mean:
.RS 4
.IP "create" 4
.IX Item "create"
new for this backup (ie: directory or file not in pool)
.IP "pool" 4
.IX Item "pool"
found a match in the pool
.IP "same" 4
.IX Item "same"
file is identical to previous backup (contents were
checksummed and verified during full dump).
.IP "skip" 4
.IX Item "skip"
file skipped in incremental because attributes are the
same (only displayed if \f(CW$Conf\fR{XferLogLevel} >= 2).
.RE
.RS 4
.Sp
As BackupPC_tarExtract extracts the files from smbclient or tar, or as
rsync or ftp runs, it checks each file in the backup to see if it is
identical to an existing file from any previous backup of any \s-1PC.\s0 It
does this without needed to write the file to disk. If the file matches
an existing file, a hardlink is created to the existing file in the
pool. If the file does not match any existing files, the file is written
to disk and inserted into the pool.
.Sp
BackupPC_tarExtract and rsync can handle arbitrarily large files
and multiple candidate matching files without needing to write the
file to disk in the case of a match.  This significantly reduces
disk writes (and also reads, since the pool file comparison is done
disk to memory, rather than disk to disk).
.Sp
Based on the configuration settings, BackupPC_dump checks each
old backup to see if any should be removed.
.RE
.IP "3." 4
Once each night, BackupPC_nightly is run to complete some additional
administrative tasks, such as cleaning the pool.  This involves
removing any files in the pool that only have a single hard link
(meaning no backups are using that file).
.Sp
If BackupPC_nightly takes too long to run, the settings
\&\f(CW$Conf\fR{MaxBackupPCNightlyJobs} and \f(CW$Conf\fR{BackupPCNightlyPeriod} can
be used to run several BackupPC_nightly processes in parallel, and
to split its job over several nights.
.PP
BackupPC also listens for \s-1TCP\s0 connections on \f(CW$Conf\fR{ServerPort}, which
is used by the \s-1CGI\s0 script BackupPC_Admin for status reporting and
user-initiated backup or backup cancel requests.
.SS "Storage layout"
.IX Subsection "Storage layout"
BackupPC resides in several directories:
.IP "_\|_INSTALLDIR_\|_" 4
.IX Item "__INSTALLDIR__"
Perl scripts comprising BackupPC reside in _\|_INSTALLDIR_\|_/bin,
libraries are in _\|_INSTALLDIR_\|_/lib and documentation
is in _\|_INSTALLDIR_\|_/doc.
.IP "_\|_CGIDIR_\|_" 4
.IX Item "__CGIDIR__"
The \s-1CGI\s0 script BackupPC_Admin resides in this cgi binary directory.
.IP "_\|_CONFDIR_\|_" 4
.IX Item "__CONFDIR__"
All the configuration information resides below _\|_CONFDIR_\|_.
This directory contains:
.Sp
The directory _\|_CONFDIR_\|_ contains:
.RS 4
.IP "config.pl" 4
.IX Item "config.pl"
Configuration file. See \*(L"Configuration File\*(R" below for more details.
.IP "hosts" 4
.IX Item "hosts"
Hosts file, which lists all the PCs to backup.
.IP "pc" 4
.IX Item "pc"
The directory _\|_CONFDIR_\|_/pc contains per-client configuration files
that override settings in the main configuration file.  Each file
is named _\|_CONFDIR_\|_/pc/HOST.pl, where \s-1HOST\s0 is the host name.
.Sp
In pre-FHS versions of BackupPC these files were located in
_\|_TOPDIR_\|_/pc/HOST/config.pl.
.RE
.RS 4
.RE
.IP "_\|_LOGDIR_\|_" 4
.IX Item "__LOGDIR__"
The directory _\|_LOGDIR_\|_ (_\|_TOPDIR_\|_/log on pre-FHS versions
of BackupPC) contains:
.RS 4
.IP "\s-1LOG\s0" 4
.IX Item "LOG"
Current (today's) log file output from BackupPC.
.IP "\s-1LOG.0\s0 or \s-1LOG.0\s0.z" 4
.IX Item "LOG.0 or LOG.0.z"
Yesterday's log file output.  Log files are aged daily and compressed
(if compression is enabled), and old \s-1LOG\s0 files are deleted.
.IP "BackupPC.pid" 4
.IX Item "BackupPC.pid"
Contains BackupPC's process id.
.IP "status.pl" 4
.IX Item "status.pl"
A summary of BackupPC's status written periodically by BackupPC so
that certain state information can be maintained if BackupPC is
restarted.  Should not be edited.
.IP "UserEmailInfo.pl" 4
.IX Item "UserEmailInfo.pl"
A summary of what email was last sent to each user, and when the
last email was sent.  Should not be edited.
.RE
.RS 4
.RE
.IP "_\|_TOPDIR_\|_" 4
.IX Item "__TOPDIR__"
All of BackupPC's data (\s-1PC\s0 backup images, logs, configuration information)
is stored below this directory.
.Sp
Below _\|_TOPDIR_\|_ are several directories:
.RS 4
.IP "_\|_TOPDIR_\|_/pool" 4
.IX Item "__TOPDIR__/pool"
All uncompressed files from \s-1PC\s0 backups are stored below _\|_TOPDIR_\|_/pool.
Each file's name is based on the \s-1MD5\s0 hex digest of the file contents.
.Sp
For V4+, the digest is the \s-1MD5\s0 digest of the full file contents (the length
is not used).  For V4+ the pool files are stored in a 2 level tree, using
7 bits from the top of the first two bytes of the digest.  So there are 128
directories are each level, numbered evenly in hex from 0x00, 0x02, to 0xfe.
.Sp
For example, if a file has an \s-1MD5\s0 digest of 123456789abcdef0123456789abcdef0,
the uncompressed file is stored in _\|_TOPDIR_\|_/pool/12/34/123456789abcdef0123456789abcdef0.
.Sp
Duplicates digest are represented with one (or more) hex byte extensions.
So three colliding files would be stored as
.Sp
.Vb 3
\&        _\|_TOPDIR_\|_/pool/12/34/123456789abcdef0123456789abcdef0
\&        _\|_TOPDIR_\|_/pool/12/34/123456789abcdef0123456789abcdef000
\&        _\|_TOPDIR_\|_/pool/12/34/123456789abcdef0123456789abcdef001
.Ve
.Sp
The rest of this section describes the old pool layout.  Note that both V3 and V4
pools can exist together, since they use different names for their directory trees.
.Sp
As exampled earlier, prior to V4 the digest is computed as follows.
For files less than 256K, the file length and the entire
file is used. For files up to 1MB, the file length and the first and
last 128K are used. Finally, for files longer than 1MB, the file length,
and the first and eighth 128K chunks for the file are used.
.Sp
Both BackupPC_dump (actually, BackupPC_tarExtract or rsync_bpc) are
responsible for checking newly backed up files against the pool. For
each file, the \s-1MD5\s0 digest is used to generate a file name in the pool
directory.
.Sp
If the file exists in the pool, the contents are compared.
If there is no match, additional files in the chain are checked (if any).
(Actually, multiple candidate files are compated in parallel.)
.Sp
If \f(CW$Conf\fR{PoolV3Enabled} is set, then the V3 pool is checked
if there are no matches in the V4 pool.  If a V3 file matches, it is
simply moved (renamed) the the V4 pool with it's new file name based on
the V4 digest.  That still allows the V3 backups to be browsed etc, since
those backups are still based on hardlinks.
.Sp
If the file contents exactly match, a reference count is incremented.
Otherwise, the file is added to the pool by using an atomic link operation,
followed by unlinking the temporary file.
.Sp
One other issue: zero length files are not pooled, since there are a lot
of these files and on most file systems it doesn't save any disk space
to turn these files into hard links.
.Sp
Prior to V4, each pool file is stored in a subdirectory X/Y/Z, where X,
Y, Z are the first 3 hex digits of the \s-1MD5\s0 digest.
.Sp
For example, if a file has an \s-1MD5\s0 digest of 123456789abcdef0123456789abcdef0,
the file is stored in _\|_TOPDIR_\|_/pool/1/2/3/123456789abcdef0123456789abcdef0.
.Sp
The \s-1MD5\s0 digest might not be unique (especially since not all the file's
contents are used for files bigger than 256K). Different files that have
the same \s-1MD5\s0 digest are stored with a trailing suffix \*(L"_n\*(R" where n is
an incrementing number starting at 0. So, for example, if two additional
files were identical to the first, except the last byte was different,
and assuming the file was larger than 1MB (so the \s-1MD5\s0 digests are the
same but the files are actually different), the three files would be
stored as:
.Sp
.Vb 3
\&        _\|_TOPDIR_\|_/pool/1/2/3/123456789abcdef0123456789abcdef0
\&        _\|_TOPDIR_\|_/pool/1/2/3/123456789abcdef0123456789abcdef0_0
\&        _\|_TOPDIR_\|_/pool/1/2/3/123456789abcdef0123456789abcdef0_1
.Ve
.IP "_\|_TOPDIR_\|_/cpool" 4
.IX Item "__TOPDIR__/cpool"
All compressed files from \s-1PC\s0 backups are stored below _\|_TOPDIR_\|_/cpool.
Its layout is the same as _\|_TOPDIR_\|_/pool, and the hashing function
is the same (and, importantly, based on the uncompressed file, not
the compressed file).
.IP "_\|_TOPDIR_\|_/pc/$host" 4
.IX Item "__TOPDIR__/pc/$host"
For each \s-1PC\s0 \f(CW$host\fR, all the backups for that \s-1PC\s0 are stored below
the directory _\|_TOPDIR_\|_/pc/$host.  This directory contains the
following files:
.RS 4
.IP "\s-1LOG\s0" 4
.IX Item "LOG"
Current log file for this \s-1PC\s0 from BackupPC_dump.
.IP "\s-1LOG.DDMMYYYY\s0 or \s-1LOG.DDMMYYYY\s0.z" 4
.IX Item "LOG.DDMMYYYY or LOG.DDMMYYYY.z"
Last month's log file.  Log files are aged monthly and compressed
(if compression is enabled), and old \s-1LOG\s0 files are deleted.
In earlier versions of BackupPC these files used to have
a suffix of 0, 1, ....
.IP "XferERR or XferERR.z" 4
.IX Item "XferERR or XferERR.z"
Output from the transport program (ie: smbclient, tar, rsync or ftp)
for the most recent failed backup.
.IP "XferLOG or XferLOG.z" 4
.IX Item "XferLOG or XferLOG.z"
Output from the transport program (ie: smbclient, tar, rsync or ftp)
for the current backup.
.IP "nnn (an integer)" 4
.IX Item "nnn (an integer)"
Backups are in directories numbered sequentially starting at 0.
.IP "refCnt" 4
.IX Item "refCnt"
The host's reference count databased is stored below the refCnt directory.
.IP "XferLOG.nnn or XferLOG.nnn.z" 4
.IX Item "XferLOG.nnn or XferLOG.nnn.z"
Output from the transport program (ie: smbclient, tar, rsync or ftp)
corresponding to backup number nnn.
.IP "RestoreInfo.nnn" 4
.IX Item "RestoreInfo.nnn"
Information about restore request #nnn including who, what, when, and
why. This file is in Data::Dumper format.  (Note that the restore
numbers are not related to the backup number.)
.IP "RestoreLOG.nnn.z" 4
.IX Item "RestoreLOG.nnn.z"
Output from smbclient, tar or rsync during restore #nnn.  (Note that the restore
numbers are not related to the backup number.)
.IP "ArchiveInfo.nnn" 4
.IX Item "ArchiveInfo.nnn"
Information about archive request #nnn including who, what, when, and
why. This file is in Data::Dumper format.  (Note that the archive
numbers are not related to the restore or backup number.)
.IP "ArchiveLOG.nnn.z" 4
.IX Item "ArchiveLOG.nnn.z"
Output from archive #nnn.  (Note that the archive numbers are not related
to the backup or restore number.)
.IP "config.pl" 4
.IX Item "config.pl"
Old location of optional configuration settings specific to this host.
Settings in this file override the main configuration file.
In new versions of BackupPC the per-host configuration files are
stored in _\|_CONFDIR_\|_/pc/HOST.pl.
.IP "backups" 4
.IX Item "backups"
A tab-delimited ascii table listing information about each successful
backup, one per row.  The columns are:
.RS 4
.IP "num" 4
.IX Item "num"
The backup number, an integer that starts at 0 and increments
for each successive backup.  The corresponding backup is stored
in the directory num (eg: if this field is 5, then the backup is
stored in _\|_TOPDIR_\|_/pc/$host/5).
.IP "type" 4
.IX Item "type"
Set to \*(L"full\*(R" or \*(L"incr\*(R" for full or incremental backup.
.IP "startTime" 4
.IX Item "startTime"
Start time of the backup in unix seconds.
.IP "endTime" 4
.IX Item "endTime"
Stop time of the backup in unix seconds.
.IP "nFiles" 4
.IX Item "nFiles"
Number of files backed up (as reported by smbclient, tar, rsync or ftp).
.IP "size" 4
.IX Item "size"
Total file size backed up (as reported by smbclient, tar, rsync or ftp).
.IP "nFilesExist" 4
.IX Item "nFilesExist"
Number of files that were already in the pool
(as determined by BackupPC_dump).
.IP "sizeExist" 4
.IX Item "sizeExist"
Total size of files that were already in the pool
(as determined by BackupPC_dump).
.IP "nFilesNew" 4
.IX Item "nFilesNew"
Number of files that were not in the pool
(as determined by BackupPC_dump).
.IP "sizeNew" 4
.IX Item "sizeNew"
Total size of files that were not in the pool
(as determined by BackupPC_dump).
.IP "xferErrs" 4
.IX Item "xferErrs"
Number of errors or warnings from smbclient, tar, rsync or ftp.
.IP "xferBadFile" 4
.IX Item "xferBadFile"
Number of errors from smbclient that were bad file errors (zero otherwise).
.IP "xferBadShare" 4
.IX Item "xferBadShare"
Number of errors from smbclient that were bad share errors (zero otherwise).
.IP "tarErrs" 4
.IX Item "tarErrs"
Number of errors from BackupPC_tarExtract.
.IP "compress" 4
.IX Item "compress"
The compression level used on this backup.  Zero or empty means no
compression.
.IP "sizeExistComp" 4
.IX Item "sizeExistComp"
Total compressed size of files that were already in the pool
(as determined by BackupPC_dump).
.IP "sizeNewComp" 4
.IX Item "sizeNewComp"
Total compressed size of files that were not in the pool
(as determined by BackupPC_dump).
.IP "noFill" 4
.IX Item "noFill"
Set if this backup has not been filled \- it just includes the
deltas from the next backup necessary to reconstruct this backup.
.IP "fillFromNum" 4
.IX Item "fillFromNum"
If this backup was filled (ie: noFill is 0) then this is the
number of the backup that it was filled from
.IP "mangle" 4
.IX Item "mangle"
Set if this backup has mangled file names and attributes.  Always
true for backups in v1.4.0 and above.  False for all backups prior
to v1.4.0.
.IP "xferMethod" 4
.IX Item "xferMethod"
Set to the value of \f(CW$Conf\fR{XferMethod} when this dump was done.
.IP "level" 4
.IX Item "level"
The level of this dump.  A full dump is level 0.  Currently incrementals
are 1.  In V4+ multi-level incrementals are no longer supported, so this
is just a 0 or 1.
.RE
.RS 4
.RE
.IP "restores" 4
.IX Item "restores"
A tab-delimited ascii table listing information about each requested
restore, one per row.  The columns are:
.RS 4
.IP "num" 4
.IX Item "num"
Restore number (matches the suffix of the RestoreInfo.nnn and
RestoreLOG.nnn.z file), unrelated to the backup number.
.IP "startTime" 4
.IX Item "startTime"
Start time of the restore in unix seconds.
.IP "endTime" 4
.IX Item "endTime"
End time of the restore in unix seconds.
.IP "result" 4
.IX Item "result"
Result (ok or failed).
.IP "errorMsg" 4
.IX Item "errorMsg"
Error message if restore failed.
.IP "nFiles" 4
.IX Item "nFiles"
Number of files restored.
.IP "size" 4
.IX Item "size"
Size in bytes of the restored files.
.IP "tarCreateErrs" 4
.IX Item "tarCreateErrs"
Number of errors from BackupPC_tarCreate during restore.
.IP "xferErrs" 4
.IX Item "xferErrs"
Number of errors from smbclient, tar, rsync or ftp during restore.
.RE
.RS 4
.RE
.IP "archives" 4
.IX Item "archives"
A tab-delimited ascii table listing information about each requested
archive, one per row.  The columns are:
.RS 4
.IP "num" 4
.IX Item "num"
Archive number (matches the suffix of the ArchiveInfo.nnn and
ArchiveLOG.nnn.z file), unrelated to the backup or restore number.
.IP "startTime" 4
.IX Item "startTime"
Start time of the restore in unix seconds.
.IP "endTime" 4
.IX Item "endTime"
End time of the restore in unix seconds.
.IP "result" 4
.IX Item "result"
Result (ok or failed).
.IP "errorMsg" 4
.IX Item "errorMsg"
Error message if archive failed.
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.SS "Compressed file format"
.IX Subsection "Compressed file format"
The compressed file format is as generated by Compress::Zlib::deflate
with one minor, but important, tweak. Since Compress::Zlib::inflate
fully inflates its argument in memory, it could take large amounts of
memory if it was inflating a highly compressed file. For example, a
200MB file of 0x0 bytes compresses to around 200K bytes. If
Compress::Zlib::inflate was called with this single 200K buffer, it
would need to allocate 200MB of memory to return the result.
.PP
BackupPC watches how efficiently a file is compressing. If a big file
has very high compression (meaning it will use too much memory when it
is inflated), BackupPC calls the \fIflush()\fR method, which gracefully
completes the current compression.  BackupPC then starts another
deflate and simply appends the output file.  So the BackupPC compressed
file format is one or more concatenated deflations/flushes.  The specific
ratios that BackupPC uses is that if a 6MB chunk compresses to less
than 64K then a flush will be done.
.PP
Back to the example of the 200MB file of 0x0 bytes.  Adding flushes
every 6MB adds only 200 or so bytes to the 200K output.  So the
storage cost of flushing is negligible.
.PP
To easily decompress a BackupPC compressed file, the script
BackupPC_zcat can be found in _\|_INSTALLDIR_\|_/bin.  For each
file name argument it inflates the file and writes it to stdout.
.SS "Rsync checksum caching"
.IX Subsection "Rsync checksum caching"
Rsync checksum caching is not implemented in V4.  This section
needs to be updated.
.PP
An incremental backup with rsync compares attributes on the client
with the last full backup.  Any files with identical attributes
are skipped.  A full backup with rsync sets the \-\-ignore\-times
option, which causes every file to be examined independent of
attributes.
.PP
Each file is examined by generating block checksums (default 2K
blocks) on the receiving side (that's the BackupPC side), sending
those checksums to the client, where the remote rsync matches those
checksums with the corresponding file.  The matching blocks and new
data is sent back, allowing the client file to be reassembled.
A checksum for the entire file is sent to as an extra check the
the reconstructed file is correct.
.PP
This results in significant disk \s-1IO\s0 and computation for BackupPC:
every file in a full backup, or any file with non-matching attributes
in an incremental backup, needs to be uncompressed, block checksums
computed and sent.  Then the receiving side reassembles the file and
has to verify the whole-file checksum.  Even if the file is identical,
prior to 2.1.0, BackupPC had to read and uncompress the file twice,
once to compute the block checksums and later to verify the whole-file
checksum.
.SS "File name mangling"
.IX Subsection "File name mangling"
Backup file names are stored in \*(L"mangled\*(R" form. Each node of
a path is preceded by \*(L"f\*(R" (mnemonic: file), and special characters
(\en, \er, % and /) are URI-encoded as \*(L"%xx\*(R", where xx is the ascii
character's hex value.  So c:/craig/example.txt is now stored as
fc/fcraig/fexample.txt.
.PP
This was done mainly so meta-data could be stored alongside the backup
files without name collisions. In particular, the attributes for the
files in a directory are stored in a file called \*(L"attrib\*(R", and mangling
avoids file name collisions (I discarded the idea of having a duplicate
directory tree for every backup just to store the attributes). Other
meta-data (eg: rsync checksums) could be stored in file names preceded
by, eg, \*(L"c\*(R". There are two other benefits to mangling: the share name
might contain \*(L"/\*(R" (eg: \*(L"/home/craig\*(R" for tar transport), and I wanted
that represented as a single level in the storage tree.
.PP
The \s-1CGI\s0 script undoes the mangling, so it is invisible to the user.
Old (unmangled) backups are still supported by the \s-1CGI\s0
interface.
.SS "Special files"
.IX Subsection "Special files"
Linux/unix file systems support several special file types: symbolic
links, character and block device files, fifos (pipes) and unix-domain
sockets. All except unix-domain sockets are supported by BackupPC
(there's no point in backing up or restoring unix-domain sockets since
they only have meaning after a process creates them). Symbolic links are
stored as a plain file whose contents are the contents of the link (not
the file it points to). This file is compressed and pooled like any
normal file. Character and block device files are also stored as plain
files, whose contents are two integers separated by a comma; the numbers
are the major and minor device number. These files are compressed and
pooled like any normal file. Fifo files are stored as empty plain files
(which are not pooled since they have zero size). In all cases, the
original file type is stored in the attrib file so it can be correctly
restored.
.PP
Hardlinks are also supported.  When \s-1GNU\s0 tar first encounters a file with
more than one link (ie: hardlinks) it dumps it as a regular file.  When
it sees the second and subsequent hardlinks to the same file, it dumps
just the hardlink information.  BackupPC correctly recognizes these
hardlinks and stores them just like symlinks: a regular text file
whose contents is the path of the file linked to.  The \s-1CGI\s0 script
will download the original file when you click on a hardlink.
.PP
Also, BackupPC_tarCreate has enough magic to re-create the hardlinks
dynamically based on whether or not the original file and hardlinks
are both included in the tar file.  For example, imagine a/b/x is a
hardlink to a/c/y.  If you use BackupPC_tarCreate to restore directory
a, then the tar file will include a/b/x as the original file and a/c/y
will be a hardlink to a/b/x.  If, instead you restore a/c, then the
tar file will include a/c/y as the original file, not a hardlink.
.SS "Attribute file format"
.IX Subsection "Attribute file format"
The attribute file format has been changed in V4.  This section describes
the old format.
.PP
The unix attributes for the contents of a directory (all the files and
directories in that directory) are stored in a file called attrib.
There is a single attrib file for each directory in a backup.
For example, if c:/craig contains a single file c:/craig/example.txt,
that file would be stored as fc/fcraig/fexample.txt and there would be an
attribute file in fc/fcraig/attrib (and also fc/attrib and ./attrib).
The file fc/fcraig/attrib would contain a single entry containing the
attributes for fc/fcraig/fexample.txt.
.PP
The attrib file starts with a magic number, followed by the
concatenation of the following information for each file:
.IP "\(bu" 4
File name length in perl's pack \*(L"w\*(R" format (variable length base 128).
.IP "\(bu" 4
File name.
.IP "\(bu" 4
The unix file type, mode, uid, gid and file size divided by 4GB and
file size modulo 4GB (type mode uid gid sizeDiv4GB sizeMod4GB),
in perl's pack \*(L"w\*(R" format (variable length base 128).
.IP "\(bu" 4
The unix mtime (unix seconds) in perl's pack \*(L"N\*(R" format (32 bit integer).
.PP
The attrib file is also compressed if compression is enabled.
See the lib/BackupPC/Attrib.pm module for full details.
.PP
Attribute files are pooled just like normal backup files.  This saves
space if all the files in a directory have the same attributes across
multiple backups, which is common.
.SS "Optimizations"
.IX Subsection "Optimizations"
BackupPC doesn't care about the access time of files in the pool
since it saves attribute meta-data separate from the files.  Since
BackupPC mostly does reads from disk, maintaining the access time of
files generates a lot of unnecessary disk writes.  So, provided 
BackupPC has a dedicated data disk, you should consider mounting
BackupPC's data directory with the noatime (or, with Linux kernels
>=2.6.20, relatime) attribute (see \fImount\fR\|(1)).
.SS "Limitations"
.IX Subsection "Limitations"
BackupPC isn't perfect (but it is getting better). Please see
<http://backuppc.sourceforge.net/faq/limitations.html> for a
discussion of some of BackupPC's limitations.
.SS "Security issues"
.IX Subsection "Security issues"
Please see <http://backuppc.sourceforge.net/faq/security.html> for a
discussion of some of various security issues.
.SH "Configuration File"
.IX Header "Configuration File"
The BackupPC configuration file resides in _\|_CONFDIR_\|_/config.pl.
Optional per-PC configuration files reside in _\|_CONFDIR_\|_/pc/$host.pl
(or _\|_TOPDIR_\|_/pc/$host/config.pl in non-FHS versions of BackupPC).
This file can be used to override settings just for a particular \s-1PC.\s0
.SS "Modifying the main configuration file"
.IX Subsection "Modifying the main configuration file"
The configuration file is a perl script that is executed by BackupPC, so
you should be careful to preserve the file syntax (punctuation, quotes
etc) when you edit it. It is recommended that you use \s-1CVS, RCS\s0 or some
other method of source control for changing config.pl.
.PP
BackupPC reads or re-reads the main configuration file and
the hosts file in three cases:
.IP "\(bu" 4
Upon startup.
.IP "\(bu" 4
When BackupPC is sent a \s-1HUP \s0(\-1) signal.  Assuming you installed the 
init.d script, you can also do this with \*(L"/etc/init.d/backuppc reload\*(R".
.IP "\(bu" 4
When the modification time of config.pl file changes.  BackupPC
checks the modification time once during each regular wakeup.
.PP
Whenever you change the configuration file you can either do
a kill \-HUP BackupPC_pid or simply wait until the next regular
wakeup period.
.PP
Each time the configuration file is re-read a message is reported in the
\&\s-1LOG\s0 file, so you can tail it (or view it via the \s-1CGI\s0 interface) to make
sure your kill \-HUP worked. Errors in parsing the configuration file are
also reported in the \s-1LOG\s0 file.
.PP
The optional per-PC configuration file (_\|_CONFDIR_\|_/pc/$host.pl or
_\|_TOPDIR_\|_/pc/$host/config.pl in non-FHS versions of BackupPC)
is read whenever it is needed by BackupPC_dump, BackupPC_restore and others.
.SH "Configuration Parameters"
.IX Header "Configuration Parameters"
The configuration parameters are divided into five general groups.
The first group (general server configuration) provides general
configuration for BackupPC.  The next two groups describe what to
backup, when to do it, and how long to keep it.  The fourth group
are settings for email reminders, and the final group contains
settings for the \s-1CGI\s0 interface.
.PP
All configuration settings in the second through fifth groups can
be overridden by the per-PC config.pl file.
.SS "General server configuration"
.IX Subsection "General server configuration"
.ie n .IP "$Conf{ServerHost} = '';" 4
.el .IP "\f(CW$Conf\fR{ServerHost} = '';" 4
.IX Item "$Conf{ServerHost} = '';"
Host name on which the BackupPC server is running.
.ie n .IP "$Conf{ServerPort} = \-1;" 4
.el .IP "\f(CW$Conf\fR{ServerPort} = \-1;" 4
.IX Item "$Conf{ServerPort} = -1;"
\&\s-1TCP\s0 port number on which the BackupPC server listens for and accepts
connections.  Normally this should be disabled (set to \-1).  The \s-1TCP\s0
port is only needed if apache runs on a different machine from BackupPC.
In that case, set this to any spare port number over 1024 (eg: 2359).
If you enable the \s-1TCP\s0 port, make sure you set \f(CW$Conf\fR{ServerMesgSecret}
too!
.ie n .IP "$Conf{ServerMesgSecret} = '';" 4
.el .IP "\f(CW$Conf\fR{ServerMesgSecret} = '';" 4
.IX Item "$Conf{ServerMesgSecret} = '';"
Shared secret to make the \s-1TCP\s0 port secure.  Set this to a hard to guess
string if you enable the \s-1TCP\s0 port (ie: \f(CW$Conf\fR{ServerPort} > 0).
.Sp
To avoid possible attacks via the \s-1TCP\s0 socket interface, every client
message is protected by an \s-1MD5\s0 digest. The \s-1MD5\s0 digest includes four
items:
  \- a seed that is sent to the client when the connection opens
  \- a sequence number that increments for each message
  \- a shared secret that is stored in \f(CW$Conf\fR{ServerMesgSecret}
  \- the message itself.
.Sp
The message is sent in plain text preceded by the \s-1MD5\s0 digest.  A
snooper can see the plain-text seed sent by BackupPC and plain-text
message from the client, but cannot construct a valid \s-1MD5\s0 digest since
the secret \f(CW$Conf\fR{ServerMesgSecret} is unknown.  A replay attack is
not possible since the seed changes on a per-connection and
per-message basis.
.ie n .IP "$Conf{MyPath} = '/bin';" 4
.el .IP "\f(CW$Conf\fR{MyPath} = '/bin';" 4
.IX Item "$Conf{MyPath} = '/bin';"
\&\s-1PATH\s0 setting for BackupPC.  An explicit value is necessary
for taint mode.  Value shouldn't matter too much since
all execs use explicit paths.  However, taint mode in perl
will complain if this directory is world writable.
.ie n .IP "$Conf{UmaskMode} = 027;" 4
.el .IP "\f(CW$Conf\fR{UmaskMode} = 027;" 4
.IX Item "$Conf{UmaskMode} = 027;"
Permission mask for directories and files created by BackupPC.
Default value prevents any access from group other, and prevents
group write.
.ie n .IP "$Conf{WakeupSchedule} = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];" 4
.el .IP "\f(CW$Conf\fR{WakeupSchedule} = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];" 4
.IX Item "$Conf{WakeupSchedule} = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];"
Times at which we wake up, check all the PCs, and schedule necessary
backups.  Times are measured in hours since midnight.  Can be
fractional if necessary (eg: 4.25 means 4:15am).
.Sp
If the hosts you are backing up are always connected to the network
you might have only one or two wakeups each night.  This will keep
the backup activity after hours.  On the other hand, if you are backing
up laptops that are only intermittently connected to the network you
will want to have frequent wakeups (eg: hourly) to maximize the chance
that each laptop is backed up.
.Sp
Examples:
.Sp
.Vb 2
\&    $Conf{WakeupSchedule} = [22.5];         # once per day at 10:30 pm.
\&    $Conf{WakeupSchedule} = [2,4,6,8,10,12,14,16,18,20,22];  # every 2 hours
.Ve
.Sp
The default value is every hour except midnight.
.Sp
The first entry of \f(CW$Conf\fR{WakeupSchedule} is when BackupPC_nightly is run.
You might want to re-arrange the entries in \f(CW$Conf\fR{WakeupSchedule}
(they don't have to be ascending) so that the first entry is when
you want BackupPC_nightly to run (eg: when you don't expect a lot
of regular backups to run).
.ie n .IP "$Conf{PoolV3Enabled} = 0;" 4
.el .IP "\f(CW$Conf\fR{PoolV3Enabled} = 0;" 4
.IX Item "$Conf{PoolV3Enabled} = 0;"
If a V3 pool exists (ie: an upgrade) set this to 1.  This causes the
V3 pool to be checked for matches if there are no matches in the V4
pool.
.Sp
For new installations, this should be set to 0.
.ie n .IP "$Conf{MaxBackups} = 4;" 4
.el .IP "\f(CW$Conf\fR{MaxBackups} = 4;" 4
.IX Item "$Conf{MaxBackups} = 4;"
Maximum number of simultaneous backups to run.  If there
are no user backup requests then this is the maximum number
of simultaneous backups.
.ie n .IP "$Conf{MaxUserBackups} = 4;" 4
.el .IP "\f(CW$Conf\fR{MaxUserBackups} = 4;" 4
.IX Item "$Conf{MaxUserBackups} = 4;"
Additional number of simultaneous backups that users can run.
As many as \f(CW$Conf\fR{MaxBackups} + \f(CW$Conf\fR{MaxUserBackups} requests can
run at the same time.
.ie n .IP "$Conf{MaxPendingCmds} = 15;" 4
.el .IP "\f(CW$Conf\fR{MaxPendingCmds} = 15;" 4
.IX Item "$Conf{MaxPendingCmds} = 15;"
Maximum number of pending link commands. New backups will only be
started if there are no more than \f(CW$Conf\fR{MaxPendingCmds} plus
\&\f(CW$Conf\fR{MaxBackups} number of pending link commands, plus running jobs.
This limit is to make sure BackupPC doesn't fall too far behind in
running BackupPC_link commands.
.ie n .IP "$Conf{CmdQueueNice} = 10;" 4
.el .IP "\f(CW$Conf\fR{CmdQueueNice} = 10;" 4
.IX Item "$Conf{CmdQueueNice} = 10;"
Nice level at which CmdQueue commands (eg: BackupPC_link and
BackupPC_nightly) are run at.
.ie n .IP "$Conf{MaxBackupPCNightlyJobs} = 2;" 4
.el .IP "\f(CW$Conf\fR{MaxBackupPCNightlyJobs} = 2;" 4
.IX Item "$Conf{MaxBackupPCNightlyJobs} = 2;"
How many BackupPC_nightly processes to run in parallel.
.Sp
Each night, at the first wakeup listed in \f(CW$Conf\fR{WakeupSchedule},
BackupPC_nightly is run.  Its job is to remove unneeded files
in the pool, ie: files that only have one link.  To avoid race
conditions, BackupPC_nightly and BackupPC_link cannot run at
the same time.  Starting in v3.0.0, BackupPC_nightly can run
concurrently with backups (BackupPC_dump).
.Sp
So to reduce the elapsed time, you might want to increase this
setting to run several BackupPC_nightly processes in parallel
(eg: 4, or even 8).
.ie n .IP "$Conf{BackupPCNightlyPeriod} = 1;" 4
.el .IP "\f(CW$Conf\fR{BackupPCNightlyPeriod} = 1;" 4
.IX Item "$Conf{BackupPCNightlyPeriod} = 1;"
How many days (runs) it takes BackupPC_nightly to traverse the
entire pool.  Normally this is 1, which means every night it runs,
it does traverse the entire pool removing unused pool files.
.Sp
Other valid values are 2, 4, 8, 16.  This causes BackupPC_nightly to
traverse 1/2, 1/4, 1/8 or 1/16th of the pool each night, meaning it
takes 2, 4, 8 or 16 days to completely traverse the pool.  The
advantage is that each night the running time of BackupPC_nightly
is reduced roughly in proportion, since the total job is split
over multiple days.  The disadvantage is that unused pool files
take longer to get deleted, which will slightly increase disk
usage.
.Sp
Note that even when \f(CW$Conf\fR{BackupPCNightlyPeriod} > 1, BackupPC_nightly
still runs every night.  It just does less work each time it runs.
.Sp
Examples:
.Sp
.Vb 1
\&   $Conf{BackupPCNightlyPeriod} = 1;   # entire pool is checked every night
\&
\&   $Conf{BackupPCNightlyPeriod} = 2;   # two days to complete pool check
\&                                       # (different half each night)
\&
\&   $Conf{BackupPCNightlyPeriod} = 4;   # four days to complete pool check
\&                                       # (different quarter each night)
.Ve
.ie n .IP "$Conf{PoolSizeNightlyUpdatePeriod} = 16;" 4
.el .IP "\f(CW$Conf\fR{PoolSizeNightlyUpdatePeriod} = 16;" 4
.IX Item "$Conf{PoolSizeNightlyUpdatePeriod} = 16;"
The total size of the files in the new V4 pool is updated every
night when BackupPC_nightly runs BackupPC_refCountUpdate.  Instead
of adding up the size of every pool file, it just updates the pool
size total when files are added to or removed form the pool.
.Sp
To make sure these cumulative pool file sizes stay accurate, we
recompute the V4 pool size for a portion of the pool each night
from scratch, ie: by checking every file in that portion of the
pool.
.Sp
\&\f(CW$Conf\fR{PoolSizeNightlyUpdatePeriod} sets how many nights it takes
to completely update the V4 pool size.  It can be set to:
  0:  never do a full refresh; simply maintain the cumulative sizes
      when files are added or deleted (fastest option)
  1:  recompute all  the V4 pool size every night (slowest option)
  2:  recompute 1/2  the V4 pool size every night
  4:  recompute 1/4  the V4 pool size every night
  8:  recompute 1/8  the V4 pool size every night
  16: recompute 1/16 the V4 pool size every night
      (2nd fastest option; ensures the pool files sizes
       stay accurate after a few day, in case the relative
       upgrades miss a file)
.ie n .IP "$Conf{MaxOldLogFiles} = 14;" 4
.el .IP "\f(CW$Conf\fR{MaxOldLogFiles} = 14;" 4
.IX Item "$Conf{MaxOldLogFiles} = 14;"
Maximum number of log files we keep around in log directory.
These files are aged nightly.  A setting of 14 means the log
directory will contain about 2 weeks of old log files, in
particular at most the files \s-1LOG, LOG.0, LOG.1, ... LOG.13
\&\s0(except today's \s-1LOG,\s0 these files will have a .z extension if
compression is on).
.Sp
If you decrease this number after BackupPC has been running for a
while you will have to manually remove the older log files.
.ie n .IP "$Conf{DfPath} = '';" 4
.el .IP "\f(CW$Conf\fR{DfPath} = '';" 4
.IX Item "$Conf{DfPath} = '';"
Full path to the df command.  Security caution: normal users
should not allowed to write to this file or directory.
.ie n .IP "$Conf{DfCmd} = '$dfPath $topDir';" 4
.el .IP "\f(CW$Conf\fR{DfCmd} = '$dfPath \f(CW$topDir\fR';" 4
.IX Item "$Conf{DfCmd} = '$dfPath $topDir';"
Command to run df.  The following variables are substituted at run-time:
.Sp
.Vb 2
\&  $dfPath      path to df ($Conf{DfPath})
\&  $topDir      top\-level BackupPC data directory
.Ve
.Sp
Note: all Cmds are executed directly without a shell, so the prog name
needs to be a full path and you can't include shell syntax like
redirection and pipes; put that in a script if you need it.
.ie n .IP "$Conf{SplitPath} = '';" 4
.el .IP "\f(CW$Conf\fR{SplitPath} = '';" 4
.IX Item "$Conf{SplitPath} = '';"
.PD 0
.ie n .IP "$Conf{ParPath} = '';" 4
.el .IP "\f(CW$Conf\fR{ParPath} = '';" 4
.IX Item "$Conf{ParPath} = '';"
.ie n .IP "$Conf{CatPath} = '';" 4
.el .IP "\f(CW$Conf\fR{CatPath} = '';" 4
.IX Item "$Conf{CatPath} = '';"
.ie n .IP "$Conf{GzipPath} = '';" 4
.el .IP "\f(CW$Conf\fR{GzipPath} = '';" 4
.IX Item "$Conf{GzipPath} = '';"
.ie n .IP "$Conf{Bzip2Path} = '';" 4
.el .IP "\f(CW$Conf\fR{Bzip2Path} = '';" 4
.IX Item "$Conf{Bzip2Path} = '';"
.PD
Full path to various commands for archiving
.ie n .IP "$Conf{DfMaxUsagePct} = 95;" 4
.el .IP "\f(CW$Conf\fR{DfMaxUsagePct} = 95;" 4
.IX Item "$Conf{DfMaxUsagePct} = 95;"
Maximum threshold for disk utilization on the _\|_TOPDIR_\|_ filesystem.
If the output from \f(CW$Conf\fR{DfPath} reports a percentage larger than
this number then no new regularly scheduled backups will be run.
However, user requested backups (which are usually incremental and
tend to be small) are still performed, independent of disk usage.
Also, currently running backups will not be terminated when the disk
usage exceeds this number.
.ie n .IP "$Conf{DHCPAddressRanges} = [];" 4
.el .IP "\f(CW$Conf\fR{DHCPAddressRanges} = [];" 4
.IX Item "$Conf{DHCPAddressRanges} = [];"
List of \s-1DHCP\s0 address ranges we search looking for PCs to backup.
This is an array of hashes for each class C address range.
This is only needed if hosts in the conf/hosts file have the
dhcp flag set.
.Sp
Examples:
.Sp
.Vb 10
\&   # to specify 192.10.10.20 to 192.10.10.250 as the DHCP address pool
\&   $Conf{DHCPAddressRanges} = [
\&       {
\&           ipAddrBase => \*(Aq192.10.10\*(Aq,
\&           first => 20,
\&           last  => 250,
\&       },
\&   ];
\&   # to specify two pools (192.10.10.20\-250 and 192.10.11.10\-50)
\&   $Conf{DHCPAddressRanges} = [
\&       {
\&           ipAddrBase => \*(Aq192.10.10\*(Aq,
\&           first => 20,
\&           last  => 250,
\&       },
\&       {
\&           ipAddrBase => \*(Aq192.10.11\*(Aq,
\&           first => 10,
\&           last  => 50,
\&       },
\&   ];
.Ve
.ie n .IP "$Conf{BackupPCUser} = '';" 4
.el .IP "\f(CW$Conf\fR{BackupPCUser} = '';" 4
.IX Item "$Conf{BackupPCUser} = '';"
The BackupPC user.
.ie n .IP "$Conf{TopDir} = '';" 4
.el .IP "\f(CW$Conf\fR{TopDir} = '';" 4
.IX Item "$Conf{TopDir} = '';"
.PD 0
.ie n .IP "$Conf{ConfDir} = '';" 4
.el .IP "\f(CW$Conf\fR{ConfDir} = '';" 4
.IX Item "$Conf{ConfDir} = '';"
.ie n .IP "$Conf{LogDir} = '';" 4
.el .IP "\f(CW$Conf\fR{LogDir} = '';" 4
.IX Item "$Conf{LogDir} = '';"
.ie n .IP "$Conf{RunDir} = '';" 4
.el .IP "\f(CW$Conf\fR{RunDir} = '';" 4
.IX Item "$Conf{RunDir} = '';"
.ie n .IP "$Conf{InstallDir} = '';" 4
.el .IP "\f(CW$Conf\fR{InstallDir} = '';" 4
.IX Item "$Conf{InstallDir} = '';"
.ie n .IP "$Conf{CgiDir} = '';" 4
.el .IP "\f(CW$Conf\fR{CgiDir} = '';" 4
.IX Item "$Conf{CgiDir} = '';"
.PD
Important installation directories:
.Sp
.Vb 9
\&  TopDir     \- where all the backup data is stored
\&  ConfDir    \- where the main config and hosts files resides
\&  LogDir     \- where log files and other transient information resides
\&  RunDir     \- where pid and sock files reside
\&  InstallDir \- where the bin, lib and doc installation dirs reside.
\&               Note: you cannot change this value since all the
\&               perl scripts include this path.  You must reinstall
\&               with configure.pl to change InstallDir.
\&  CgiDir     \- Apache CGI directory for BackupPC_Admin
.Ve
.Sp
Note: it is \s-1STRONGLY\s0 recommended that you don't change the
values here.  These are set at installation time and are here
for reference and are used during upgrades.
.Sp
Instead of changing TopDir here it is recommended that you use
a symbolic link to the new location, or mount the new BackupPC
store at the existing \f(CW$Conf\fR{TopDir} setting.
.ie n .IP "$Conf{BackupPCUserVerify} = 1;" 4
.el .IP "\f(CW$Conf\fR{BackupPCUserVerify} = 1;" 4
.IX Item "$Conf{BackupPCUserVerify} = 1;"
Whether BackupPC and the \s-1CGI\s0 script BackupPC_Admin verify that they
are really running as user \f(CW$Conf\fR{BackupPCUser}.  If this flag is set
and the effective user id (euid) differs from \f(CW$Conf\fR{BackupPCUser}
then both scripts exit with an error.  This catches cases where
BackupPC might be accidently started as root or the wrong user,
or if the \s-1CGI\s0 script is not installed correctly.
.ie n .IP "$Conf{HardLinkMax} = 31999;" 4
.el .IP "\f(CW$Conf\fR{HardLinkMax} = 31999;" 4
.IX Item "$Conf{HardLinkMax} = 31999;"
Maximum number of hardlinks supported by the \f(CW$TopDir\fR file system
that BackupPC uses.  Most linux or unix file systems should support
at least 32000 hardlinks per file, or 64000 in other cases.  If a pool
file already has this number of hardlinks, a new pool file is created
so that new hardlinks can be accommodated.  This limit will only
be hit if an identical file appears at least this number of times
across all the backups.
.ie n .IP "$Conf{PerlModuleLoad} = undef;" 4
.el .IP "\f(CW$Conf\fR{PerlModuleLoad} = undef;" 4
.IX Item "$Conf{PerlModuleLoad} = undef;"
Advanced option for asking BackupPC to load additional perl modules.
Can be a list (array ref) of module names to load at startup.
.ie n .IP "$Conf{ServerInitdPath} = '';" 4
.el .IP "\f(CW$Conf\fR{ServerInitdPath} = '';" 4
.IX Item "$Conf{ServerInitdPath} = '';"
.PD 0
.ie n .IP "$Conf{ServerInitdStartCmd} = '';" 4
.el .IP "\f(CW$Conf\fR{ServerInitdStartCmd} = '';" 4
.IX Item "$Conf{ServerInitdStartCmd} = '';"
.PD
Path to init.d script and command to use that script to start the
server from the \s-1CGI\s0 interface.  The following variables are substituted
at run-time:
.Sp
.Vb 3
\&  $sshPath           path to ssh ($Conf{SshPath})
\&  $serverHost        same as $Conf{ServerHost}
\&  $serverInitdPath   path to init.d script ($Conf{ServerInitdPath})
.Ve
.Sp
Example:
.Sp
\&\f(CW$Conf\fR{ServerInitdPath}     = '/etc/init.d/backuppc';
\&\f(CW$Conf\fR{ServerInitdStartCmd} = '$sshPath \-q \-x \-l root \f(CW$serverHost\fR'
                           . ' \f(CW$serverInitdPath\fR start'
                           . ' < /dev/null >& /dev/null';
.Sp
Note: all Cmds are executed directly without a shell, so the prog name
needs to be a full path and you can't include shell syntax like
redirection and pipes; put that in a script if you need it.
.SS "What to backup and when to do it"
.IX Subsection "What to backup and when to do it"
.ie n .IP "$Conf{FullPeriod} = 6.97;" 4
.el .IP "\f(CW$Conf\fR{FullPeriod} = 6.97;" 4
.IX Item "$Conf{FullPeriod} = 6.97;"
Minimum period in days between full backups. A full dump will only be
done if at least this much time has elapsed since the last full dump,
and at least \f(CW$Conf\fR{IncrPeriod} days has elapsed since the last
successful dump.
.Sp
Typically this is set slightly less than an integer number of days. The
time taken for the backup, plus the granularity of \f(CW$Conf\fR{WakeupSchedule}
will make the actual backup interval a bit longer.
.ie n .IP "$Conf{IncrPeriod} = 0.97;" 4
.el .IP "\f(CW$Conf\fR{IncrPeriod} = 0.97;" 4
.IX Item "$Conf{IncrPeriod} = 0.97;"
Minimum period in days between incremental backups (a user requested
incremental backup will be done anytime on demand).
.Sp
Typically this is set slightly less than an integer number of days. The
time taken for the backup, plus the granularity of \f(CW$Conf\fR{WakeupSchedule}
will make the actual backup interval a bit longer.
.ie n .IP "$Conf{FillCycle} = 0;" 4
.el .IP "\f(CW$Conf\fR{FillCycle} = 0;" 4
.IX Item "$Conf{FillCycle} = 0;"
In V4+, full/incremental backups are decoupled from whether the stored
backup is filled/unfilled.
.Sp
To mimic V3 behaviour, if \f(CW$Conf\fR{FillCycle} is set to zero then fill/unfilled
will continue to match full/incremental: full backups will remained filled,
and incremental backups will be unfilled.  (However, the most recent
backup is always filled, whether it is full or incremental.)  This is
the recommended setting to keep things simple: since the backup expiry
is actually done based on filled/unfilled (not full/incremental), keeping
them synched makes it easier to understand the expiry settings.
.Sp
If you plan to do incremental-only backups (ie: set FullPeriod to a very
large value), then you should set \f(CW$Conf\fR{FillCycle} to how often you
want a stored backup to be filled.  For example, if \f(CW$Conf\fR{FillCycle} is
set to 7, then every 7th backup will be filled (whether or not the
corresponding backup was a full or not).
.Sp
There are two reasons you will want a non-zero \f(CW$Conf\fR{FillCycle} setting
when you are only doing incrementals:
.Sp
.Vb 3
\&  \- a filled backup is a starting point for merging deltas when you restore
\&    or view backups.  So having periodic filled backups makes it more
\&    efficient to view or restore older backups.
\&
\&  \- more importantly, in V4+, deleting backups is done based on Fill/Unfilled,
\&    not whether the original backup was full/incremental.  If there aren\*(Aqt
\&    any filled backups (other than the most recent), then the FillKeepPeriod
\&    settings won\*(Aqt have any effect.
.Ve
.ie n .IP "$Conf{FullKeepCnt} = 1;" 4
.el .IP "\f(CW$Conf\fR{FullKeepCnt} = 1;" 4
.IX Item "$Conf{FullKeepCnt} = 1;"
Number of filled backups to keep.  Must be >= 1.
.Sp
Note: Starting in V4+, deleting backups is done based on Fill/Unfilled,
not whether the original backup was full/incremental.
reasons these parameters continue to be called FullKeepCnt, rather than
FilledKeepCnt.  If \f(CW$Conf\fR{FillCycle} is 0, then full backups continue
to be filled, so the terms are interchangeable.  For V3 backups,
the expiry settings have their original meanings.
.Sp
In the steady state, each time a full backup completes successfully
the oldest one is removed.  If this number is decreased, the
extra old backups will be removed.
.Sp
Exponential backup expiry is also supported.  This allows you to specify:
.Sp
.Vb 5
\&  \- num fulls to keep at intervals of 1 * $Conf{FillCycle}, followed by
\&  \- num fulls to keep at intervals of 2 * $Conf{FillCycle},
\&  \- num fulls to keep at intervals of 4 * $Conf{FillCycle},
\&  \- num fulls to keep at intervals of 8 * $Conf{FillCycle},
\&  \- num fulls to keep at intervals of 16 * $Conf{FillCycle},
.Ve
.Sp
and so on.  This works by deleting every other full as each expiry
boundary is crossed.  Note: if \f(CW$Conf\fR{FillCycle} is 0, then
\&\f(CW$Conf\fR{FullPeriod} is used instead in these calculations.
.Sp
Exponential expiry is specified using an array for \f(CW$Conf\fR{FullKeepCnt}:
.Sp
.Vb 1
\&  $Conf{FullKeepCnt} = [4, 2, 3];
.Ve
.Sp
Entry #n specifies how many fulls to keep at an interval of
2^n * \f(CW$Conf\fR{FillCycle} (ie: 1, 2, 4, 8, 16, 32, ...).
.Sp
The example above specifies keeping 4 of the most recent full backups
(1 week interval) two full backups at 2 week intervals, and 3 full
backups at 4 week intervals, eg:
.Sp
.Vb 9
\&   full 0 19 weeks old   \e
\&   full 1 15 weeks old    >\-\-\-  3 backups at 4 * $Conf{FillCycle}
\&   full 2 11 weeks old   /
\&   full 3  7 weeks old   \e_\|_\|_\|_  2 backups at 2 * $Conf{FillCycle}
\&   full 4  5 weeks old   /
\&   full 5  3 weeks old   \e
\&   full 6  2 weeks old    \e_\|_\|_  4 backups at 1 * $Conf{FillCycle}
\&   full 7  1 week old     /
\&   full 8  current       /
.Ve
.Sp
On a given week the spacing might be less than shown as each backup
ages through each expiry period.  For example, one week later, a
new full is completed and the oldest is deleted, giving:
.Sp
.Vb 9
\&   full 0 16 weeks old   \e
\&   full 1 12 weeks old    >\-\-\-  3 backups at 4 * $Conf{FillCycle}
\&   full 2  8 weeks old   /
\&   full 3  6 weeks old   \e_\|_\|_\|_  2 backups at 2 * $Conf{FillCycle}
\&   full 4  4 weeks old   /
\&   full 5  3 weeks old   \e
\&   full 6  2 weeks old    \e_\|_\|_  4 backups at 1 * $Conf{FillCycle}
\&   full 7  1 week old     /
\&   full 8  current       /
.Ve
.Sp
You can specify 0 as a count (except in the first entry), and the
array can be as long as you wish.  For example:
.Sp
.Vb 1
\&  $Conf{FullKeepCnt} = [4, 0, 4, 0, 0, 2];
.Ve
.Sp
This will keep 10 full dumps, 4 most recent at 1 * \f(CW$Conf\fR{FillCycle},
followed by 4 at an interval of 4 * \f(CW$Conf\fR{FillCycle} (approx 1 month
apart), and then 2 at an interval of 32 * \f(CW$Conf\fR{FillCycle} (approx
7\-8 months apart).
.Sp
Example: these two settings are equivalent and both keep just
the four most recent full dumps:
.Sp
.Vb 2
\&   $Conf{FullKeepCnt} = 4;
\&   $Conf{FullKeepCnt} = [4];
.Ve
.ie n .IP "$Conf{FullKeepCntMin} = 1;" 4
.el .IP "\f(CW$Conf\fR{FullKeepCntMin} = 1;" 4
.IX Item "$Conf{FullKeepCntMin} = 1;"
.PD 0
.ie n .IP "$Conf{FullAgeMax} = 90;" 4
.el .IP "\f(CW$Conf\fR{FullAgeMax} = 90;" 4
.IX Item "$Conf{FullAgeMax} = 90;"
.PD
Very old full backups are removed after \f(CW$Conf\fR{FullAgeMax} days.  However,
we keep at least \f(CW$Conf\fR{FullKeepCntMin} full backups no matter how old
they are.
.Sp
Note that \f(CW$Conf\fR{FullAgeMax} will be increased to \f(CW$Conf\fR{FullKeepCnt}
times \f(CW$Conf\fR{FillCycle} if \f(CW$Conf\fR{FullKeepCnt} specifies enough
full backups to exceed \f(CW$Conf\fR{FullAgeMax}.
.ie n .IP "$Conf{IncrKeepCnt} = 6;" 4
.el .IP "\f(CW$Conf\fR{IncrKeepCnt} = 6;" 4
.IX Item "$Conf{IncrKeepCnt} = 6;"
Number of incremental backups to keep.  Must be >= 1.
.Sp
Note: Starting in V4+, deleting backups is done based on Fill/Unfilled,
not whether the original backup was full/incremental.  For historical
reasons these parameters continue to be called IncrKeepCnt, rather than
UnfilledKeepCnt.  If \f(CW$Conf\fR{FillCycle} is 0, then incremental backups
continue to be unfilled, so the terms are interchangeable.  For V3 backups,
the expiry settings have their original meanings.
.Sp
In the steady state, each time an incr backup completes successfully
the oldest one is removed.  If this number is decreased, the
extra old backups will be removed.
.ie n .IP "$Conf{IncrKeepCntMin} = 1;" 4
.el .IP "\f(CW$Conf\fR{IncrKeepCntMin} = 1;" 4
.IX Item "$Conf{IncrKeepCntMin} = 1;"
.PD 0
.ie n .IP "$Conf{IncrAgeMax} = 30;" 4
.el .IP "\f(CW$Conf\fR{IncrAgeMax} = 30;" 4
.IX Item "$Conf{IncrAgeMax} = 30;"
.PD
Very old incremental backups are removed after \f(CW$Conf\fR{IncrAgeMax} days.
However, we keep at least \f(CW$Conf\fR{IncrKeepCntMin} incremental backups no
matter how old they are.
.ie n .IP "$Conf{BackupsDisable} = 0;" 4
.el .IP "\f(CW$Conf\fR{BackupsDisable} = 0;" 4
.IX Item "$Conf{BackupsDisable} = 0;"
Disable all full and incremental backups.  These settings are
useful for a client that is no longer being backed up
(eg: a retired machine), but you wish to keep the last
backups available for browsing or restoring to other machines.
.Sp
There are three values for \f(CW$Conf\fR{BackupsDisable}:
.Sp
.Vb 1
\&  0    Backups are enabled.
\&
\&  1    Don\*(Aqt do any regular backups on this client.  Manually
\&       requested backups (via the CGI interface) will still occur.
\&
\&  2    Don\*(Aqt do any backups on this client.  Manually requested
\&       backups (via the CGI interface) will be ignored.
.Ve
.Sp
In versions prior to 3.0 Backups were disabled by setting
\&\f(CW$Conf\fR{FullPeriod} to \-1 or \-2.
.ie n .IP "$Conf{RestoreInfoKeepCnt} = 10;" 4
.el .IP "\f(CW$Conf\fR{RestoreInfoKeepCnt} = 10;" 4
.IX Item "$Conf{RestoreInfoKeepCnt} = 10;"
Number of restore logs to keep.  BackupPC remembers information about
each restore request.  This number per client will be kept around before
the oldest ones are pruned.
.Sp
Note: files/dirs delivered via Zip or Tar downloads don't count as
restores.  Only the first restore option (where the files and dirs
are written to the host) count as restores that are logged.
.ie n .IP "$Conf{ArchiveInfoKeepCnt} = 10;" 4
.el .IP "\f(CW$Conf\fR{ArchiveInfoKeepCnt} = 10;" 4
.IX Item "$Conf{ArchiveInfoKeepCnt} = 10;"
Number of archive logs to keep.  BackupPC remembers information
about each archive request.  This number per archive client will
be kept around before the oldest ones are pruned.
.ie n .IP "$Conf{BackupFilesOnly} = undef;" 4
.el .IP "\f(CW$Conf\fR{BackupFilesOnly} = undef;" 4
.IX Item "$Conf{BackupFilesOnly} = undef;"
List of directories or files to backup.  If this is defined, only these
directories or files will be backed up.
.Sp
For Smb, only one of \f(CW$Conf\fR{BackupFilesExclude} and \f(CW$Conf\fR{BackupFilesOnly}
can be specified per share. If both are set for a particular share, then
\&\f(CW$Conf\fR{BackupFilesOnly} takes precedence and \f(CW$Conf\fR{BackupFilesExclude}
is ignored.
.Sp
This can be set to a string, an array of strings, or, in the case
of multiple shares, a hash of strings or arrays.  A hash is used
to give a list of directories or files to backup for each share
(the share name is the key).  If this is set to just a string or
array, and \f(CW$Conf\fR{SmbShareName} contains multiple share names, then
the setting is assumed to apply all shares.
.Sp
If a hash is used, a special key \*(L"*\*(R" means it applies to all
shares that don't have a specific entry.
.Sp
Examples:
.Sp
.Vb 11
\&   $Conf{BackupFilesOnly} = \*(Aq/myFiles\*(Aq;
\&   $Conf{BackupFilesOnly} = [\*(Aq/myFiles\*(Aq];     # same as first example
\&   $Conf{BackupFilesOnly} = [\*(Aq/myFiles\*(Aq, \*(Aq/important\*(Aq];
\&   $Conf{BackupFilesOnly} = {
\&      \*(Aqc\*(Aq => [\*(Aq/myFiles\*(Aq, \*(Aq/important\*(Aq],      # these are for \*(Aqc\*(Aq share
\&      \*(Aqd\*(Aq => [\*(Aq/moreFiles\*(Aq, \*(Aq/archive\*(Aq],      # these are for \*(Aqd\*(Aq share
\&   };
\&   $Conf{BackupFilesOnly} = {
\&      \*(Aqc\*(Aq => [\*(Aq/myFiles\*(Aq, \*(Aq/important\*(Aq],      # these are for \*(Aqc\*(Aq share
\&      \*(Aq*\*(Aq => [\*(Aq/myFiles\*(Aq, \*(Aq/important\*(Aq],      # these are other shares
\&   };
.Ve
.ie n .IP "$Conf{BackupFilesExclude} = undef;" 4
.el .IP "\f(CW$Conf\fR{BackupFilesExclude} = undef;" 4
.IX Item "$Conf{BackupFilesExclude} = undef;"
List of directories or files to exclude from the backup.  For Smb,
only one of \f(CW$Conf\fR{BackupFilesExclude} and \f(CW$Conf\fR{BackupFilesOnly}
can be specified per share.  If both are set for a particular share,
then \f(CW$Conf\fR{BackupFilesOnly} takes precedence and
\&\f(CW$Conf\fR{BackupFilesExclude} is ignored.
.Sp
This can be set to a string, an array of strings, or, in the case
of multiple shares, a hash of strings or arrays.  A hash is used
to give a list of directories or files to exclude for each share
(the share name is the key).  If this is set to just a string or
array, and \f(CW$Conf\fR{SmbShareName} contains multiple share names, then
the setting is assumed to apply to all shares.
.Sp
The exact behavior is determined by the underlying transport program,
smbclient or tar.  For smbclient the exlclude file list is passed into
the X option.  Simple shell wild-cards using \*(L"*\*(R" or \*(L"?\*(R" are allowed.
.Sp
For tar, if the exclude file contains a \*(L"/\*(R" it is assumed to be anchored
at the start of the string.  Since all the tar paths start with \*(L"./\*(R",
BackupPC prepends a \*(L".\*(R" if the exclude file starts with a \*(L"/\*(R".  Note
that \s-1GNU\s0 tar version >= 1.13.7 is required for the exclude option to
work correctly.  For linux or unix machines you should add
\&\*(L"/proc\*(R" to \f(CW$Conf\fR{BackupFilesExclude} unless you have specified
\&\-\-one\-file\-system in \f(CW$Conf\fR{TarClientCmd} or \-\-one\-file\-system in
\&\f(CW$Conf\fR{RsyncArgs}.  Also, for tar, do not use a trailing \*(L"/\*(R" in
the directory name: a trailing \*(L"/\*(R" causes the name to not match
and the directory will not be excluded.
.Sp
Users report that for smbclient you should specify a directory
followed by \*(L"/*\*(R", eg: \*(L"/proc/*\*(R", instead of just \*(L"/proc\*(R".
.Sp
\&\s-1FTP\s0 servers are traversed recursively so excluding directories will
also exclude its contents.  You can use the wildcard characters \*(L"*\*(R"
and \*(L"?\*(R" to define files for inclusion and exclusion.  Both
attributes \f(CW$Conf\fR{BackupFilesOnly} and \f(CW$Conf\fR{BackupFilesExclude} can
be defined for the same share.
.Sp
If a hash is used, a special key \*(L"*\*(R" means it applies to all
shares that don't have a specific entry.
.Sp
Examples:
.Sp
.Vb 11
\&   $Conf{BackupFilesExclude} = \*(Aq/temp\*(Aq;
\&   $Conf{BackupFilesExclude} = [\*(Aq/temp\*(Aq];     # same as first example
\&   $Conf{BackupFilesExclude} = [\*(Aq/temp\*(Aq, \*(Aq/winnt/tmp\*(Aq];
\&   $Conf{BackupFilesExclude} = {
\&      \*(Aqc\*(Aq => [\*(Aq/temp\*(Aq, \*(Aq/winnt/tmp\*(Aq],         # these are for \*(Aqc\*(Aq share
\&      \*(Aqd\*(Aq => [\*(Aq/junk\*(Aq, \*(Aq/dont_back_this_up\*(Aq], # these are for \*(Aqd\*(Aq share
\&   };
\&   $Conf{BackupFilesExclude} = {
\&      \*(Aqc\*(Aq => [\*(Aq/temp\*(Aq, \*(Aq/winnt/tmp\*(Aq],         # these are for \*(Aqc\*(Aq share
\&      \*(Aq*\*(Aq => [\*(Aq/junk\*(Aq, \*(Aq/dont_back_this_up\*(Aq], # these are for other shares
\&   };
.Ve
.ie n .IP "$Conf{BlackoutBadPingLimit} = 3;" 4
.el .IP "\f(CW$Conf\fR{BlackoutBadPingLimit} = 3;" 4
.IX Item "$Conf{BlackoutBadPingLimit} = 3;"
.PD 0
.ie n .IP "$Conf{BlackoutGoodCnt} = 7;" 4
.el .IP "\f(CW$Conf\fR{BlackoutGoodCnt} = 7;" 4
.IX Item "$Conf{BlackoutGoodCnt} = 7;"
.PD
PCs that are always or often on the network can be backed up after
hours, to reduce \s-1PC,\s0 network and server load during working hours. For
each \s-1PC\s0 a count of consecutive good pings is maintained. Once a \s-1PC\s0 has
at least \f(CW$Conf\fR{BlackoutGoodCnt} consecutive good pings it is subject
to \*(L"blackout\*(R" and not backed up during hours and days specified by
\&\f(CW$Conf\fR{BlackoutPeriods}.
.Sp
To allow for periodic rebooting of a \s-1PC\s0 or other brief periods when a
\&\s-1PC\s0 is not on the network, a number of consecutive bad pings is allowed
before the good ping count is reset. This parameter is
\&\f(CW$Conf\fR{BlackoutBadPingLimit}.
.Sp
Note that bad and good pings don't occur with the same interval. If a
machine is always on the network, it will only be pinged roughly once
every \f(CW$Conf\fR{IncrPeriod} (eg: once per day). So a setting for
\&\f(CW$Conf\fR{BlackoutGoodCnt} of 7 means it will take around 7 days for a
machine to be subject to blackout. On the other hand, if a ping is
failed, it will be retried roughly every time BackupPC wakes up, eg,
every one or two hours. So a setting for \f(CW$Conf\fR{BlackoutBadPingLimit} of
3 means that the \s-1PC\s0 will lose its blackout status after 3\-6 hours of
unavailability.
.Sp
To disable the blackout feature set \f(CW$Conf\fR{BlackoutGoodCnt} to a negative
value.  A value of 0 will make all machines subject to blackout.  But
if you don't want to do any backups during the day it would be easier
to just set \f(CW$Conf\fR{WakeupSchedule} to a restricted schedule.
.ie n .IP "$Conf{BlackoutPeriods} = [ ... ];" 4
.el .IP "\f(CW$Conf\fR{BlackoutPeriods} = [ ... ];" 4
.IX Item "$Conf{BlackoutPeriods} = [ ... ];"
One or more blackout periods can be specified.  If a client is
subject to blackout then no regular (non-manual) backups will
be started during any of these periods.  hourBegin and hourEnd
specify hours fro midnight and weekDays is a list of days of
the week where 0 is Sunday, 1 is Monday etc.
.Sp
For example:
.Sp
.Vb 7
\&   $Conf{BlackoutPeriods} = [
\&        {
\&            hourBegin =>  7.0,
\&            hourEnd   => 19.5,
\&            weekDays  => [1, 2, 3, 4, 5],
\&        },
\&   ];
.Ve
.Sp
specifies one blackout period from 7:00am to 7:30pm local time
on Mon-Fri.
.Sp
The blackout period can also span midnight by setting
hourBegin > hourEnd, eg:
.Sp
.Vb 12
\&   $Conf{BlackoutPeriods} = [
\&        {
\&            hourBegin =>  7.0,
\&            hourEnd   => 19.5,
\&            weekDays  => [1, 2, 3, 4, 5],
\&        },
\&        {
\&            hourBegin => 23,
\&            hourEnd   =>  5,
\&            weekDays  => [5, 6],
\&        },
\&   ];
.Ve
.Sp
This specifies one blackout period from 7:00am to 7:30pm local time
on Mon-Fri, and a second period from 11pm to 5am on Friday and
Saturday night.
.ie n .IP "$Conf{BackupZeroFilesIsFatal} = 1;" 4
.el .IP "\f(CW$Conf\fR{BackupZeroFilesIsFatal} = 1;" 4
.IX Item "$Conf{BackupZeroFilesIsFatal} = 1;"
A backup of a share that has zero files is considered fatal. This is
used to catch miscellaneous Xfer errors that result in no files being
backed up.  If you have shares that might be empty (and therefore an
empty backup is valid) you should set this flag to 0.
.SS "How to backup a client"
.IX Subsection "How to backup a client"
.ie n .IP "$Conf{XferMethod} = 'smb';" 4
.el .IP "\f(CW$Conf\fR{XferMethod} = 'smb';" 4
.IX Item "$Conf{XferMethod} = 'smb';"
What transport method to use to backup each host.  If you have
a mixed set of WinXX and linux/unix hosts you will need to override
this in the per-PC config.pl.
.Sp
The valid values are:
.Sp
.Vb 2
\&  \- \*(Aqsmb\*(Aq:     backup and restore via smbclient and the SMB protocol.
\&               Easiest choice for WinXX.
\&
\&  \- \*(Aqrsync\*(Aq:   backup and restore via rsync (via rsh or ssh).
\&               Best choice for linux/unix.  Good choice also for WinXX.
\&
\&  \- \*(Aqrsyncd\*(Aq:  backup and restore via rsync daemon on the client.
\&               Best choice for linux/unix if you have rsyncd running on
\&               the client.  Good choice also for WinXX.
\&
\&  \- \*(Aqtar\*(Aq:    backup and restore via tar, tar over ssh, rsh or nfs.
\&              Good choice for linux/unix.
\&
\&  \- \*(Aqarchive\*(Aq: host is a special archive host.  Backups are not done.
\&               An archive host is used to archive other host\*(Aqs backups
\&               to permanent media, such as tape, CDR or DVD.
.Ve
.ie n .IP "$Conf{XferLogLevel} = 1;" 4
.el .IP "\f(CW$Conf\fR{XferLogLevel} = 1;" 4
.IX Item "$Conf{XferLogLevel} = 1;"
Level of verbosity in Xfer log files.  0 means be quiet, 1 will give
will give one line per file, 2 will also show skipped files on
incrementals, higher values give more output.
.ie n .IP "$Conf{ClientCharset} = '';" 4
.el .IP "\f(CW$Conf\fR{ClientCharset} = '';" 4
.IX Item "$Conf{ClientCharset} = '';"
Filename charset encoding on the client.  BackupPC uses utf8
on the server for filename encoding.  If this is empty, then
utf8 is assumed and client filenames will not be modified.
If set to a different encoding then filenames will converted
to/from utf8 automatically during backup and restore.
.Sp
If the file names displayed in the browser (eg: accents or special
characters) don't look right then it is likely you haven't set
\&\f(CW$Conf\fR{ClientCharset} correctly.
.Sp
If you are using smbclient on a WinXX machine, smbclient will convert
to the \*(L"unix charset\*(R" setting in smb.conf.  The default is utf8,
in which case leave \f(CW$Conf\fR{ClientCharset} empty since smbclient does
the right conversion.
.Sp
If you are using rsync on a WinXX machine then it does no conversion.
A typical WinXX encoding for latin1/western europe is 'cp1252',
so in this case set \f(CW$Conf\fR{ClientCharset} to 'cp1252'.
.Sp
On a linux or unix client, run \*(L"locale charmap\*(R" to see the client's
charset.  Set \f(CW$Conf\fR{ClientCharset} to this value.  A typical value
for english/US is '\s-1ISO\-8859\-1\s0'.
.Sp
Do \*(L"perldoc Encode::Supported\*(R" to see the list of possible charset
values.  The \s-1FAQ\s0 at http://www.cl.cam.ac.uk/~mgk25/unicode.html
is excellent, and http://czyborra.com/charsets/iso8859.html
provides more information on the iso\-8859 charsets.
.ie n .IP "$Conf{ClientCharsetLegacy} = 'iso\-8859\-1';" 4
.el .IP "\f(CW$Conf\fR{ClientCharsetLegacy} = 'iso\-8859\-1';" 4
.IX Item "$Conf{ClientCharsetLegacy} = 'iso-8859-1';"
Prior to 3.x no charset conversion was done by BackupPC.  Backups were
stored in what ever charset the XferMethod provided \- typically utf8
for smbclient and the client's locale settings for rsync and tar (eg:
cp1252 for rsync on WinXX and perhaps iso\-8859\-1 with rsync on linux).
This setting tells BackupPC the charset that was used to store file
names in old backups taken with BackupPC 2.x, so that non-ascii file
names in old backups can be viewed and restored.
.SS "Samba Configuration"
.IX Subsection "Samba Configuration"
.ie n .IP "$Conf{SmbShareName} = 'C$';" 4
.el .IP "\f(CW$Conf\fR{SmbShareName} = 'C$';" 4
.IX Item "$Conf{SmbShareName} = 'C$';"
Name of the host share that is backed up when using \s-1SMB. \s0 This can be a
string or an array of strings if there are multiple shares per host.
Examples:
.Sp
.Vb 2
\&  $Conf{SmbShareName} = \*(Aqc\*(Aq;          # backup \*(Aqc\*(Aq share
\&  $Conf{SmbShareName} = [\*(Aqc\*(Aq, \*(Aqd\*(Aq];   # backup \*(Aqc\*(Aq and \*(Aqd\*(Aq shares
.Ve
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'smb'.
.ie n .IP "$Conf{SmbShareUserName} = '';" 4
.el .IP "\f(CW$Conf\fR{SmbShareUserName} = '';" 4
.IX Item "$Conf{SmbShareUserName} = '';"
Smbclient share user name.  This is passed to smbclient's \-U argument.
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'smb'.
.ie n .IP "$Conf{SmbSharePasswd} = '';" 4
.el .IP "\f(CW$Conf\fR{SmbSharePasswd} = '';" 4
.IX Item "$Conf{SmbSharePasswd} = '';"
Smbclient share password.  This is passed to smbclient via its \s-1PASSWD\s0
environment variable.  There are several ways you can tell BackupPC
the smb share password.  In each case you should be very careful about
security.  If you put the password here, make sure that this file is
not readable by regular users!  See the \*(L"Setting up config.pl\*(R" section
in the documentation for more information.
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'smb'.
.ie n .IP "$Conf{SmbClientPath} = '';" 4
.el .IP "\f(CW$Conf\fR{SmbClientPath} = '';" 4
.IX Item "$Conf{SmbClientPath} = '';"
Full path for smbclient. Security caution: normal users should not
allowed to write to this file or directory.
.Sp
smbclient is from the Samba distribution. smbclient is used to
actually extract the incremental or full dump of the share filesystem
from the \s-1PC.\s0
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'smb'.
.ie n .IP "$Conf{SmbClientFullCmd} = '$smbClientPath \e\e\e\e$host\e\e$shareName' ..." 4
.el .IP "\f(CW$Conf\fR{SmbClientFullCmd} = '$smbClientPath \e\e\e\e$host\e\e$shareName' ..." 4
.IX Item "$Conf{SmbClientFullCmd} = '$smbClientPath $host$shareName' ..."
Command to run smbclient for a full dump.
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'smb'.
.Sp
The following variables are substituted at run-time:
.Sp
.Vb 9
\&   $smbClientPath   same as $Conf{SmbClientPath}
\&   $host            host to backup/restore
\&   $hostIP          host IP address
\&   $shareName       share name
\&   $userName        user name
\&   $fileList        list of files to backup (based on exclude/include)
\&   $I_option        optional \-I option to smbclient
\&   $X_option        exclude option (if $fileList is an exclude list)
\&   $timeStampFile   start time for incremental dump
.Ve
.Sp
Note: all Cmds are executed directly without a shell, so the prog name
needs to be a full path and you can't include shell syntax like
redirection and pipes; put that in a script if you need it.
.ie n .IP "$Conf{SmbClientIncrCmd} = '$smbClientPath \e\e\e\e$host\e\e$shareName' ..." 4
.el .IP "\f(CW$Conf\fR{SmbClientIncrCmd} = '$smbClientPath \e\e\e\e$host\e\e$shareName' ..." 4
.IX Item "$Conf{SmbClientIncrCmd} = '$smbClientPath $host$shareName' ..."
Command to run smbclient for an incremental dump.
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'smb'.
.Sp
Same variable substitutions are applied as \f(CW$Conf\fR{SmbClientFullCmd}.
.Sp
Note: all Cmds are executed directly without a shell, so the prog name
needs to be a full path and you can't include shell syntax like
redirection and pipes; put that in a script if you need it.
.ie n .IP "$Conf{SmbClientRestoreCmd} = '$smbClientPath \e\e\e\e$host\e\e$shareName' ..." 4
.el .IP "\f(CW$Conf\fR{SmbClientRestoreCmd} = '$smbClientPath \e\e\e\e$host\e\e$shareName' ..." 4
.IX Item "$Conf{SmbClientRestoreCmd} = '$smbClientPath $host$shareName' ..."
Command to run smbclient for a restore.
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'smb'.
.Sp
Same variable substitutions are applied as \f(CW$Conf\fR{SmbClientFullCmd}.
.Sp
If your smb share is read-only then direct restores will fail.
You should set \f(CW$Conf\fR{SmbClientRestoreCmd} to undef and the
corresponding \s-1CGI\s0 restore option will be removed.
.Sp
Note: all Cmds are executed directly without a shell, so the prog name
needs to be a full path and you can't include shell syntax like
redirection and pipes; put that in a script if you need it.
.SS "Tar Configuration"
.IX Subsection "Tar Configuration"
.ie n .IP "$Conf{TarShareName} = '/';" 4
.el .IP "\f(CW$Conf\fR{TarShareName} = '/';" 4
.IX Item "$Conf{TarShareName} = '/';"
Which host directories to backup when using tar transport.  This can be a
string or an array of strings if there are multiple directories to
backup per host.  Examples:
.Sp
.Vb 3
\&  $Conf{TarShareName} = \*(Aq/\*(Aq;                    # backup everything
\&  $Conf{TarShareName} = \*(Aq/home\*(Aq;                # only backup /home
\&  $Conf{TarShareName} = [\*(Aq/home\*(Aq, \*(Aq/src\*(Aq];      # backup /home and /src
.Ve
.Sp
The fact this parameter is called 'TarShareName' is for historical
consistency with the Smb transport options.  You can use any valid
directory on the client: there is no need for it to correspond to
any Smb share or device mount point.
.Sp
Note also that you can also use \f(CW$Conf\fR{BackupFilesOnly} to specify
a specific list of directories to backup.  It's more efficient to
use this option instead of \f(CW$Conf\fR{TarShareName} since a new tar is
run for each entry in \f(CW$Conf\fR{TarShareName}.
.Sp
On the other hand, if you add \-\-one\-file\-system to \f(CW$Conf\fR{TarClientCmd}
you can backup each file system separately, which makes restoring one
bad file system easier.  In this case you would list all of the mount
points here, since you can't get the same result with
\&\f(CW$Conf\fR{BackupFilesOnly}:
.Sp
.Vb 1
\&    $Conf{TarShareName} = [\*(Aq/\*(Aq, \*(Aq/var\*(Aq, \*(Aq/data\*(Aq, \*(Aq/boot\*(Aq];
.Ve
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'tar'.
.ie n .IP "$Conf{TarClientCmd} = '$sshPath \-q \-x \-n \-l root $host' ..." 4
.el .IP "\f(CW$Conf\fR{TarClientCmd} = '$sshPath \-q \-x \-n \-l root \f(CW$host\fR' ..." 4
.IX Item "$Conf{TarClientCmd} = '$sshPath -q -x -n -l root $host' ..."
Command to run tar on the client.  \s-1GNU\s0 tar is required.  You will
need to fill in the correct paths for ssh2 on the local host (server)
and \s-1GNU\s0 tar on the client.  Security caution: normal users should not
allowed to write to these executable files or directories.
.Sp
\&\f(CW$Conf\fR{TarClientCmd} is appended with with either \f(CW$Conf\fR{TarFullArgs} or
\&\f(CW$Conf\fR{TarIncrArgs} to create the final command that is run.
.Sp
See the documentation for more information about setting up ssh2 keys.
.Sp
If you plan to use \s-1NFS\s0 then tar just runs locally and ssh2 is not needed.
For example, assuming the client filesystem is mounted below /mnt/hostName,
you could use something like:
.Sp
.Vb 2
\&   $Conf{TarClientCmd} = \*(Aq$tarPath \-c \-v \-f \- \-C /mnt/$host/$shareName\*(Aq
\&                       . \*(Aq \-\-totals\*(Aq;
.Ve
.Sp
In the case of \s-1NFS\s0 or rsh you need to make sure BackupPC's privileges
are sufficient to read all the files you want to backup.  Also, you
will probably want to add \*(L"/proc\*(R" to \f(CW$Conf\fR{BackupFilesExclude}.
.Sp
The following variables are substituted at run-time:
.Sp
.Vb 7
\&  $host        host name
\&  $hostIP      host\*(Aqs IP address
\&  $incrDate    newer\-than date for incremental backups
\&  $shareName   share name to backup (ie: top\-level directory path)
\&  $fileList    specific files to backup or exclude
\&  $tarPath     same as $Conf{TarClientPath}
\&  $sshPath     same as $Conf{SshPath}
.Ve
.Sp
If a variable is followed by a \*(L"+\*(R" it is shell escaped.  This is
necessary for the command part of ssh or rsh, since it ends up
getting passed through the shell.
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'tar'.
.Sp
Note: all Cmds are executed directly without a shell, so the prog name
needs to be a full path and you can't include shell syntax like
redirection and pipes; put that in a script if you need it.
.ie n .IP "$Conf{TarFullArgs} = '$fileList+';" 4
.el .IP "\f(CW$Conf\fR{TarFullArgs} = '$fileList+';" 4
.IX Item "$Conf{TarFullArgs} = '$fileList+';"
Extra tar arguments for full backups.  Several variables are substituted at
run-time.  See \f(CW$Conf\fR{TarClientCmd} for the list of variable substitutions.
.Sp
If you are running tar locally (ie: without rsh or ssh) then remove the
\&\*(L"+\*(R" so that the argument is no longer shell escaped.
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'tar'.
.ie n .IP "$Conf{TarIncrArgs} = '\-\-newer=$incrDate+ $fileList+';" 4
.el .IP "\f(CW$Conf\fR{TarIncrArgs} = '\-\-newer=$incrDate+ \f(CW$fileList\fR+';" 4
.IX Item "$Conf{TarIncrArgs} = '--newer=$incrDate+ $fileList+';"
Extra tar arguments for incr backups.  Several variables are substituted at
run-time.  See \f(CW$Conf\fR{TarClientCmd} for the list of variable substitutions.
.Sp
Note that \s-1GNU\s0 tar has several methods for specifying incremental backups,
including:
.Sp
.Vb 5
\&  \-\-newer\-mtime $incrDate+
\&         This causes a file to be included if the modification time is
\&         later than $incrDate (meaning its contents might have changed).
\&         But changes in the ownership or modes will not qualify the
\&         file to be included in an incremental.
\&
\&  \-\-newer=$incrDate+
\&         This causes the file to be included if any attribute of the
\&         file is later than $incrDate, meaning either attributes or
\&         the modification time.  This is the default method.  Do
\&         not use \-\-atime\-preserve in $Conf{TarClientCmd} above,
\&         otherwise resetting the atime (access time) counts as an
\&         attribute change, meaning the file will always be included
\&         in each new incremental dump.
.Ve
.Sp
If you are running tar locally (ie: without rsh or ssh) then remove the
\&\*(L"+\*(R" so that the argument is no longer shell escaped.
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'tar'.
.ie n .IP "$Conf{TarClientRestoreCmd} = '$sshPath \-q \-x \-l root $host' ..." 4
.el .IP "\f(CW$Conf\fR{TarClientRestoreCmd} = '$sshPath \-q \-x \-l root \f(CW$host\fR' ..." 4
.IX Item "$Conf{TarClientRestoreCmd} = '$sshPath -q -x -l root $host' ..."
Full command to run tar for restore on the client.  \s-1GNU\s0 tar is required.
This can be the same as \f(CW$Conf\fR{TarClientCmd}, with tar's \-c replaced by \-x
and ssh's \-n removed.
.Sp
See \f(CW$Conf\fR{TarClientCmd} for full details.
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = \*(L"tar\*(R".
.Sp
If you want to disable direct restores using tar, you should set
\&\f(CW$Conf\fR{TarClientRestoreCmd} to undef and the corresponding \s-1CGI\s0
restore option will be removed.
.Sp
Note: all Cmds are executed directly without a shell, so the prog name
needs to be a full path and you can't include shell syntax like
redirection and pipes; put that in a script if you need it.
.ie n .IP "$Conf{TarClientPath} = '';" 4
.el .IP "\f(CW$Conf\fR{TarClientPath} = '';" 4
.IX Item "$Conf{TarClientPath} = '';"
Full path for tar on the client. Security caution: normal users should not
allowed to write to this file or directory.
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'tar'.
.SS "Rsync/Rsyncd Configuration"
.IX Subsection "Rsync/Rsyncd Configuration"
.ie n .IP "$Conf{RsyncClientPath} = '';" 4
.el .IP "\f(CW$Conf\fR{RsyncClientPath} = '';" 4
.IX Item "$Conf{RsyncClientPath} = '';"
Path to rsync executable on the client.  If it is set, it is passed to
to rsync_bpc using the \-\-rsync\-path option.  You can also add sudo,
for example:
.Sp
.Vb 1
\&      $Conf{RsyncClientPath} = \*(Aqsudo /usr/bin/rsync\*(Aq;
.Ve
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'rsync'.
.ie n .IP "$Conf{RsyncBackupPCPath} = """";" 4
.el .IP "\f(CW$Conf\fR{RsyncBackupPCPath} = ``'';" 4
.IX Item "$Conf{RsyncBackupPCPath} = """";"
Full path to rsync_bpc on the server.  Rsync_bpc is the customized
version of rsync that is used on the server for rsync and rsyncd
transfers.
.ie n .IP "$Conf{RsyncSshArgs} = [ ... ];" 4
.el .IP "\f(CW$Conf\fR{RsyncSshArgs} = [ ... ];" 4
.IX Item "$Conf{RsyncSshArgs} = [ ... ];"
Ssh srguments for rsync to run ssh to connec to the client.
Rather than permit root ssh on the client, it is more secure
to just allow ssh via a low-privileged user, and use sudo
in \f(CW$Conf\fR{RsyncClientPath}.
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'rsync'.
.ie n .IP "$Conf{RsyncShareName} = '/';" 4
.el .IP "\f(CW$Conf\fR{RsyncShareName} = '/';" 4
.IX Item "$Conf{RsyncShareName} = '/';"
Share name to backup.  For \f(CW$Conf\fR{XferMethod} = \*(L"rsync\*(R" this should
be a file system path, eg '/' or '/home'.
.Sp
For \f(CW$Conf\fR{XferMethod} = \*(L"rsyncd\*(R" this should be the name of the module
to backup (ie: the name from /etc/rsynd.conf).
.Sp
This can also be a list of multiple file system paths or modules.
For example, by adding \-\-one\-file\-system to \f(CW$Conf\fR{RsyncArgs} you
can backup each file system separately, which makes restoring one
bad file system easier.  In this case you would list all of the mount
points:
.Sp
.Vb 1
\&    $Conf{RsyncShareName} = [\*(Aq/\*(Aq, \*(Aq/var\*(Aq, \*(Aq/data\*(Aq, \*(Aq/boot\*(Aq];
.Ve
.ie n .IP "$Conf{RsyncdClientPort} = 873;" 4
.el .IP "\f(CW$Conf\fR{RsyncdClientPort} = 873;" 4
.IX Item "$Conf{RsyncdClientPort} = 873;"
Rsync daemon port on the client, for \f(CW$Conf\fR{XferMethod} = \*(L"rsyncd\*(R".
.ie n .IP "$Conf{RsyncdUserName} = '';" 4
.el .IP "\f(CW$Conf\fR{RsyncdUserName} = '';" 4
.IX Item "$Conf{RsyncdUserName} = '';"
Rsync daemon user name on client, for \f(CW$Conf\fR{XferMethod} = \*(L"rsyncd\*(R".
The user name and password are stored on the client in whatever file
the \*(L"secrets file\*(R" parameter in rsyncd.conf points to
(eg: /etc/rsyncd.secrets).
.ie n .IP "$Conf{RsyncdPasswd} = '';" 4
.el .IP "\f(CW$Conf\fR{RsyncdPasswd} = '';" 4
.IX Item "$Conf{RsyncdPasswd} = '';"
Rsync daemon user name on client, for \f(CW$Conf\fR{XferMethod} = \*(L"rsyncd\*(R".
The user name and password are stored on the client in whatever file
the \*(L"secrets file\*(R" parameter in rsyncd.conf points to
(eg: /etc/rsyncd.secrets).
.ie n .IP "$Conf{RsyncFullArgsExtra} = [ ... ];" 4
.el .IP "\f(CW$Conf\fR{RsyncFullArgsExtra} = [ ... ];" 4
.IX Item "$Conf{RsyncFullArgsExtra} = [ ... ];"
Additional arguments for a full rsync or rsyncd backup.
.Sp
The \-\-checksum argument causes the client to send full-file checksum
for every file (meaning the client reads every file and computes the
checksum, which is sent with the file list).  On the server, rsync_bpc
will skip any files that have a matching full-file checksum, and size,
mtime and number of hardlinks.  Any file that has different attributes
will be updating using the block rsync algorithm.
.Sp
In V3, full backups applied the block rsync algorithm to every file,
which is a lot slower but a bit more conservative.  To get that
behavior, replace \-\-checksum with \-\-ignore\-times.
.ie n .IP "$Conf{RsyncArgs} = [ ... ];" 4
.el .IP "\f(CW$Conf\fR{RsyncArgs} = [ ... ];" 4
.IX Item "$Conf{RsyncArgs} = [ ... ];"
Arguments to rsync for backup.  Do not edit the first set unless you
have a good understanding of rsync options.
.ie n .IP "$Conf{RsyncArgsExtra} = [];" 4
.el .IP "\f(CW$Conf\fR{RsyncArgsExtra} = [];" 4
.IX Item "$Conf{RsyncArgsExtra} = [];"
Additional arguments added to RsyncArgs.  This can be used in
conbination with \f(CW$Conf\fR{RsyncArgs} to allow customization of
the rsync arguments on a part-client basis.  The standard
arguments go in \f(CW$Conf\fR{RsyncArgs} and \f(CW$Conf\fR{RsyncArgsExtra}
can be set on a per-client basis.
.Sp
Examples of additional arguments that should work are \-\-exclude/\-\-include,
eg:
.Sp
.Vb 6
\&    $Conf{RsyncArgsExtra} = [
\&          \*(Aq\-\-exclude\*(Aq, \*(Aq/proc\*(Aq,
\&          \*(Aq\-\-exclude\*(Aq, \*(Aq*.tmp\*(Aq,
\&          \*(Aq\-\-acls\*(Aq,
\&          \*(Aq\-\-xattrs\*(Aq,
\&    ];
.Ve
.Sp
Both \f(CW$Conf\fR{RsyncArgs} and \f(CW$Conf\fR{RsyncArgsExtra} are subject
to the following variable substitutions:
.Sp
.Vb 5
\&       $client       client name being backed up
\&       $host         host name (could be different from client name if
\&                                $Conf{ClientNameAlias} is set)
\&       $hostIP       IP address of host
\&       $confDir      configuration directory path
.Ve
.Sp
This allows settings of the form:
.Sp
.Vb 3
\&    $Conf{RsyncArgsExtra} = [
\&            \*(Aq\-\-exclude\-from=$confDir/pc/$host.exclude\*(Aq,
\&    ];
.Ve
.ie n .IP "$Conf{RsyncRestoreArgs} = [ ... ];" 4
.el .IP "\f(CW$Conf\fR{RsyncRestoreArgs} = [ ... ];" 4
.IX Item "$Conf{RsyncRestoreArgs} = [ ... ];"
Arguments to rsync for restore.  Do not edit the first set unless you
have a thorough understanding of how File::RsyncP works.
.Sp
If you want to disable direct restores using rsync (eg: is the module
is read-only), you should set \f(CW$Conf\fR{RsyncRestoreArgs} to undef and
the corresponding \s-1CGI\s0 restore option will be removed.
.Sp
\&\f(CW$Conf\fR{RsyncRestoreArgs} is subject to the following variable
substitutions:
.Sp
.Vb 5
\&       $client       client name being backed up
\&       $host         host name (could be different from client name if
\&                                $Conf{ClientNameAlias} is set)
\&       $hostIP       IP address of host
\&       $confDir      configuration directory path
.Ve
.Sp
Note: \f(CW$Conf\fR{RsyncArgsExtra} doesn't apply to \f(CW$Conf\fR{RsyncRestoreArgs}.
.SS "\s-1FTP\s0 Configuration"
.IX Subsection "FTP Configuration"
.ie n .IP "$Conf{FtpShareName} = '';" 4
.el .IP "\f(CW$Conf\fR{FtpShareName} = '';" 4
.IX Item "$Conf{FtpShareName} = '';"
Which host directories to backup when using \s-1FTP. \s0 This can be a
string or an array of strings if there are multiple shares per host.
.Sp
This value must be specified in one of two ways: either as a
subdirectory of the 'share root' on the server, or as the absolute
path of the directory.
.Sp
In the following example, if the directory /home/username is the
root share of the ftp server with the given username, the following
two values will back up the same directory:
.Sp
.Vb 2
\&   $Conf{FtpShareName} = \*(Aqwww\*(Aq;                # www directory
\&   $Conf{FtpShareName} = \*(Aq/home/username/www\*(Aq; # same directory
.Ve
.Sp
Path resolution is not supported; i.e.; you may not have an ftp
share path defined as '../otheruser' or '~/games'.
.Sp
.Vb 1
\& Multiple shares may also be specified, as with other protocols:
\&
\&   $Conf{FtpShareName} = [ \*(Aqwww\*(Aq,
\&                           \*(Aqbin\*(Aq,
\&                           \*(Aqconfig\*(Aq ];
.Ve
.Sp
Note also that you can also use \f(CW$Conf\fR{BackupFilesOnly} to specify
a specific list of directories to backup.  It's more efficient to
use this option instead of \f(CW$Conf\fR{FtpShareName} since a new tar is
run for each entry in \f(CW$Conf\fR{FtpShareName}.
.Sp
This setting only matters if \f(CW$Conf\fR{XferMethod} = 'ftp'.
.ie n .IP "$Conf{FtpUserName} = '';" 4
.el .IP "\f(CW$Conf\fR{FtpUserName} = '';" 4
.IX Item "$Conf{FtpUserName} = '';"
\&\s-1FTP\s0 user name.  This is used to log into the server.
.Sp
This setting is used only if \f(CW$Conf\fR{XferMethod} = 'ftp'.
.ie n .IP "$Conf{FtpPasswd} = '';" 4
.el .IP "\f(CW$Conf\fR{FtpPasswd} = '';" 4
.IX Item "$Conf{FtpPasswd} = '';"
\&\s-1FTP\s0 user password.  This is used to log into the server.
.Sp
This setting is used only if \f(CW$Conf\fR{XferMethod} = 'ftp'.
.ie n .IP "$Conf{FtpPassive} = 1;" 4
.el .IP "\f(CW$Conf\fR{FtpPassive} = 1;" 4
.IX Item "$Conf{FtpPassive} = 1;"
Whether passive mode is used.  The correct setting depends upon
whether local or remote ports are accessible from the other machine,
which is affected by any firewall or routers between the \s-1FTP\s0 server
on the client and the BackupPC server.
.Sp
This setting is used only if \f(CW$Conf\fR{XferMethod} = 'ftp'.
.ie n .IP "$Conf{FtpBlockSize} = 10240;" 4
.el .IP "\f(CW$Conf\fR{FtpBlockSize} = 10240;" 4
.IX Item "$Conf{FtpBlockSize} = 10240;"
Transfer block size. This sets the size of the amounts of data in
each frame. While undefined, this value takes the default value.
.Sp
This setting is used only if \f(CW$Conf\fR{XferMethod} = 'ftp'.
.ie n .IP "$Conf{FtpPort} = 21;" 4
.el .IP "\f(CW$Conf\fR{FtpPort} = 21;" 4
.IX Item "$Conf{FtpPort} = 21;"
The port of the ftp server.  If undefined, 21 is used.
.Sp
This setting is used only if \f(CW$Conf\fR{XferMethod} = 'ftp'.
.ie n .IP "$Conf{FtpTimeout} = 120;" 4
.el .IP "\f(CW$Conf\fR{FtpTimeout} = 120;" 4
.IX Item "$Conf{FtpTimeout} = 120;"
Connection timeout for \s-1FTP. \s0 When undefined, the default is 120 seconds.
.Sp
This setting is used only if \f(CW$Conf\fR{XferMethod} = 'ftp'.
.ie n .IP "$Conf{FtpFollowSymlinks} = 0;" 4
.el .IP "\f(CW$Conf\fR{FtpFollowSymlinks} = 0;" 4
.IX Item "$Conf{FtpFollowSymlinks} = 0;"
Behaviour when BackupPC encounters symlinks on the \s-1FTP\s0 share.
.Sp
Symlinks cannot be restored via \s-1FTP,\s0 so the desired behaviour will
be different depending on the setup of the share. The default for
this behavor is 1.  Directory shares with more complicated directory
structures should consider other protocols.
.SS "Archive Configuration"
.IX Subsection "Archive Configuration"
.ie n .IP "$Conf{ArchiveDest} = '/tmp';" 4
.el .IP "\f(CW$Conf\fR{ArchiveDest} = '/tmp';" 4
.IX Item "$Conf{ArchiveDest} = '/tmp';"
Archive Destination
.Sp
The Destination of the archive
e.g. /tmp for file archive or /dev/nst0 for device archive
.ie n .IP "$Conf{ArchiveComp} = 'gzip';" 4
.el .IP "\f(CW$Conf\fR{ArchiveComp} = 'gzip';" 4
.IX Item "$Conf{ArchiveComp} = 'gzip';"
Archive Compression type
.Sp
The valid values are:
.Sp
.Vb 1
\&  \- \*(Aqnone\*(Aq:  No Compression
\&
\&  \- \*(Aqgzip\*(Aq:  Medium Compression. Recommended.
\&
\&  \- \*(Aqbzip2\*(Aq: High Compression but takes longer.
.Ve
.ie n .IP "$Conf{ArchivePar} = 0;" 4
.el .IP "\f(CW$Conf\fR{ArchivePar} = 0;" 4
.IX Item "$Conf{ArchivePar} = 0;"
Archive Parity Files
.Sp
The amount of Parity data to generate, as a percentage
of the archive size.
Uses the commandline par2 (par2cmdline) available from
http://parchive.sourceforge.net
.Sp
Only useful for file dumps.
.Sp
Set to 0 to disable this feature.
.ie n .IP "$Conf{ArchiveSplit} = 0;" 4
.el .IP "\f(CW$Conf\fR{ArchiveSplit} = 0;" 4
.IX Item "$Conf{ArchiveSplit} = 0;"
Archive Size Split
.Sp
Only for file archives. Splits the output into
the specified size * 1,000,000.
e.g. to split into 650,000,000 bytes, specify 650 below.
.Sp
If the value is 0, or if \f(CW$Conf\fR{ArchiveDest} is an existing file or
device (e.g. a streaming tape drive), this feature is disabled.
.ie n .IP "$Conf{ArchiveClientCmd} = '$Installdir/bin/BackupPC_archiveHost' ..." 4
.el .IP "\f(CW$Conf\fR{ArchiveClientCmd} = '$Installdir/bin/BackupPC_archiveHost' ..." 4
.IX Item "$Conf{ArchiveClientCmd} = '$Installdir/bin/BackupPC_archiveHost' ..."
Archive Command
.Sp
This is the command that is called to actually run the archive process
for each host.  The following variables are substituted at run-time:
.Sp
.Vb 11
\&  $Installdir    The installation directory of BackupPC
\&  $tarCreatePath The path to BackupPC_tarCreate
\&  $splitpath     The path to the split program
\&  $parpath       The path to the par2 program
\&  $host          The host to archive
\&  $backupnumber  The backup number of the host to archive
\&  $compression   The path to the compression program
\&  $compext       The extension assigned to the compression type
\&  $splitsize     The number of bytes to split archives into
\&  $archiveloc    The location to put the archive
\&  $parfile       The amount of parity data to create (percentage)
.Ve
.Sp
Note: all Cmds are executed directly without a shell, so the prog name
needs to be a full path and you can't include shell syntax like
redirection and pipes; put that in a script if you need it.
.ie n .IP "$Conf{SshPath} = '';" 4
.el .IP "\f(CW$Conf\fR{SshPath} = '';" 4
.IX Item "$Conf{SshPath} = '';"
Full path for ssh. Security caution: normal users should not
allowed to write to this file or directory.
.ie n .IP "$Conf{NmbLookupPath} = '';" 4
.el .IP "\f(CW$Conf\fR{NmbLookupPath} = '';" 4
.IX Item "$Conf{NmbLookupPath} = '';"
Full path for nmblookup. Security caution: normal users should not
allowed to write to this file or directory.
.Sp
nmblookup is from the Samba distribution. nmblookup is used to get the
netbios name, necessary for \s-1DHCP\s0 hosts.
.ie n .IP "$Conf{NmbLookupCmd} = '$nmbLookupPath \-A $host';" 4
.el .IP "\f(CW$Conf\fR{NmbLookupCmd} = '$nmbLookupPath \-A \f(CW$host\fR';" 4
.IX Item "$Conf{NmbLookupCmd} = '$nmbLookupPath -A $host';"
NmbLookup command.  Given an \s-1IP\s0 address, does an nmblookup on that
\&\s-1IP\s0 address.  The following variables are substituted at run-time:
.Sp
.Vb 2
\&  $nmbLookupPath      path to nmblookup ($Conf{NmbLookupPath})
\&  $host               IP address
.Ve
.Sp
This command is only used for \s-1DHCP\s0 hosts: given an \s-1IP\s0 address, this
command should try to find its NetBios name.
.Sp
Note: all Cmds are executed directly without a shell, so the prog name
needs to be a full path and you can't include shell syntax like
redirection and pipes; put that in a script if you need it.
.ie n .IP "$Conf{NmbLookupFindHostCmd} = '$nmbLookupPath $host';" 4
.el .IP "\f(CW$Conf\fR{NmbLookupFindHostCmd} = '$nmbLookupPath \f(CW$host\fR';" 4
.IX Item "$Conf{NmbLookupFindHostCmd} = '$nmbLookupPath $host';"
NmbLookup command.  Given a netbios name, finds that host by doing
a NetBios lookup.  Several variables are substituted at run-time:
.Sp
.Vb 2
\&  $nmbLookupPath      path to nmblookup ($Conf{NmbLookupPath})
\&  $host               NetBios name
.Ve
.Sp
In some cases you might need to change the broadcast address, for
example if nmblookup uses 192.168.255.255 by default and you find
that doesn't work, try 192.168.1.255 (or your equivalent class C
address) using the \-B option:
.Sp
.Vb 1
\&   $Conf{NmbLookupFindHostCmd} = \*(Aq$nmbLookupPath \-B 192.168.1.255 $host\*(Aq;
.Ve
.Sp
If you use a \s-1WINS\s0 server and your machines don't respond to
multicast NetBios requests you can use this (replace 1.2.3.4
with the \s-1IP\s0 address of your \s-1WINS\s0 server):
.Sp
.Vb 1
\&   $Conf{NmbLookupFindHostCmd} = \*(Aq$nmbLookupPath \-R \-U 1.2.3.4 $host\*(Aq;
.Ve
.Sp
This is preferred over multicast since it minimizes network traffic.
.Sp
Experiment manually for your site to see what form of nmblookup command
works.
.Sp
Note: all Cmds are executed directly without a shell, so the prog name
needs to be a full path and you can't include shell syntax like
redirection and pipes; put that in a script if you need it.
.ie n .IP "$Conf{FixedIPNetBiosNameCheck} = 0;" 4
.el .IP "\f(CW$Conf\fR{FixedIPNetBiosNameCheck} = 0;" 4
.IX Item "$Conf{FixedIPNetBiosNameCheck} = 0;"
For fixed \s-1IP\s0 address hosts, BackupPC_dump can also verify the netbios
name to ensure it matches the host name.  An error is generated if
they do not match.  Typically this flag is off.  But if you are going
to transition a bunch of machines from fixed host addresses to \s-1DHCP,\s0
setting this flag is a great way to verify that the machines have
their netbios name set correctly before turning on \s-1DCHP.\s0
.ie n .IP "$Conf{PingPath} = '';" 4
.el .IP "\f(CW$Conf\fR{PingPath} = '';" 4
.IX Item "$Conf{PingPath} = '';"
Full path to the ping command.  Security caution: normal users
should not be allowed to write to this file or directory.
.Sp
If you want to disable ping checking, set this to some program
that exits with 0 status, eg:
.Sp
.Vb 1
\&    $Conf{PingPath} = \*(Aq/bin/echo\*(Aq;
.Ve
.ie n .IP "$Conf{PingCmd} = '$pingPath \-c 1 $host';" 4
.el .IP "\f(CW$Conf\fR{PingCmd} = '$pingPath \-c 1 \f(CW$host\fR';" 4
.IX Item "$Conf{PingCmd} = '$pingPath -c 1 $host';"
Ping command.  The following variables are substituted at run-time:
.Sp
.Vb 2
\&  $pingPath      path to ping ($Conf{PingPath})
\&  $host          host name
.Ve
.Sp
Wade Brown reports that on solaris 2.6 and 2.7 ping \-s returns the wrong
exit status (0 even on failure).  Replace with \*(L"ping \f(CW$host\fR 1\*(R", which
gets the correct exit status but we don't get the round-trip time.
.Sp
Note: all Cmds are executed directly without a shell, so the prog name
needs to be a full path and you can't include shell syntax like
redirection and pipes; put that in a script if you need it.
.ie n .IP "$Conf{PingMaxMsec} = 20;" 4
.el .IP "\f(CW$Conf\fR{PingMaxMsec} = 20;" 4
.IX Item "$Conf{PingMaxMsec} = 20;"
Maximum round-trip ping time in milliseconds.  This threshold is set
to avoid backing up PCs that are remotely connected through \s-1WAN\s0 or
dialup connections.  The output from ping \-s (assuming it is supported
on your system) is used to check the round-trip packet time.  On your
local \s-1LAN\s0 round-trip times should be much less than 20msec.  On most
\&\s-1WAN\s0 or dialup connections the round-trip time will be typically more
than 20msec.  Tune if necessary.
.ie n .IP "$Conf{CompressLevel} = 3;" 4
.el .IP "\f(CW$Conf\fR{CompressLevel} = 3;" 4
.IX Item "$Conf{CompressLevel} = 3;"
Compression level to use on files.  0 means no compression.  Compression
levels can be from 1 (least cpu time, slightly worse compression) to
9 (most cpu time, slightly better compression).  The recommended value
is 3.  Changing to 5, for example, will take maybe 20% more cpu time
and will get another 2\-3% additional compression. See the zlib
documentation for more information about compression levels.
.Sp
Changing compression on or off after backups have already been done
will require both compressed and uncompressed pool files to be stored.
This will increase the pool storage requirements, at least until all
the old backups expire and are deleted.
.Sp
It is ok to change the compression value (from one non-zero value to
another non-zero value) after dumps are already done.  Since BackupPC
matches pool files by comparing the uncompressed versions, it will still
correctly match new incoming files against existing pool files.  The
new compression level will take effect only for new files that are
newly compressed and added to the pool.
.Sp
If compression was off and you are enabling compression for the first
time you can use the BackupPC_compressPool utility to compress the
pool.  This avoids having the pool grow to accommodate both compressed
and uncompressed backups.  See the documentation for more information.
.ie n .IP "$Conf{ClientTimeout} = 72000;" 4
.el .IP "\f(CW$Conf\fR{ClientTimeout} = 72000;" 4
.IX Item "$Conf{ClientTimeout} = 72000;"
Timeout in seconds when listening for the transport program's
(smbclient, tar etc) stdout. If no output is received during this
time, then it is assumed that something has wedged during a backup,
and the backup is terminated.
.Sp
Note that stdout buffering combined with huge files being backed up
could cause longish delays in the output from smbclient that
BackupPC_dump sees, so in rare cases you might want to increase
this value.
.Sp
Despite the name, this parameter sets the timeout for all transport
methods (tar, smb etc).
.ie n .IP "$Conf{MaxOldPerPCLogFiles} = 12;" 4
.el .IP "\f(CW$Conf\fR{MaxOldPerPCLogFiles} = 12;" 4
.IX Item "$Conf{MaxOldPerPCLogFiles} = 12;"
Maximum number of log files we keep around in each \s-1PC\s0's directory
(ie: pc/$host).  These files are aged monthly.  A setting of 12
means there will be at most the files \s-1LOG, LOG.0, LOG.1, ... LOG.11\s0
in the pc/$host directory (ie: about a years worth).  (Except this
month's \s-1LOG,\s0 these files will have a .z extension if compression
is on).
.Sp
If you decrease this number after BackupPC has been running for a
while you will have to manually remove the older log files.
.ie n .IP "$Conf{DumpPreUserCmd} = undef;" 4
.el .IP "\f(CW$Conf\fR{DumpPreUserCmd} = undef;" 4
.IX Item "$Conf{DumpPreUserCmd} = undef;"
.PD 0
.ie n .IP "$Conf{DumpPostUserCmd} = undef;" 4
.el .IP "\f(CW$Conf\fR{DumpPostUserCmd} = undef;" 4
.IX Item "$Conf{DumpPostUserCmd} = undef;"
.ie n .IP "$Conf{DumpPreShareCmd} = undef;" 4
.el .IP "\f(CW$Conf\fR{DumpPreShareCmd} = undef;" 4
.IX Item "$Conf{DumpPreShareCmd} = undef;"
.ie n .IP "$Conf{DumpPostShareCmd} = undef;" 4
.el .IP "\f(CW$Conf\fR{DumpPostShareCmd} = undef;" 4
.IX Item "$Conf{DumpPostShareCmd} = undef;"
.ie n .IP "$Conf{RestorePreUserCmd} = undef;" 4
.el .IP "\f(CW$Conf\fR{RestorePreUserCmd} = undef;" 4
.IX Item "$Conf{RestorePreUserCmd} = undef;"
.ie n .IP "$Conf{RestorePostUserCmd} = undef;" 4
.el .IP "\f(CW$Conf\fR{RestorePostUserCmd} = undef;" 4
.IX Item "$Conf{RestorePostUserCmd} = undef;"
.ie n .IP "$Conf{ArchivePreUserCmd} = undef;" 4
.el .IP "\f(CW$Conf\fR{ArchivePreUserCmd} = undef;" 4
.IX Item "$Conf{ArchivePreUserCmd} = undef;"
.ie n .IP "$Conf{ArchivePostUserCmd} = undef;" 4
.el .IP "\f(CW$Conf\fR{ArchivePostUserCmd} = undef;" 4
.IX Item "$Conf{ArchivePostUserCmd} = undef;"
.PD
Optional commands to run before and after dumps and restores,
and also before and after each share of a dump.
.Sp
Stdout from these commands will be written to the Xfer (or Restore)
log file.  One example of using these commands would be to
shut down and restart a database server, dump a database
to files for backup, or doing a snapshot of a share prior
to a backup.  Example:
.Sp
.Vb 1
\&   $Conf{DumpPreUserCmd} = \*(Aq$sshPath \-q \-x \-l root $host /usr/bin/dumpMysql\*(Aq;
.Ve
.Sp
The following variable substitutions are made at run time for
\&\f(CW$Conf\fR{DumpPreUserCmd}, \f(CW$Conf\fR{DumpPostUserCmd}, \f(CW$Conf\fR{DumpPreShareCmd}
and \f(CW$Conf\fR{DumpPostShareCmd}:
.Sp
.Vb 10
\&       $type         type of dump (incr or full)
\&       $xferOK       1 if the dump succeeded, 0 if it didn\*(Aqt
\&       $client       client name being backed up
\&       $host         host name (could be different from client name if
\&                                $Conf{ClientNameAlias} is set)
\&       $hostIP       IP address of host
\&       $user         user name from the hosts file
\&       $moreUsers    list of additional users from the hosts file
\&       $share        the first share name (or current share for
\&                       $Conf{DumpPreShareCmd} and $Conf{DumpPostShareCmd})
\&       $shares       list of all the share names
\&       $XferMethod   value of $Conf{XferMethod} (eg: tar, rsync, smb)
\&       $sshPath      value of $Conf{SshPath},
\&       $cmdType      set to DumpPreUserCmd or DumpPostUserCmd
.Ve
.Sp
The following variable substitutions are made at run time for
\&\f(CW$Conf\fR{RestorePreUserCmd} and \f(CW$Conf\fR{RestorePostUserCmd}:
.Sp
.Vb 10
\&       $client       client name being backed up
\&       $xferOK       1 if the restore succeeded, 0 if it didn\*(Aqt
\&       $host         host name (could be different from client name if
\&                                $Conf{ClientNameAlias} is set)
\&       $hostIP       IP address of host
\&       $user         user name from the hosts file
\&       $moreUsers    list of additional users from the hosts file
\&       $share        the first share name
\&       $XferMethod   value of $Conf{XferMethod} (eg: tar, rsync, smb)
\&       $sshPath      value of $Conf{SshPath},
\&       $type         set to "restore"
\&       $bkupSrcHost  host name of the restore source
\&       $bkupSrcShare share name of the restore source
\&       $bkupSrcNum   backup number of the restore source
\&       $pathHdrSrc   common starting path of restore source
\&       $pathHdrDest  common starting path of destination
\&       $fileList     list of files being restored
\&       $cmdType      set to RestorePreUserCmd or RestorePostUserCmd
.Ve
.Sp
The following variable substitutions are made at run time for
\&\f(CW$Conf\fR{ArchivePreUserCmd} and \f(CW$Conf\fR{ArchivePostUserCmd}:
.Sp
.Vb 10
\&       $client       client name being backed up
\&       $xferOK       1 if the archive succeeded, 0 if it didn\*(Aqt
\&       $host         Name of the archive host
\&       $user         user name from the hosts file
\&       $share        the first share name
\&       $XferMethod   value of $Conf{XferMethod} (eg: tar, rsync, smb)
\&       $HostList     list of hosts being archived
\&       $BackupList   list of backup numbers for the hosts being archived
\&       $archiveloc   location where the archive is sent to
\&       $parfile      amount of parity data being generated (percentage)
\&       $compression  compression program being used (eg: cat, gzip, bzip2)
\&       $compext      extension used for compression type (eg: raw, gz, bz2)
\&       $splitsize    size of the files that the archive creates
\&       $sshPath      value of $Conf{SshPath},
\&       $type         set to "archive"
\&       $cmdType      set to ArchivePreUserCmd or ArchivePostUserCmd
.Ve
.Sp
Note: all Cmds are executed directly without a shell, so the prog name
needs to be a full path and you can't include shell syntax like
redirection and pipes; put that in a script if you need it.
.ie n .IP "$Conf{UserCmdCheckStatus} = 0;" 4
.el .IP "\f(CW$Conf\fR{UserCmdCheckStatus} = 0;" 4
.IX Item "$Conf{UserCmdCheckStatus} = 0;"
Whether the exit status of each PreUserCmd and
PostUserCmd is checked.
.Sp
If set and the Dump/Restore/Archive Pre/Post UserCmd
returns a non-zero exit status then the dump/restore/archive
is aborted.  To maintain backward compatibility (where
the exit status in early versions was always ignored),
this flag defaults to 0.
.Sp
If this flag is set and the Dump/Restore/Archive PreUserCmd
fails then the matching Dump/Restore/Archive PostUserCmd is
not executed.  If DumpPreShareCmd returns a non-exit status,
then DumpPostShareCmd is not executed, but the DumpPostUserCmd
is still run (since DumpPreUserCmd must have previously
succeeded).
.Sp
An example of a DumpPreUserCmd that might fail is a script
that snapshots or dumps a database which fails because
of some database error.
.ie n .IP "$Conf{ClientNameAlias} = undef;" 4
.el .IP "\f(CW$Conf\fR{ClientNameAlias} = undef;" 4
.IX Item "$Conf{ClientNameAlias} = undef;"
Override the client's host name.  This allows multiple clients
to all refer to the same physical host.  This should only be
set in the per-PC config file and is only used by BackupPC at
the last moment prior to generating the command used to backup
that machine (ie: the value of \f(CW$Conf\fR{ClientNameAlias} is invisible
everywhere else in BackupPC).  The setting can be a host name or
\&\s-1IP\s0 address, eg:
.Sp
.Vb 2
\&        $Conf{ClientNameAlias} = \*(AqrealHostName\*(Aq;
\&        $Conf{ClientNameAlias} = \*(Aq192.1.1.15\*(Aq;
.Ve
.Sp
will cause the relevant smb/tar/rsync backup/restore commands to be
directed to realHostName, not the client name.
.Sp
Note: this setting doesn't work for hosts with \s-1DHCP\s0 set to 1.
.SS "Email reminders, status and messages"
.IX Subsection "Email reminders, status and messages"
.ie n .IP "$Conf{SendmailPath} = '';" 4
.el .IP "\f(CW$Conf\fR{SendmailPath} = '';" 4
.IX Item "$Conf{SendmailPath} = '';"
Full path to the sendmail command.  Security caution: normal users
should not allowed to write to this file or directory.
.ie n .IP "$Conf{EMailNotifyMinDays} = 2.5;" 4
.el .IP "\f(CW$Conf\fR{EMailNotifyMinDays} = 2.5;" 4
.IX Item "$Conf{EMailNotifyMinDays} = 2.5;"
Minimum period between consecutive emails to a single user.
This tries to keep annoying email to users to a reasonable
level.  Email checks are done nightly, so this number is effectively
rounded up (ie: 2.5 means a user will never receive email more
than once every 3 days).
.ie n .IP "$Conf{EMailFromUserName} = '';" 4
.el .IP "\f(CW$Conf\fR{EMailFromUserName} = '';" 4
.IX Item "$Conf{EMailFromUserName} = '';"
Name to use as the \*(L"from\*(R" name for email.  Depending upon your mail
handler this is either a plain name (eg: \*(L"admin\*(R") or a fully-qualified
name (eg: \*(L"admin@mydomain.com\*(R").
.ie n .IP "$Conf{EMailAdminUserName} = '';" 4
.el .IP "\f(CW$Conf\fR{EMailAdminUserName} = '';" 4
.IX Item "$Conf{EMailAdminUserName} = '';"
Destination address to an administrative user who will receive a
nightly email with warnings and errors.  If there are no warnings
or errors then no email will be sent.  Depending upon your mail
handler this is either a plain name (eg: \*(L"admin\*(R") or a fully-qualified
name (eg: \*(L"admin@mydomain.com\*(R").
.ie n .IP "$Conf{EMailUserDestDomain} = '';" 4
.el .IP "\f(CW$Conf\fR{EMailUserDestDomain} = '';" 4
.IX Item "$Conf{EMailUserDestDomain} = '';"
Destination domain name for email sent to users.  By default
this is empty, meaning email is sent to plain, unqualified
addresses.  Otherwise, set it to the destintation domain, eg:
.Sp
.Vb 1
\&   $Cong{EMailUserDestDomain} = \*(Aq@mydomain.com\*(Aq;
.Ve
.Sp
With this setting user email will be set to 'user@mydomain.com'.
.ie n .IP "$Conf{EMailNoBackupEverSubj} = undef;" 4
.el .IP "\f(CW$Conf\fR{EMailNoBackupEverSubj} = undef;" 4
.IX Item "$Conf{EMailNoBackupEverSubj} = undef;"
.PD 0
.ie n .IP "$Conf{EMailNoBackupEverMesg} = undef;" 4
.el .IP "\f(CW$Conf\fR{EMailNoBackupEverMesg} = undef;" 4
.IX Item "$Conf{EMailNoBackupEverMesg} = undef;"
.PD
This subject and message is sent to a user if their \s-1PC\s0 has never been
backed up.
.Sp
These values are language-dependent.  The default versions can be
found in the language file (eg: lib/BackupPC/Lang/en.pm).  If you
need to change the message, copy it here and edit it, eg:
.Sp
.Vb 4
\&  $Conf{EMailNoBackupEverMesg} = <<\*(AqEOF\*(Aq;
\&  To: $user$domain
\&  cc:
\&  Subject: $subj
\&
\&  Dear $userName,
\&
\&  This is a site\-specific email message.
\&  EOF
.Ve
.ie n .IP "$Conf{EMailNotifyOldBackupDays} = 7.0;" 4
.el .IP "\f(CW$Conf\fR{EMailNotifyOldBackupDays} = 7.0;" 4
.IX Item "$Conf{EMailNotifyOldBackupDays} = 7.0;"
How old the most recent backup has to be before notifying user.
When there have been no backups in this number of days the user
is sent an email.
.ie n .IP "$Conf{EMailNoBackupRecentSubj} = undef;" 4
.el .IP "\f(CW$Conf\fR{EMailNoBackupRecentSubj} = undef;" 4
.IX Item "$Conf{EMailNoBackupRecentSubj} = undef;"
.PD 0
.ie n .IP "$Conf{EMailNoBackupRecentMesg} = undef;" 4
.el .IP "\f(CW$Conf\fR{EMailNoBackupRecentMesg} = undef;" 4
.IX Item "$Conf{EMailNoBackupRecentMesg} = undef;"
.PD
This subject and message is sent to a user if their \s-1PC\s0 has not recently
been backed up (ie: more than \f(CW$Conf\fR{EMailNotifyOldBackupDays} days ago).
.Sp
These values are language-dependent.  The default versions can be
found in the language file (eg: lib/BackupPC/Lang/en.pm).  If you
need to change the message, copy it here and edit it, eg:
.Sp
.Vb 4
\&  $Conf{EMailNoBackupRecentMesg} = <<\*(AqEOF\*(Aq;
\&  To: $user$domain
\&  cc:
\&  Subject: $subj
\&
\&  Dear $userName,
\&
\&  This is a site\-specific email message.
\&  EOF
.Ve
.ie n .IP "$Conf{EMailNotifyOldOutlookDays} = 5.0;" 4
.el .IP "\f(CW$Conf\fR{EMailNotifyOldOutlookDays} = 5.0;" 4
.IX Item "$Conf{EMailNotifyOldOutlookDays} = 5.0;"
How old the most recent backup of Outlook files has to be before
notifying user.
.ie n .IP "$Conf{EMailOutlookBackupSubj} = undef;" 4
.el .IP "\f(CW$Conf\fR{EMailOutlookBackupSubj} = undef;" 4
.IX Item "$Conf{EMailOutlookBackupSubj} = undef;"
.PD 0
.ie n .IP "$Conf{EMailOutlookBackupMesg} = undef;" 4
.el .IP "\f(CW$Conf\fR{EMailOutlookBackupMesg} = undef;" 4
.IX Item "$Conf{EMailOutlookBackupMesg} = undef;"
.PD
This subject and message is sent to a user if their Outlook files have
not recently been backed up (ie: more than \f(CW$Conf\fR{EMailNotifyOldOutlookDays}
days ago).
.Sp
These values are language-dependent.  The default versions can be
found in the language file (eg: lib/BackupPC/Lang/en.pm).  If you
need to change the message, copy it here and edit it, eg:
.Sp
.Vb 4
\&  $Conf{EMailOutlookBackupMesg} = <<\*(AqEOF\*(Aq;
\&  To: $user$domain
\&  cc:
\&  Subject: $subj
\&
\&  Dear $userName,
\&
\&  This is a site\-specific email message.
\&  EOF
.Ve
.ie n .IP "$Conf{EMailHeaders} = <<\s-1EOF\s0;" 4
.el .IP "\f(CW$Conf\fR{EMailHeaders} = <<\s-1EOF\s0;" 4
.IX Item "$Conf{EMailHeaders} = <<EOF;"
Additional email headers.  This sets to charset to
utf8.
.SS "\s-1CGI\s0 user interface configuration settings"
.IX Subsection "CGI user interface configuration settings"
.ie n .IP "$Conf{CgiAdminUserGroup} = '';" 4
.el .IP "\f(CW$Conf\fR{CgiAdminUserGroup} = '';" 4
.IX Item "$Conf{CgiAdminUserGroup} = '';"
.PD 0
.ie n .IP "$Conf{CgiAdminUsers} = '';" 4
.el .IP "\f(CW$Conf\fR{CgiAdminUsers} = '';" 4
.IX Item "$Conf{CgiAdminUsers} = '';"
.PD
Normal users can only access information specific to their host.
They can start/stop/browse/restore backups.
.Sp
Administrative users have full access to all hosts, plus overall
status and log information.
.Sp
The administrative users are the union of the unix/linux group
\&\f(CW$Conf\fR{CgiAdminUserGroup} and the manual list of users, separated
by spaces, in \f(CW$Conf\fR{CgiAdminUsers}. If you don't want a group or
manual list of users set the corresponding configuration setting
to undef or an empty string.
.Sp
If you want every user to have admin privileges (careful!), set
\&\f(CW$Conf\fR{CgiAdminUsers} = '*'.
.Sp
Examples:
.Sp
.Vb 4
\&   $Conf{CgiAdminUserGroup} = \*(Aqadmin\*(Aq;
\&   $Conf{CgiAdminUsers}     = \*(Aqcraig celia\*(Aq;
\&   \-\-> administrative users are the union of group admin, plus
\&     craig and celia.
\&
\&   $Conf{CgiAdminUserGroup} = \*(Aq\*(Aq;
\&   $Conf{CgiAdminUsers}     = \*(Aqcraig celia\*(Aq;
\&   \-\-> administrative users are only craig and celia\*(Aq.
.Ve
.ie n .IP "$Conf{SCGIServerPort} = \-1;" 4
.el .IP "\f(CW$Conf\fR{SCGIServerPort} = \-1;" 4
.IX Item "$Conf{SCGIServerPort} = -1;"
\&\s-1TCP\s0 port number of the \s-1SCGI\s0 server.  A negative value disables the
\&\s-1SCGI\s0 server.  Set to any available unprivileged \s-1TCP\s0 port number,
eg: 10268.  Apache needs the mod_scgi module installed, and you will
need to set the same port number in the Apache configuration. Here
are some typical settings you'll need in Apache's httpd.conf:
.Sp
.Vb 8
\&   LoadModule scgi_module modules/mod_scgi.so
\&   SCGIMount /BackupPC_Admin 127.0.0.1:10268
\&   <Location /BackupPC_Admin>
\&       AuthUserFile /etc/httpd/conf/passwd
\&       AuthType basic
\&       AuthName "access"
\&       require valid\-user
\&   </Location>
.Ve
.Sp
Important security warning!!  The SCGIServerPort must not be
accessible by anyone untrusted.  That means you can't allow
untrusted users access to the BackupPC server, and you should
block the SCGIServerPort \s-1TCP\s0 port on the BackupPC server.  If you
don't understaand what that means, or can't confirm you have
configured \s-1SCGI\s0 securely, then don't enable it!!
.ie n .IP "$Conf{CgiURL} = undef;" 4
.el .IP "\f(CW$Conf\fR{CgiURL} = undef;" 4
.IX Item "$Conf{CgiURL} = undef;"
Full \s-1URL\s0 of the BackupPC_Admin \s-1CGI\s0 script, or the configured path
for \s-1SCGI. \s0 Used for links in email messages.
.ie n .IP "$Conf{RrdToolPath} = '';" 4
.el .IP "\f(CW$Conf\fR{RrdToolPath} = '';" 4
.IX Item "$Conf{RrdToolPath} = '';"
Full path to the rrdtool command.  If available, graphs of pool usage
will be generated.  If empty, then the graphs will be skipped.
.Sp
Security caution: normal users should not allowed to write to this file
or directory.
.ie n .IP "$Conf{Language} = 'en';" 4
.el .IP "\f(CW$Conf\fR{Language} = 'en';" 4
.IX Item "$Conf{Language} = 'en';"
Language to use.  See lib/BackupPC/Lang for the list of supported
languages, which include English (en), French (fr), Spanish (es),
German (de), Italian (it), Dutch (nl), Polish (pl), Portuguese
Brazillian (pt_br) and Chinese (zh_CH).
.Sp
Currently the Language setting applies to the \s-1CGI\s0 interface and email
messages sent to users.  Log files and other text are still in English.
.ie n .IP "$Conf{CgiUserHomePageCheck} = '';" 4
.el .IP "\f(CW$Conf\fR{CgiUserHomePageCheck} = '';" 4
.IX Item "$Conf{CgiUserHomePageCheck} = '';"
.PD 0
.ie n .IP "$Conf{CgiUserUrlCreate} = 'mailto:%s';" 4
.el .IP "\f(CW$Conf\fR{CgiUserUrlCreate} = 'mailto:%s';" 4
.IX Item "$Conf{CgiUserUrlCreate} = 'mailto:%s';"
.PD
User names that are rendered by the \s-1CGI\s0 interface can be turned
into links into their home page or other information about the
user.  To set this up you need to create two \fIsprintf()\fR strings,
that each contain a single '%s' that will be replaced by the user
name.  The default is a mailto: link.
.Sp
\&\f(CW$Conf\fR{CgiUserHomePageCheck} should be an absolute file path that
is used to check (via \*(L"\-f\*(R") that the user has a valid home page.
Set this to undef or an empty string to turn off this check.
.Sp
\&\f(CW$Conf\fR{CgiUserUrlCreate} should be a full \s-1URL\s0 that points to the
user's home page.  Set this to undef or an empty string to turn
off generation of URLs for user names.
.Sp
Example:
.Sp
.Vb 4
\&   $Conf{CgiUserHomePageCheck} = \*(Aq/var/www/html/users/%s.html\*(Aq;
\&   $Conf{CgiUserUrlCreate}     = \*(Aqhttp://myhost/users/%s.html\*(Aq;
\&   \-\-> if /var/www/html/users/craig.html exists, then \*(Aqcraig\*(Aq will
\&     be rendered as a link to http://myhost/users/craig.html.
.Ve
.ie n .IP "$Conf{CgiDateFormatMMDD} = 1;" 4
.el .IP "\f(CW$Conf\fR{CgiDateFormatMMDD} = 1;" 4
.IX Item "$Conf{CgiDateFormatMMDD} = 1;"
Date display format for \s-1CGI\s0 interface.  A value of 1 uses US-style
dates (\s-1MM/DD\s0), a value of 2 uses full YYYY-MM-DD format, and zero
for international dates (\s-1DD/MM\s0).
.ie n .IP "$Conf{CgiNavBarAdminAllHosts} = 1;" 4
.el .IP "\f(CW$Conf\fR{CgiNavBarAdminAllHosts} = 1;" 4
.IX Item "$Conf{CgiNavBarAdminAllHosts} = 1;"
If set, the complete list of hosts appears in the left navigation
bar pull-down for administrators.  Otherwise, just the hosts for which
the user is listed in the host file (as either the user or in moreUsers)
are displayed.
.ie n .IP "$Conf{CgiSearchBoxEnable} = 1;" 4
.el .IP "\f(CW$Conf\fR{CgiSearchBoxEnable} = 1;" 4
.IX Item "$Conf{CgiSearchBoxEnable} = 1;"
Enable/disable the search box in the navigation bar.
.ie n .IP "$Conf{CgiNavBarLinks} = [ ... ];" 4
.el .IP "\f(CW$Conf\fR{CgiNavBarLinks} = [ ... ];" 4
.IX Item "$Conf{CgiNavBarLinks} = [ ... ];"
Additional navigation bar links.  These appear for both regular users
and administrators.  This is a list of hashes giving the link (\s-1URL\s0)
and the text (name) for the link.  Specifying lname instead of name
uses the language specific string (ie: \f(CW$Lang\fR\->{lname}) instead of
just literally displaying name.
.ie n .IP "$Conf{CgiStatusHilightColor} = { ..." 4
.el .IP "\f(CW$Conf\fR{CgiStatusHilightColor} = { ..." 4
.IX Item "$Conf{CgiStatusHilightColor} = { ..."
Hilight colors based on status that are used in the \s-1PC\s0 summary page.
.ie n .IP "$Conf{CgiHeaders} = '<meta http\-equiv=""pragma"" content=""no\-cache"">';" 4
.el .IP "\f(CW$Conf\fR{CgiHeaders} = '<meta http\-equiv=``pragma'' content=``no\-cache''>';" 4
.IX Item "$Conf{CgiHeaders} = '<meta http-equiv=pragma content=no-cache>';"
Additional \s-1CGI\s0 header text.
.ie n .IP "$Conf{CgiImageDir} = '';" 4
.el .IP "\f(CW$Conf\fR{CgiImageDir} = '';" 4
.IX Item "$Conf{CgiImageDir} = '';"
Directory where images are stored.  This directory should be below
Apache's DocumentRoot.  This value isn't used by BackupPC but is
used by configure.pl when you upgrade BackupPC.
.Sp
Example:
.Sp
.Vb 1
\&    $Conf{CgiImageDir} = \*(Aq/var/www/htdocs/BackupPC\*(Aq;
.Ve
.ie n .IP "$Conf{CgiExt2ContentType} = { };" 4
.el .IP "\f(CW$Conf\fR{CgiExt2ContentType} = { };" 4
.IX Item "$Conf{CgiExt2ContentType} = { };"
Additional mappings of file name extenions to Content-Type for
individual file restore.  See \f(CW$Ext2ContentType\fR in BackupPC_Admin
for the default setting.  You can add additional settings here,
or override any default settings.  Example:
.Sp
.Vb 3
\&    $Conf{CgiExt2ContentType} = {
\&                \*(Aqpl\*(Aq  => \*(Aqtext/plain\*(Aq,
\&         };
.Ve
.ie n .IP "$Conf{CgiImageDirURL} = '';" 4
.el .IP "\f(CW$Conf\fR{CgiImageDirURL} = '';" 4
.IX Item "$Conf{CgiImageDirURL} = '';"
\&\s-1URL \s0(without the leading http://host) for BackupPC's image directory.
The \s-1CGI\s0 script uses this value to serve up image files.
.Sp
Example:
.Sp
.Vb 1
\&    $Conf{CgiImageDirURL} = \*(Aq/BackupPC\*(Aq;
.Ve
.ie n .IP "$Conf{CgiCSSFile} = 'BackupPC_stnd.css';" 4
.el .IP "\f(CW$Conf\fR{CgiCSSFile} = 'BackupPC_stnd.css';" 4
.IX Item "$Conf{CgiCSSFile} = 'BackupPC_stnd.css';"
\&\s-1CSS\s0 stylesheet \*(L"skin\*(R" for the \s-1CGI\s0 interface.  It is stored
in the \f(CW$Conf\fR{CgiImageDir} directory and accessed via the
\&\f(CW$Conf\fR{CgiImageDirURL} \s-1URL.\s0
.Sp
For BackupPC v3.x several color, layout and font changes were made.
The previous v2.x version is available as BackupPC_stnd_orig.css, so
if you prefer the old skin, change this to BackupPC_stnd_orig.css.
.ie n .IP "$Conf{CgiUserConfigEditEnable} = 1;" 4
.el .IP "\f(CW$Conf\fR{CgiUserConfigEditEnable} = 1;" 4
.IX Item "$Conf{CgiUserConfigEditEnable} = 1;"
Whether the user is allowed to edit their per-PC config.
.ie n .IP "$Conf{CgiUserConfigEdit} = { ..." 4
.el .IP "\f(CW$Conf\fR{CgiUserConfigEdit} = { ..." 4
.IX Item "$Conf{CgiUserConfigEdit} = { ..."
Which per-host config variables a non-admin user is allowed
to edit.  Admin users can edit all per-host config variables,
even if disabled in this list.
.Sp
\&\s-1SECURITY WARNING:\s0 Do not let users edit any of the Cmd
config variables!  That's because a user could set a
Cmd to a shell script of their choice and it will be
run as the BackupPC user.  That script could do all
sorts of bad things.
.SH "Version Numbers"
.IX Header "Version Numbers"
Starting with v1.4.0 BackupPC uses a X.Y.Z version numbering system,
instead of X.0Y. The first digit is for major new releases, the middle
digit is for significant feature releases and improvements (most of
the releases have been in this category), and the last digit is for
bug fixes. You should think of the old 1.00, 1.01, 1.02 and 1.03 as
1.0.0, 1.1.0, 1.2.0 and 1.3.0.
.PP
Additionally, patches might be made available.  A patched version
number is of the form X.Y.ZplN (eg: 2.1.0pl2), where N is the
patch level.
.SH "Author"
.IX Header "Author"
Craig Barratt  <cbarratt@users.sourceforge.net>
.PP
See <http://backuppc.sourceforge.net>.
.SH "Copyright"
.IX Header "Copyright"
Copyright (C) 2001\-2013 Craig Barratt
.SH "Credits"
.IX Header "Credits"
Ryan Kucera contributed the directory navigation code and images
for v1.5.0.  He contributed the first skeleton of BackupPC_restore.
He also added a significant revision to the \s-1CGI\s0 interface, including
\&\s-1CSS\s0 tags, in v2.1.0, and designed the BackupPC logo.
.PP
Xavier Nicollet, with additions from Guillaume Filion, added the
internationalization (i18n) support to the \s-1CGI\s0 interface for v2.0.0.
Xavier provided the French translation fr.pm, with additions from
Guillaume.
.PP
Guillaume Filion wrote BackupPC_zipCreate and added the \s-1CGI\s0 support
for zip download, in addition to some \s-1CGI\s0 cleanup, for v1.5.0.
Guillaume continues to support fr.pm updates for each new version.
.PP
Josh Marshall implemented the Archive feature in v2.1.0.
.PP
Ludovic Drolez supports the BackupPC Debian package.
.PP
Javier Gonzalez provided the Spanish translation, es.pm for v2.0.0.
.PP
Manfred Herrmann provided the German translation, de.pm for v2.0.0.
Manfred continues to support de.pm updates for each new version,
together with some help from Ralph Pa�gang.
.PP
Lorenzo Cappelletti provided the Italian translation, it.pm for v2.1.0.
Giuseppe Iuculano and Vittorio Macchi updated it for 3.0.0.
.PP
Lieven Bridts provided the Dutch translation, nl.pm, for v2.1.0,
with some tweaks from Guus Houtzager, and updates for 3.0.0.
.PP
Reginaldo Ferreira provided the Portuguese Brazillian translation
pt_br.pm for v2.2.0.
.PP
Rich Duzenbury provided the \s-1RSS\s0 feed option to the \s-1CGI\s0 interface.
.PP
Jono Woodhouse from CapeSoft Software (www.capesoft.com) provided a
new \s-1CSS\s0 skin for 3.0.0 with several layout improvements.  Sean Cameron
(also from CapeSoft) designed new and more compact file icons for 3.0.0.
.PP
Youlin Feng provided the Chinese translation for 3.1.0.
.PP
Karol 'Semper' Stelmaczonek provided the Polish translation for 3.1.0.
.PP
Jeremy Tietsort provided the host summary table sorting feature for 3.1.0.
.PP
Paul Mantz contributed the ftp Xfer method for 3.2.0.
.PP
Petr Pokorny provided the Czech translation for 3.2.1.
.PP
Rikiya Yamamoto provided the Japanese translation for 3.3.0.
.PP
Yakim provided the Ukrainian translation for 3.3.0.
.PP
Sergei Butakov provided the Russian translation for 3.3.0.
.PP
Alexander Moisseev provided the rrdtool graphing code in 4.0.0.
.PP
Many people have reported bugs, made useful suggestions and helped
with testing; see the ChangeLog and the mailing lists.
.PP
Your name could appear here in the next version!
.SH "License"
.IX Header "License"
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0 See the \s-1GNU\s0
General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License in the
\&\s-1LICENSE\s0 file along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, \s-1MA 02111\-1307 USA.\s0
