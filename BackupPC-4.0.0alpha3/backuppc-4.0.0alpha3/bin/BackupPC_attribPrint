#!/usr/bin/perl
#============================================================= -*-perl-*-
#
# BackupPC_attribPrint: print the contents of attrib files.
#
# DESCRIPTION
#  
#   Usage: BackupPC_attribPrint attribPath
#
# AUTHOR
#   Craig Barratt  <cbarratt@users.sourceforge.net>
#
# COPYRIGHT
#   Copyright (C) 2005-2013  Craig Barratt
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#========================================================================
#
# Version 4.0.0alpha3, released 1 Dec 2013.
#
# See http://backuppc.sourceforge.net.
#
#========================================================================

use strict;
no  utf8;
use lib "__INSTALLDIR__/lib";

use BackupPC::Lib;
use BackupPC::XS;
use Data::Dumper;

die("BackupPC::Lib->new failed\n") if ( !(my $bpc = BackupPC::Lib->new) );
my $TopDir = $bpc->TopDir();
my $BinDir = $bpc->BinDir();
my %Conf   = $bpc->Conf();

if ( @ARGV != 1 ) {
    print STDERR "Usage: $0 attribPath\n";
    exit(1);
}

my($dir, $file);

if ( $ARGV[0] =~ m{(.*/inode)/(\d+)$} ) {
    my $base = $2 & 0x3fff;
    $dir  = sprintf("%s/%02x", $1, $base >> 7);
    $file = sprintf("attrib%02x", $base & 0x7f);
    print("Reading inode attrib file $dir/$file\n");
} elsif ( $ARGV[0] =~ m{(.+)/(.+)} ) {
    $dir  = $1;
    $file = $2;
} else {
    $dir = $ARGV[0];
}

if ( !-f "$dir/$file" ) {
    print STDERR "BackupPC_attribPrint: $dir/$file does not exist\n";
    exit(1);
}

#
# We don't know if compression is on or off for a particular attrib file, so we try
# the opposite if the global setting fails.
#
my $attrib = BackupPC::XS::Attrib::new($Conf{CompressLevel});

if ( !$attrib->read($dir, $file) ) {
    my $digestStr = sprintf(" (%s)", unpack("H*", $attrib->digest())) if ( length($attrib->digest()) );
    $attrib = BackupPC::XS::Attrib::new(!$Conf{CompressLevel});
    if ( !$attrib->read($dir, $file) ) {
        $digestStr = sprintf(" (%s)", unpack("H*", $attrib->digest())) if ( length($attrib->digest()) );
        print STDERR "BackupPC_attribPrint: cannot read attrib file $ARGV[0]$digestStr\n";
        exit(1);
    }
}
my $info = $attrib->get();
#
# convert digest to a hex string
#
foreach my $file ( keys(%$info) ) {
    next if ( !defined($info->{$file}{digest}) );
    $info->{$file}{digest} = unpack("H*", $info->{$file}{digest});
}
if ( length($attrib->digest()) ) {
    printf("Attrib digest is %s\n", unpack("H*", $attrib->digest()));
}
$Data::Dumper::Indent   = 1;
$Data::Dumper::Sortkeys = 1;
print Dumper($info);
