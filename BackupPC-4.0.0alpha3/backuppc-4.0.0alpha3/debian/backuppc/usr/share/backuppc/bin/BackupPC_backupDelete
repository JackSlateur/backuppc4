#!/usr/bin/perl
#============================================================= -*-perl-*-
#
# BackupPC_backupDelete: delete a V4 backup
#
# DESCRIPTION
#
#   BackupPC_backupDelete: delete a V4 backup
#
#   Usage:
#       BackupPC_backupDelete -h host -n num
#
# AUTHOR
#   Craig Barratt  <cbarratt@users.sourceforge.net>
#
# COPYRIGHT
#   Copyright (C) 2001-2013  Craig Barratt
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#========================================================================
#
# Version 4.0.0alpha3, released 1 Dec 2013.
#
# See http://backuppc.sourceforge.net.
#
#========================================================================

use strict;
no  utf8;
use lib "/usr/share/backuppc/lib";
use Getopt::Std;
use File::Copy;
use File::Path;
use Data::Dumper;

use BackupPC::Lib;
use BackupPC::XS qw( :all );
use BackupPC::DirOps qw( :BPC_DT_ALL );

my $Errors = 0;

die("BackupPC::Lib->new failed\n") if ( !(my $bpc = BackupPC::Lib->new) );
my $TopDir = $bpc->TopDir();
my $BinDir = $bpc->BinDir();
my %Conf   = $bpc->Conf();
my $s      = $bpc->{storage};

my $FileCnt        = 0;
my $FileCntNext    = 100;

my %opts;

if ( !getopts("lph:n:", \%opts) || @ARGV >= 1 ) {
    print STDERR <<EOF;
usage: BackupPC_backupDelete [options] files/directories...
  Required options:
     -h host         host name
     -n num          backup number to delete
     -p              don't print progress information
     -l              don't remove XferLOG files
EOF
    exit(1);
}

if ( $opts{h} !~ /^([\w\.\s-]+)$/
        || $opts{h} =~ m{(^|/)\.\.(/|$)} ) {
    print(STDERR "BackupPC_backupDelete: bad host name '$opts{h}'\n");
    exit(1);
}
my $Host = $opts{h};
if ( defined(my $error = $bpc->ConfigRead($Host)) ) {
    print(STDERR "BackupPC_backupDelete: Can't read $Host's config file: $error\n");
    exit(1);
}
%Conf = $bpc->Conf();
BackupPC::XS::Lib::logLevelSet($Conf{XferLogLevel});
my $LogLevel = $Conf{XferLogLevel};

if ( $opts{n} !~ /^(-?\d+)$/ ) {
    print(STDERR "BackupPC_backupDelete: bad backup number '$opts{n}'\n");
    exit(1);
}
$bpc->ChildInit();

my($idx, $idxMerge);

my @Backups = $bpc->BackupInfoRead($Host);

for ( my $i = 0 ; $i < @Backups ; $i++ ) {
    $idx      = $i if ( $opts{n} == $Backups[$i]{num} );
    $idxMerge = $i if ( $opts{n} > $Backups[$i]{num}
                        && (!defined($idxMerge) || $Backups[$i]{num} > $Backups[$idxMerge]{num}) );
}
if ( !defined($idx) ) {
    print(STDERR "BackupPC_backupDelete: can't find backup number $opts{n} on host $Host\n");
    exit(1);
}

my $HostDir       = "$TopDir/pc/$Host";
my $DelCompress   = $Backups[$idx]{compress};
my $DelDir        = "$HostDir/$Backups[$idx]{num}";
my($MergeCompress, $MergeDir);
my($AttrDel, $AttrMerge);

if ( $Backups[$idx]{version} < 4 ) {
    print("BackupPC_backupDelete: removing pre-v4 backup #$Backups[$idx]{num}\n") if ( $LogLevel >= 1 );
    if ( !$opts{p} ) {
        print("__bpc_progress_state__ delete #$Backups[$idx]{num}\n");
    }
    #
    # no reference counting - just remove the whole tree
    #
    BackupPC::DirOps::RmTreeQuiet($bpc, $DelDir, -2, \&progressUpdate);
} else {
    print("BackupPC_backupDelete: removing #$Backups[$idx]{num}\n") if ( $LogLevel >= 1 );
    #
    # Create a needFsck file, so if we are killed and can't recover, we can
    # make sure an fsck is run next time.
    #
    my $needFsckFH;
    if ( !(open($needFsckFH, ">", "$TopDir/pc/$Host/refCnt/needFsck.del") && close($needFsckFH)) ) {
        print(\"BackupPC_backupDelete: can't create $TopDir/pc/$Host/refCnt/needFsck.del ($?)\n");
    }
    BackupPC::XS::PoolRefCnt::DeltaFileInit($HostDir);
    if ( !defined($idxMerge)
            || $Backups[$idxMerge]{version} < 4
            || !$Backups[$idxMerge]{noFill} )  {
        #
        # Either this is oldest backup or prior is non-V4 or prior
        # is filled.  There is no need to merge into the prior backup,
        # so just delete the tree.
        #
        if ( !$opts{p} ) {
            print("__bpc_progress_state__ delete #$Backups[$idx]{num}\n");
        }
        print("BackupPC_backupDelete: No prior backup for merge\n") if ( $LogLevel >= 1 );
        BackupPC::DirOps::RmTreeQuiet($bpc, $DelDir, $DelCompress, \&progressUpdate);
    } else {
        if ( !$opts{p} ) {
            print("__bpc_progress_state__ merge #$Backups[$idx]{num} -> $Backups[$idxMerge]{num}\n");
        }
        print("BackupPC_backupDelete: Merge into backup $Backups[$idxMerge]{num}\n") if ( $LogLevel >= 1 );
        $Backups[$idxMerge]{noFill} = $Backups[$idx]{noFill};

        if ( ($Backups[$idx]{compress} == 0 && $Backups[$idxMerge]{compress} != 0)
                || ($Backups[$idx]{compress} != 0 && $Backups[$idxMerge]{compress} == 0) ) {
            printf(STDERR "BackupPC_backupDelete: backups #%d and #%d have different compression - cannot merge\n",
                        $Backups[$idx]{num}, $Backups[$idxMerge]{num});
            exit(1);
        }
        $MergeCompress = $Backups[$idxMerge]{compress};
        $MergeDir      = "$HostDir/$Backups[$idxMerge]{num}";

        if ( !chdir($MergeDir) ) {
            print(STDERR "BackupPC_backupDelete: cannot chdir to $MergeDir\n");
            exit(1);
        }
        $AttrDel   = BackupPC::XS::AttribCache::new($Host, $Backups[$idx]{num}, "",
                                                $Backups[$idx]{compress});
        $AttrMerge = BackupPC::XS::AttribCache::new($Host, $Backups[$idxMerge]{num}, "",
                                                $Backups[$idxMerge]{compress});

        mergeDir(".", ".");
        BackupPC::DirOps::find($bpc, {wanted => \&mergeDir}, ".", 1);

        $AttrDel->flush(1);
        $AttrMerge->flush(1);
        #
        # Now delete any remnants of the Del backup, including remaining
        # inodes.  This will decrement the reference counts on the
        # deleted files.
        #
        BackupPC::DirOps::RmTreeQuiet($bpc, $DelDir, $DelCompress, \&progressUpdate);
    }
    BackupPC::XS::PoolRefCnt::DeltaFileFlush();
}
if ( !$opts{l} ) {
    unlink("$HostDir/SmbLOG.$Backups[$idx]{num}")
                if ( -f "$HostDir/SmbLOG.$Backups[$idx]{num}" );
    unlink("$HostDir/SmbLOG.$Backups[$idx]{num}.z")
                if ( -f "$HostDir/SmbLOG.$Backups[$idx]{num}.z" );
    unlink("$HostDir/XferLOG.$Backups[$idx]{num}")
                if ( -f "$HostDir/XferLOG.$Backups[$idx]{num}" );
    unlink("$HostDir/XferLOG.$Backups[$idx]{num}.z")
                if ( -f "$HostDir/XferLOG.$Backups[$idx]{num}.z" );
}
splice(@Backups, $idx, 1);
$bpc->BackupInfoWrite($Host, @Backups);

unlink("$TopDir/pc/$Host/refCnt/needFsck.del") if ( $Errors == 0 );

print("BackupPC_backupDelete: got $Errors errors\n");
exit($Errors ? 1 : 0);

sub copyInodes
{
    my($name, $path) = @_;

    print("copyInodes: name = $name, path = $path\n") if ( $LogLevel >= 5 );
    return if ( $path !~ m{(.*)/(attrib)$} );

    $path = $1;
    $name = $2;

    my $attr = BackupPC::XS::Attrib::new($MergeCompress);
    if ( -f "$path/$name" && !$attr->read($path, $name) ) {
        print(STDERR "Can't read attribute file $path/$name: " . $attr->errStr() . "\n");
        $Errors++;
        return;
    }
    my $attrAll = $attr->get();
    foreach my $fileUM ( keys(%$attrAll) ) {
        my $a = $attrAll->{$fileUM};
        $FileCnt++;
        next if ( $a->{nlinks} == 0 );
        #
        # Copy the inode if it doesn't exist in Merge.
        # Also delete from Del since otherwise it will
        # be deleted later and the reference count will
        # be decremented.
        #
        if ( !$AttrMerge->getInode($a->{inode}) ) {
            my $aInode = $AttrDel->getInode($a->{inode});
            $AttrMerge->setInode($a->{inode}, $aInode);
            $AttrDel->deleteInode($a->{inode});
        }
    }
    printProgress() if ( $FileCnt >= $FileCntNext );
}

sub mergeDir
{
    my($name, $path) = @_;

    print("mergeDir: name = $name, path = $path\n") if ( $LogLevel >= 5 );

    return if ( !-d $path );
    $name = "attrib";

    my $d = $path;
    $d =~ s{^\./}{};
    my $delDir   = "$DelDir/$d";
    my $mergeDir = "$MergeDir/$d";

    print("mergeDir: delDir = $delDir, mergeDir = $mergeDir\n") if ( $LogLevel >= 6 );

    return if ( !-f "$delDir/$name" && !-f "$mergeDir/$name" );

    my $attr = BackupPC::XS::Attrib::new($MergeCompress);
    if ( -f "$mergeDir/$name" && !$attr->read($mergeDir, $name) ) {
        print(STDERR "Can't read attribute file $MergeDir/$d/$name: " . $attr->errStr() . "\n");
        $Errors++;
        return;
    }
    my $attrAll = $attr->get();

    my($attrDelAll);
    my $dirty = 0;
    my $attrDel = BackupPC::XS::Attrib::new($DelCompress);
    if ( -f "$delDir/$name" ) {
        if ( !$attrDel->read($delDir, $name) ) {
            print(STDERR "Can't read attribute file in $delDir: " . $attr->errStr() . "\n");
            $Errors++;
            next;
        }
        $attrDelAll = $attrDel->get();
    }

    #
    # Add non-attrib directories (ie: directories that were created
    # to store attributes in deeper directories), since these
    # directories may not appear in the attrib file at this level.
    #
    if ( defined(my $entries = BackupPC::DirOps::dirRead($bpc, $delDir)) ) {
        foreach my $e ( @$entries ) {
            next if ( $e->{name} eq "."
                   || $e->{name} eq ".."
                   || $e->{name} eq "inode"
                   || !-d "$delDir/$e->{name}" );
            my $fileUM = $bpc->fileNameUnmangle($e->{name});
            next if ( $attrDelAll && defined($attrDelAll->{$fileUM}) );
            $attrDelAll->{$fileUM} = {
                type     => BPC_FTYPE_DIR,
                noAttrib => 1,
            };
        }
    }
    if ( defined(my $entries = BackupPC::DirOps::dirRead($bpc, $mergeDir)) ) {
        foreach my $e ( @$entries ) {
            next if ( $e->{name} eq "."
                   || $e->{name} eq ".."
                   || $e->{name} eq "inode"
                   || !-d "$mergeDir/$e->{name}" );
            my $fileUM = $bpc->fileNameUnmangle($e->{name});
            next if ( $attrAll && defined($attrAll->{$fileUM}) );
            $attrAll->{$fileUM} = {
                type     => BPC_FTYPE_DIR,
                noAttrib => 1,
            };
        }
    }
    #print "MergeDir $mergeDir contents:\n", Dumper($attrAll);
    #print "DelDir $delDir contents:\n", Dumper($attrDelAll);

    foreach my $fileUM ( keys(%$attrDelAll) ) {
        my $a = $attrDelAll->{$fileUM};
        $FileCnt++;
        if ( defined(my $aMerge = $attrAll->{$fileUM}) ) {
            print("Got del file $delDir/$fileUM, type $a->{type}; mergeDir has type $aMerge->{type}\n")
                                                     if ( $LogLevel >= 7 );
            #
            # The file exists in both the previous and
            # deleted backups.
            #
            # If they are both directories, then don't do
            # anything for now
            #
            if ( $a->{type} == BPC_FTYPE_DIR &&
                  $aMerge->{type} == BPC_FTYPE_DIR ) {
                #
                # if the deleted directory has real attributes, and the
                # merge doesn't, then copy the attributes to merge
                #
                if ( $aMerge->{noAttrib} && !$a->{noAttrib} ) {
                    print("Copying del attributes to merge for $delDir/$fileUM\n")  if ( $LogLevel >= 7 );
                    $attr->set($fileUM, $a);
                    $dirty = 1;
                }
                next;
            }
            #
            # The deleted version will get deleted.
            #
            print("removing $delDir/$fileUM\n") if ( $LogLevel >= 7 );
            BackupPC::XS::PoolRefCnt::DeltaUpdate($DelCompress, $a->{digest}, -1)
                                        if ( length($a->{digest}) );
            next if ( $a->{type} != BPC_FTYPE_DIR );
            #
            # Since this is a directory and the merge file is not,
            # we need to remove the tree and update reference counts
            #
            my $file = $bpc->fileNameMangle($fileUM);
            print("removing directory tree $delDir/$fileUM\n") if ( $LogLevel >= 7 );
            BackupPC::DirOps::RmTreeQuiet($bpc, "$delDir/$file", $DelCompress, \&progressUpdate);
            next;
        }
        print("Got del file $delDir/$fileUM, type $a->{type}; mergeDir doesn't exist\n") if ( $LogLevel >= 7 );

        #
        # The file doesn't exist in the previous backup, so move
        # the deleted file version to the previous backup.  No
        # change in reference count.
        #
        if ( !$a->{noAttrib} ) {
            $attr->set($fileUM, $a);
            if ( $a->{nlinks} > 0 ) {
                #
                # Copy the inode if it doesn't exist in Merge.
                # Also delete from Del since otherwise it will
                # be deleted later and the reference count will
                # be decremented.
                #
                if ( !$AttrMerge->getInode($a->{inode}) ) {
                    my $aInode = $AttrDel->getInode($a->{inode});
                    $AttrMerge->setInode($a->{inode}, $aInode);
                    $AttrDel->deleteInode($a->{inode});
                }
            }
            $dirty = 1;
        }
        next if ( $a->{type} != BPC_FTYPE_DIR );
        #
        # Since it's a directory, move the whole thing over.
        # This means there are no changes in reference counts.
        # However, we also need to traverse the moved directory
        # to make sure any referenced inodes get moved over too.
        #
        my $file = $bpc->fileNameEltMangle($fileUM);
        print("renaming $delDir/$file to $mergeDir/$file\n") if ( $LogLevel >= 7 );
        if ( !rename("$delDir/$file", "$mergeDir/$file") ) {
            #
            # try again if the target directory doesn't exist
            #
            mkpath($mergeDir, 0, 0777) if ( !-d $mergeDir );
            if ( !rename("$delDir/$file", "$mergeDir/$file") ) {
                print(STDERR "Can't move $delDir/$file to $mergeDir/$file\n");
                #
                # need to remove this tree to make sure reference counts are
                # updated.
                #
                BackupPC::DirOps::RmTreeQuiet($bpc, "$delDir/$file", $DelCompress, \&progressUpdate);
                $Errors++;
            }
        } else {
            BackupPC::DirOps::find($bpc, {wanted => \&copyInodes}, "$mergeDir/$file", 1);
        }
    }
    printProgress() if ( $FileCnt >= $FileCntNext );

    #
    # Delete the attrib file and update its reference count
    #
    if ( -f "$delDir/$name" ) {
        if ( !unlink("$delDir/$name") ) {
            print(STDERR "Can't unlink $delDir/$name\n");
            $Errors++;
        } else {
            my $d = $attrDel->digest();
            BackupPC::XS::PoolRefCnt::DeltaUpdate($DelCompress, $d, -1) if ( length($d) );
        }
    }
    if ( $dirty ) {
        my $oldDigest = $attr->digest();
        #print("rewriting attrib file $d/$name; ");
        if ( !$attr->write($d, $name, $oldDigest) ) {
            print(STDERR $attr->errStr());
        }
        #printf("digest now %s, was %s\n", unpack("H*", $attr->digest()), unpack("H*", $oldDigest));
    }
}

sub progressUpdate
{
    my($newFileCnt) = @_;

    $FileCnt += $newFileCnt;
    printProgress() if ( $FileCnt >= $FileCntNext );
}

sub printProgress
{
    $FileCntNext = $FileCnt + 100;
    return if ( $opts{p} );
    print("__bpc_progress_fileCnt__ $FileCnt\n");
}
